D G "__PCD__" 0 18 ""5.112""
D G "__DEVICE__" 0 18 "4006"
D G "__DATE__" 0 18 ""24-Apr-24""
D G "__TIME__" 0 18 ""12:46:59""
D G "_UNICODE" 0 18 ""?""
D G "__EVAL" 0 18 ""?"" "Standard Header file for the PIC24FJ128GA006 device ////////////////"
c L "set_tris_b" 2 3 6 "FUNCTION"
F N "set_tris_b" 2 41 ""
V L "value" 2 41 "int16" `55 
F B "set_tris_b" 2 41 "void(int16 value)" `54 
F N "set_tris_c" 2 42 ""
V L "value" 2 42 "int16" `57 
F B "set_tris_c" 2 42 "void(int16 value)" `56 
F N "set_tris_d" 2 43 ""
V L "value" 2 43 "int16" `59 
F B "set_tris_d" 2 43 "void(int16 value)" `58 
F N "set_tris_e" 2 44 ""
V L "value" 2 44 "int16" `61 
F B "set_tris_e" 2 44 "void(int16 value)" `60 
F N "set_tris_f" 2 45 ""
V L "value" 2 45 "int16" `63 
F B "set_tris_f" 2 45 "void(int16 value)" `62 
F N "set_tris_g" 2 46 ""
V L "value" 2 46 "int16" `65 
F B "set_tris_g" 2 46 "void(int16 value)" `64 
F N "set_open_drain_b" 2 47 ""
V L "value" 2 47 "int16" `67 
F B "set_open_drain_b" 2 47 "void(int16 value)" `66 
F N "set_open_drain_c" 2 48 ""
V L "value" 2 48 "int16" `69 
F B "set_open_drain_c" 2 48 "void(int16 value)" `68 
F N "set_open_drain_d" 2 49 ""
V L "value" 2 49 "int16" `71 
F B "set_open_drain_d" 2 49 "void(int16 value)" `70 
F N "set_open_drain_e" 2 50 ""
V L "value" 2 50 "int16" `73 
F B "set_open_drain_e" 2 50 "void(int16 value)" `72 
F N "set_open_drain_f" 2 51 ""
V L "value" 2 51 "int16" `75 
F B "set_open_drain_f" 2 51 "void(int16 value)" `74 
F N "set_open_drain_g" 2 52 ""
V L "value" 2 52 "int16" `77 
F B "set_open_drain_g" 2 52 "void(int16 value)" `76 
F N "get_tris_b" 2 53 ""
F B "get_tris_b" 2 53 "int16()" `78 
F N "get_tris_c" 2 54 ""
F B "get_tris_c" 2 54 "int16()" `79 
F N "get_tris_d" 2 55 ""
F B "get_tris_d" 2 55 "int16()" `80 
F N "get_tris_e" 2 56 ""
F B "get_tris_e" 2 56 "int16()" `81 
F N "get_tris_f" 2 57 ""
F B "get_tris_f" 2 57 "int16()" `82 
F N "get_tris_g" 2 58 ""
F B "get_tris_g" 2 58 "int16()" `83 
F N "output_b" 2 59 ""
V L "value" 2 59 "int16" `85 
F B "output_b" 2 59 "void(int16 value)" `84 
F N "output_c" 2 60 ""
V L "value" 2 60 "int16" `87 
F B "output_c" 2 60 "void(int16 value)" `86 
F N "output_d" 2 61 ""
V L "value" 2 61 "int16" `89 
F B "output_d" 2 61 "void(int16 value)" `88 
F N "output_e" 2 62 ""
V L "value" 2 62 "int16" `91 
F B "output_e" 2 62 "void(int16 value)" `90 
F N "output_f" 2 63 ""
V L "value" 2 63 "int16" `93 
F B "output_f" 2 63 "void(int16 value)" `92 
F N "output_g" 2 64 ""
V L "value" 2 64 "int16" `95 
F B "output_g" 2 64 "void(int16 value)" `94 
F N "input_b" 2 65 ""
F B "input_b" 2 65 "int16()" `96 
F N "input_c" 2 66 ""
F B "input_c" 2 66 "int16()" `97 
F N "input_d" 2 67 ""
F B "input_d" 2 67 "int16()" `98 
F N "input_e" 2 68 ""
F B "input_e" 2 68 "int16()" `99 
F N "input_f" 2 69 ""
F B "input_f" 2 69 "int16()" `100 
F N "input_g" 2 70 ""
F B "input_g" 2 70 "int16()" `101 
F N "input_change_b" 2 71 ""
F B "input_change_b" 2 71 "sint16()" `102 
F N "input_change_c" 2 72 ""
F B "input_change_c" 2 72 "sint16()" `103 
F N "input_change_d" 2 73 ""
F B "input_change_d" 2 73 "sint16()" `104 
F N "input_change_e" 2 74 ""
F B "input_change_e" 2 74 "sint16()" `105 
F N "input_change_f" 2 75 ""
F B "input_change_f" 2 75 "sint16()" `106 
F N "input_change_g" 2 76 ""
F B "input_change_g" 2 76 "sint16()" `107 
F N "set_pullup" 2 77 ""
V L "state" 2 77 "int8" `109 
F B "set_pullup" 2 77 "void(int8 state)" `108 
F N "set_pullup" 2 78 ""
V L "state" 2 78 "int8" `111 
V L "pin" 2 78 "int16" `112 
F B "set_pullup" 2 78 "void(int8 state,int16 pin)" `110 
F N "input" 2 79 ""
V L "pin" 2 79 "int16" `114 
F B "input" 2 79 "int8(int16 pin)" `113 
F N "input_state" 2 80 ""
V L "pin" 2 80 "int16" `116 
F B "input_state" 2 80 "int8(int16 pin)" `115 
F N "output_low" 2 81 ""
V L "pin" 2 81 "int16" `118 
F B "output_low" 2 81 "void(int16 pin)" `117 
F N "output_high" 2 82 ""
V L "pin" 2 82 "int16" `120 
F B "output_high" 2 82 "void(int16 pin)" `119 
F N "output_toggle" 2 83 ""
V L "pin" 2 83 "int16" `122 
F B "output_toggle" 2 83 "void(int16 pin)" `121 
F N "output_bit" 2 84 ""
V L "pin" 2 84 "int16" `124 
V L "level" 2 84 "int8" `125 
F B "output_bit" 2 84 "void(int16 pin,int8 level)" `123 
F N "output_float" 2 85 ""
V L "pin" 2 85 "int16" `127 
F B "output_float" 2 85 "void(int16 pin)" `126 
F N "output_drive" 2 86 ""
V L "pin" 2 86 "int16" `129 
F B "output_drive" 2 86 "void(int16 pin)" `128  "Constants used to identify pins in the above are:"
D G "PIN_B0" 2 89 "5696"
D G "PIN_B1" 2 90 "5697"
D G "PIN_B2" 2 91 "5698"
D G "PIN_B3" 2 92 "5699"
D G "PIN_B4" 2 93 "5700"
D G "PIN_B5" 2 94 "5701"
D G "PIN_B6" 2 95 "5702"
D G "PIN_B7" 2 96 "5703"
D G "PIN_B8" 2 97 "5704"
D G "PIN_B9" 2 98 "5705"
D G "PIN_B10" 2 99 "5706"
D G "PIN_B11" 2 100 "5707"
D G "PIN_B12" 2 101 "5708"
D G "PIN_B13" 2 102 "5709"
D G "PIN_B14" 2 103 "5710"
D G "PIN_B15" 2 104 "5711"
D G "PIN_C12" 2 106 "5756"
D G "PIN_C13" 2 107 "5757"
D G "PIN_C14" 2 108 "5758"
D G "PIN_C15" 2 109 "5759"
D G "PIN_D0" 2 111 "5792"
D G "PIN_D1" 2 112 "5793"
D G "PIN_D2" 2 113 "5794"
D G "PIN_D3" 2 114 "5795"
D G "PIN_D4" 2 115 "5796"
D G "PIN_D5" 2 116 "5797"
D G "PIN_D6" 2 117 "5798"
D G "PIN_D7" 2 118 "5799"
D G "PIN_D8" 2 119 "5800"
D G "PIN_D9" 2 120 "5801"
D G "PIN_D10" 2 121 "5802"
D G "PIN_D11" 2 122 "5803"
D G "PIN_E0" 2 124 "5840"
D G "PIN_E1" 2 125 "5841"
D G "PIN_E2" 2 126 "5842"
D G "PIN_E3" 2 127 "5843"
D G "PIN_E4" 2 128 "5844"
D G "PIN_E5" 2 129 "5845"
D G "PIN_E6" 2 130 "5846"
D G "PIN_E7" 2 131 "5847"
D G "PIN_F0" 2 133 "5888"
D G "PIN_F1" 2 134 "5889"
D G "PIN_F2" 2 135 "5890"
D G "PIN_F3" 2 136 "5891"
D G "PIN_F4" 2 137 "5892"
D G "PIN_F5" 2 138 "5893"
D G "PIN_F6" 2 139 "5894"
D G "PIN_G2" 2 141 "5938"
D G "PIN_G3" 2 142 "5939"
D G "PIN_G6" 2 143 "5942"
D G "PIN_G7" 2 144 "5943"
D G "PIN_G8" 2 145 "5944"
D G "PIN_G9" 2 146 "5945"
D G "FALSE" 2 149 "0"
D G "TRUE" 2 150 "1"
D G "BYTE" 2 152 "unsigned int8"
D G "BOOLEAN" 2 153 "int1"
D G "getc" 2 155 "getch"
D G "fgetc" 2 156 "getch"
D G "getchar" 2 157 "getch"
D G "putc" 2 158 "putchar"
D G "fputc" 2 159 "putchar"
D G "fgets" 2 160 "gets"
D G "fputs" 2 161 "puts"
c L "output_drive" 2 3 2 "FUNCTION"
F N "setup_uart" 2 165 ""
V L "baud" 2 165 "int32" `131 
F B "setup_uart" 2 165 "void(int32 baud)" `130 
F N "setup_uart" 2 166 ""
V L "baud" 2 166 "int32" `133 
V L "stream" 2 166 "int8" `134 
F B "setup_uart" 2 166 "void(int32 baud,int8 stream)" `132 
F N "setup_uart" 2 167 ""
V L "baud" 2 167 "int32" `136 
V L "stream" 2 167 "int8" `137 
V L "clock" 2 167 "int32" `138 
F B "setup_uart" 2 167 "void(int32 baud,int8 stream,int32 clock)" `135 
F N "set_uart_speed" 2 168 ""
V L "baud" 2 168 "int32" `140 
F B "set_uart_speed" 2 168 "void(int32 baud)" `139 
F N "set_uart_speed" 2 169 ""
V L "baud" 2 169 "int32" `142 
V L "stream" 2 169 "int8" `143 
F B "set_uart_speed" 2 169 "void(int32 baud,int8 stream)" `141 
F N "set_uart_speed" 2 170 ""
V L "baud" 2 170 "int32" `145 
V L "stream" 2 170 "int8" `146 
V L "clock" 2 170 "int32" `147 
F B "set_uart_speed" 2 170 "void(int32 baud,int8 stream,int32 clock)" `144  "Constants used in setup_uart() are:"
D G "UART_ADDRESS" 2 174 "2"
D G "UART_DATA" 2 175 "4"
D G "UART_AUTODETECT" 2 176 "8"
D G "UART_AUTODETECT_NOWAIT" 2 177 "9"
D G "UART_WAKEUP_ON_RDA" 2 178 "10"
D G "UART_SEND_BREAK" 2 179 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
F N "setup_wdt" 2 184 ""
V L "mode" 2 184 "int8" `149 
F B "setup_wdt" 2 184 "void(int8 mode)" `148 
F N "restart_wdt" 2 185 ""
F B "restart_wdt" 2 185 "void()" `150  "Constants used for SETUP_WDT() are:"
D G "WDT_ON" 2 187 "1"
D G "WDT_OFF" 2 188 "0"
D G "WDT_1MS" 2 190 "0x002"
D G "WDT_2MS" 2 191 "0x003"
D G "WDT_4MS" 2 192 "0x004"
D G "WDT_8MS" 2 193 "0x005"
D G "WDT_16MS" 2 194 "0x006"
D G "WDT_32MS" 2 195 "0x007"
D G "WDT_64MS" 2 196 "0x008"
D G "WDT_128MS" 2 197 "0x009"
D G "WDT_256MS" 2 198 "0x00A"
D G "WDT_512MS" 2 199 "0x00B"
D G "WDT_1S" 2 200 "0x00C"
D G "WDT_2S" 2 201 "0x00D"
D G "WDT_4S" 2 202 "0x00E"
D G "WDT_8S" 2 203 "0x00F"
D G "WDT_16S" 2 204 "0x010"
D G "WDT_33S" 2 205 "0x011"
D G "WDT_65S" 2 206 "0x030"
D G "WDT_131S" 2 207 "0x031"
c L "restart_wdt" 2 3 3 "FUNCTION"
F N "restart_cause" 2 212 ""
F B "restart_cause" 2 212 "int8()" `151 
F N "reset_cpu" 2 213 ""
F B "reset_cpu" 2 213 "void()" `152 
F N "sleep" 2 214 ""
F B "sleep" 2 214 "void()" `153 
F N "sleep" 2 215 ""
V L "mode" 2 215 "int8" `155 
F B "sleep" 2 215 "void(int8 mode)" `154  "Constants passed into RESTART_CAUSE() are:"
D G "RESTART_POWER_UP" 2 217 "0"
D G "RESTART_BROWNOUT" 2 218 "1"
D G "RESTART_WATCHDOG" 2 219 "4"
D G "RESTART_SOFTWARE" 2 220 "6"
D G "RESTART_MCLR" 2 221 "7"
D G "RESTART_ILLEGAL_OP" 2 222 "14"
D G "RESTART_TRAP_CONFLICT" 2 223 "15"
D G "RESTART_NONE" 2 224 "16" "No restart occurred, most common cause for returning this is restart_cause() was called multiple times, or wake-up from sleep from interrupt."
D G "SLEEP_FULL" 2 227 "0" "Default"
D G "SLEEP_IDLE" 2 228 "1" "Clock and peripherals don't stop"
c L "sleep" 2 3 2 "FUNCTION"
F N "setup_oscillator" 2 234 ""
V L "type" 2 234 "int8" `157 
V L "target" 2 234 "int32" `158 
F B "setup_oscillator" 2 234 "void(int8 type,int32 target)" `156 
F N "setup_oscillator" 2 235 ""
V L "type" 2 235 "int8" `160 
V L "target" 2 235 "int32" `161 
V L "source" 2 235 "int32" `162 
F B "setup_oscillator" 2 235 "void(int8 type,int32 target,int32 source)" `159  "Constants used in setup_oscillator() are:"
D G "OSC_INTERNAL" 2 237 "32" "Internal FRC and LPRC"
D G "OSC_CRYSTAL" 2 238 "1" "External Crystal"
D G "OSC_CLOCK" 2 239 "2" "External Oscillator"
D G "OSC_SECONDARY" 2 240 "16" "External SOSC"
c L "setup_oscillator" 2 3 4 "FUNCTION"
F N "setup_timer1" 2 246 ""
V L "mode" 2 246 "int16" `164 
F B "setup_timer1" 2 246 "void(int16 mode)" `163 
F N "setup_timer1" 2 247 ""
V L "mode" 2 247 "int16" `166 
V L "period" 2 247 "int16" `167 
F B "setup_timer1" 2 247 "void(int16 mode,int16 period)" `165 
F N "get_timer1" 2 248 ""
F B "get_timer1" 2 248 "int16()" `168 
F N "set_timer1" 2 249 ""
V L "value" 2 249 "int16" `170 
F B "set_timer1" 2 249 "void(int16 value)" `169 
F N "setup_timer2" 2 250 ""
V L "mode" 2 250 "int16" `172 
F B "setup_timer2" 2 250 "void(int16 mode)" `171 
F N "setup_timer2" 2 251 ""
V L "mode" 2 251 "int16" `174 
V L "period" 2 251 "int16" `175 
F B "setup_timer2" 2 251 "void(int16 mode,int16 period)" `173 
F N "get_timer2" 2 252 ""
F B "get_timer2" 2 252 "int16()" `176 
F N "set_timer2" 2 253 ""
V L "value" 2 253 "int16" `178 
F B "set_timer2" 2 253 "void(int16 value)" `177 
F N "setup_timer3" 2 254 ""
V L "mode" 2 254 "int16" `180 
F B "setup_timer3" 2 254 "void(int16 mode)" `179 
F N "setup_timer3" 2 255 ""
V L "mode" 2 255 "int16" `182 
V L "period" 2 255 "int16" `183 
F B "setup_timer3" 2 255 "void(int16 mode,int16 period)" `181 
F N "get_timer3" 2 256 ""
F B "get_timer3" 2 256 "int16()" `184 
F N "set_timer3" 2 257 ""
V L "value" 2 257 "int16" `186 
F B "set_timer3" 2 257 "void(int16 value)" `185 
F N "get_timer23" 2 258 ""
F B "get_timer23" 2 258 "int32()" `187 
F N "set_timer23" 2 259 ""
V L "value" 2 259 "int32" `189 
F B "set_timer23" 2 259 "void(int32 value)" `188 
F N "setup_timer4" 2 260 ""
V L "mode" 2 260 "int16" `191 
F B "setup_timer4" 2 260 "void(int16 mode)" `190 
F N "setup_timer4" 2 261 ""
V L "mode" 2 261 "int16" `193 
V L "period" 2 261 "int16" `194 
F B "setup_timer4" 2 261 "void(int16 mode,int16 period)" `192 
F N "get_timer4" 2 262 ""
F B "get_timer4" 2 262 "int16()" `195 
F N "set_timer4" 2 263 ""
V L "value" 2 263 "int16" `197 
F B "set_timer4" 2 263 "void(int16 value)" `196 
F N "setup_timer5" 2 264 ""
V L "mode" 2 264 "int16" `199 
F B "setup_timer5" 2 264 "void(int16 mode)" `198 
F N "setup_timer5" 2 265 ""
V L "mode" 2 265 "int16" `201 
V L "period" 2 265 "int16" `202 
F B "setup_timer5" 2 265 "void(int16 mode,int16 period)" `200 
F N "get_timer5" 2 266 ""
F B "get_timer5" 2 266 "int16()" `203 
F N "set_timer5" 2 267 ""
V L "value" 2 267 "int16" `205 
F B "set_timer5" 2 267 "void(int16 value)" `204 
F N "get_timer45" 2 268 ""
F B "get_timer45" 2 268 "int32()" `206 
F N "set_timer45" 2 269 ""
V L "value" 2 269 "int32" `208 
F B "set_timer45" 2 269 "void(int32 value)" `207  "Constants used for SETUP_TIMERx() are:"
D G "TMR_DISABLED" 2 272 "0x0000"
D G "TMR_INTERNAL" 2 273 "0x8000"
D G "TMR_EXTERNAL" 2 274 "0x8002"
D G "TMR_EXTERNAL_SYNC" 2 275 "0x8006" "This only applies to Timer1"
D G "TMR_EXTERNAL_RTC" 2 276 "0xC002" "This only applies to Timer1"
D G "TMR_DIV_BY_1" 2 279 "0x0000"
D G "TMR_DIV_BY_8" 2 280 "0x0010"
D G "TMR_DIV_BY_64" 2 281 "0x0020"
D G "TMR_DIV_BY_256" 2 282 "0x0030"
D G "TMR_HALT_IDLE" 2 284 "0x2000"
D G "TMR_CONTINUE_IDLE" 2 285 "0x0000"
D G "TMR_32_BIT" 2 287 "0x0008" "Only for even numbered timers"
D G "TMR_GATE" 2 288 "0x0040"
c L "set_timer45" 2 3 3 "FUNCTION"
F N "setup_capture" 2 293 ""
V L "module" 2 293 "int8" `210 
V L "mode" 2 293 "int16" `211 
F B "setup_capture" 2 293 "void(int8 module,int16 mode)" `209 
F N "get_capture" 2 294 ""
V L "module" 2 294 "int8" `213 
F B "get_capture" 2 294 "int16(int8 module)" `212 
F N "get_capture" 2 295 ""
V L "module" 2 295 "int8" `215 
V L "wait" 2 295 "int8" `216 
F B "get_capture" 2 295 "int16(int8 module,int8 wait)" `214  "Constants used for SETUP_CAPTURE() are:"
D G "CAPTURE_OFF" 2 297 "0x0000" "Capture OFF"
D G "CAPTURE_EE" 2 298 "0x0001" "Capture Every Edge"
D G "CAPTURE_FE" 2 299 "0x0002" "Capture Falling Edge"
D G "CAPTURE_RE" 2 300 "0x0003" "Capture Rising Edge"
D G "CAPTURE_DIV_4" 2 301 "0x0004" "Capture Every 4th Rising Edge"
D G "CAPTURE_DIV_16" 2 302 "0x0005" "Capture Every 16th Rising Edge"
D G "CAPTURE_INTERRUPT_ONLY" 2 303 "0x0007" "Interrupt on Rising Edge when in Sleep or Idle"
D G "INTERRUPT_EVERY_CAPTURE" 2 306 "0x0000" "Interrupt on every capture event"
D G "INTERRUPT_SECOND_CAPTURE" 2 307 "0x0020" "Interrupt on every second capture event"
D G "INTERRUPT_THIRD_CAPTURE" 2 308 "0x0040" "Interrupt on every third capture event"
D G "INTERRUPT_FOURTH_CAPTURE" 2 309 "0x0060" "Interrupt on every fourth capture event"
D G "CAPTURE_TIMER2" 2 312 "0x0080" "On capture event Timer 2 is captured"
D G "CAPTURE_TIMER3" 2 313 "0x0000" "On capture event Timer 3 is captured"
D G "CAPTURE_HALT_IDLE" 2 316 "0x2000" "Capture module halts during idle mode"
D G "CAPTURE_CONTINUE_IDLE" 2 317 "0x0000" "Capture module continues during idle mode"
c L "get_capture" 2 3 3 "FUNCTION"
F N "setup_compare" 2 322 ""
V L "module" 2 322 "int8" `218 
V L "mode" 2 322 "int16" `219 
F B "setup_compare" 2 322 "void(int8 module,int16 mode)" `217 
F N "set_pwm_duty" 2 323 ""
V L "module" 2 323 "int8" `221 
V L "duty" 2 323 "int16" `222 
F B "set_pwm_duty" 2 323 "void(int8 module,int16 duty)" `220 
F N "set_compare_time" 2 324 ""
V L "module" 2 324 "int8" `224 
V L "ocr" 2 324 "int16" `225 
F B "set_compare_time" 2 324 "void(int8 module,int16 ocr)" `223 
F N "set_compare_time" 2 325 ""
V L "module" 2 325 "int8" `227 
V L "ocr" 2 325 "int16" `228 
V L "ocrs" 2 325 "int16" `229 
F B "set_compare_time" 2 325 "void(int8 module,int16 ocr,int16 ocrs)" `226  "Constants used for SETUP_COMPARE() are:"
D G "COMPARE_OFF" 2 327 "0x0000" "Compare OFF"
D G "COMPARE_SET_ON_MATCH" 2 328 "0x0001" "Pin from low to high on match"
D G "COMPARE_CLR_ON_MATCH" 2 329 "0x0002" "Pin from high to low on match"
D G "COMPARE_TOGGLE" 2 330 "0x0003" "Pin will toggle on every match occurrence"
D G "COMPARE_SINGLE_PULSE" 2 331 "0x0004" "Pin will generate single pulse on first match"
D G "COMPARE_CONT_PULSE" 2 332 "0x0005" "Pin will pulse for every match"
D G "COMPARE_PWM" 2 333 "0x0006" "Compare operates as PWM with fault pin disabled"
D G "COMPARE_PWM_FAULT" 2 334 "0x0007" "Compare operates as PWM with fault pin enabled"
D G "COMPARE_TIMER2" 2 337 "0x0000" "Timer 2 is the base timer"
D G "COMPARE_TIMER3" 2 338 "0x0008" "Timer 3 is the base timer"
D G "COMPARE_HALT_IDLE" 2 341 "0x2000" "Compare module halts during idle mode"
D G "COMPARE_CONTINUE_IDLE" 2 342 "0x0000" "Compare module continues during idle mode"
c L "set_compare_time" 2 3 3 "FUNCTION"
F N "setup_spi" 2 347 ""
V L "mode" 2 347 "int16" `231 
F B "setup_spi" 2 347 "void(int16 mode)" `230 
F N "spi_write" 2 348 ""
V L "data" 2 348 "int8" `233 
F B "spi_write" 2 348 "void(int8 data)" `232 
F N "spi_write" 2 349 ""
V L "wait" 2 349 "int8" `235 
V L "data" 2 349 "int8" `236 
F B "spi_write" 2 349 "void(int8 wait,int8 data)" `234 
F N "spi_write_16" 2 350 ""
V L "data" 2 350 "int16" `238 
F B "spi_write_16" 2 350 "void(int16 data)" `237 
F N "spi_write_16" 2 351 ""
V L "wait" 2 351 "int8" `240 
V L "data" 2 351 "int16" `241 
F B "spi_write_16" 2 351 "void(int8 wait,int16 data)" `239 
F N "spi_read" 2 352 ""
F B "spi_read" 2 352 "int8()" `242 
F N "spi_read" 2 353 ""
V L "data" 2 353 "int8" `244 
F B "spi_read" 2 353 "int8(int8 data)" `243 
F N "spi_read_16" 2 354 ""
F B "spi_read_16" 2 354 "int16()" `245 
F N "spi_read_16" 2 355 ""
V L "data" 2 355 "int16" `247 
F B "spi_read_16" 2 355 "int16(int16 data)" `246 
F N "spi_data_is_in" 2 356 ""
F B "spi_data_is_in" 2 356 "int8()" `248 
F N "setup_spi2" 2 357 ""
V L "mode" 2 357 "int16" `250 
F B "setup_spi2" 2 357 "void(int16 mode)" `249 
F N "spi_write2" 2 358 ""
V L "data" 2 358 "int8" `252 
F B "spi_write2" 2 358 "void(int8 data)" `251 
F N "spi_write2" 2 359 ""
V L "wait" 2 359 "int8" `254 
V L "data" 2 359 "int8" `255 
F B "spi_write2" 2 359 "void(int8 wait,int8 data)" `253 
F N "spi_write2_16" 2 360 ""
V L "data" 2 360 "int16" `257 
F B "spi_write2_16" 2 360 "void(int16 data)" `256 
F N "spi_write2_16" 2 361 ""
V L "wait" 2 361 "int8" `259 
V L "data" 2 361 "int16" `260 
F B "spi_write2_16" 2 361 "void(int8 wait,int16 data)" `258 
F N "spi_read2" 2 362 ""
F B "spi_read2" 2 362 "int8()" `261 
F N "spi_read2" 2 363 ""
V L "data" 2 363 "int8" `263 
F B "spi_read2" 2 363 "int8(int8 data)" `262 
F N "spi_read2_16" 2 364 ""
F B "spi_read2_16" 2 364 "int16()" `264 
F N "spi_read2_16" 2 365 ""
V L "data" 2 365 "int16" `266 
F B "spi_read2_16" 2 365 "int16(int16 data)" `265 
F N "spi_data_is_in2" 2 366 ""
F B "spi_data_is_in2" 2 366 "int8()" `267  "Constants used in SETUP_SPI() are:"
D G "SPI_MASTER" 2 369 "0x0020"
D G "SPI_SLAVE" 2 370 "0x0000"
D G "SPI_SCK_IDLE_HIGH" 2 372 "0x0040"
D G "SPI_SCK_IDLE_LOW" 2 373 "0x0000"
D G "SPI_XMIT_L_TO_H" 2 375 "0x0100"
D G "SPI_XMIT_H_TO_L" 2 376 "0x0000"
D G "SPI_MODE_16B" 2 378 "0x0400"
D G "SPI_MODE_8B" 2 379 "0x0000"
D G "SPI_SAMPLE_AT_END" 2 381 "0x0200"
D G "SPI_SAMPLE_AT_MIDDLE" 2 382 "0x0000"
D G "SPI_SS_ENABLED" 2 384 "0x0000"
D G "SPI_SS_DISABLED" 2 385 "0x0080"
D G "SPI_CLK_DIV_1" 2 388 "0x001F"
D G "SPI_CLK_DIV_2" 2 389 "0x001B"
D G "SPI_CLK_DIV_3" 2 390 "0x0017"
D G "SPI_CLK_DIV_4" 2 391 "0x001E"
D G "SPI_CLK_DIV_5" 2 392 "0x000F"
D G "SPI_CLK_DIV_6" 2 393 "0x000B"
D G "SPI_CLK_DIV_7" 2 394 "0x0007"
D G "SPI_CLK_DIV_8" 2 395 "0x0003"
D G "SPI_CLK_DIV_12" 2 396 "0x0016"
D G "SPI_CLK_DIV_16" 2 397 "0x001D"
D G "SPI_CLK_DIV_20" 2 398 "0x000E"
D G "SPI_CLK_DIV_24" 2 399 "0x000A"
D G "SPI_CLK_DIV_28" 2 400 "0x0006"
D G "SPI_CLK_DIV_32" 2 401 "0x0002"
D G "SPI_CLK_DIV_48" 2 402 "0x0015"
D G "SPI_CLK_DIV_64" 2 403 "0x001C"
D G "SPI_CLK_DIV_80" 2 404 "0x000D"
D G "SPI_CLK_DIV_96" 2 405 "0x0009"
D G "SPI_CLK_DIV_112" 2 406 "0x0005"
D G "SPI_CLK_DIV_128" 2 407 "0x0001"
D G "SPI_CLK_DIV_192" 2 408 "0x0014"
D G "SPI_CLK_DIV_256" 2 409 "0x0010"
D G "SPI_CLK_DIV_320" 2 410 "0x000C"
D G "SPI_CLK_DIV_384" 2 411 "0x0008"
D G "SPI_CLK_DIV_448" 2 412 "0x0004"
D G "SPI_CLK_DIV_512" 2 413 "0x0000"
D G "SPI_L_TO_H" 2 416 "SPI_SCK_IDLE_LOW"
D G "SPI_H_TO_L" 2 417 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 2 3 4 "FUNCTION"
F N "setup_adc" 2 423 ""
V L "mode" 2 423 "int32" `269 
F B "setup_adc" 2 423 "void(int32 mode)" `268 
F N "setup_adc_ports" 2 424 ""
V L "pins" 2 424 "int32" `271 
F B "setup_adc_ports" 2 424 "void(int32 pins)" `270 
F N "setup_adc_ports" 2 425 ""
V L "pins" 2 425 "int32" `273 
V L "reference" 2 425 "int16" `274 
F B "setup_adc_ports" 2 425 "void(int32 pins,int16 reference)" `272 
F N "set_adc_channel" 2 426 ""
V L "channel" 2 426 "int8" `276 
F B "set_adc_channel" 2 426 "void(int8 channel)" `275 
F N "set_adc_channel" 2 427 ""
V L "channel" 2 427 "int8" `278 
V L "neg_channel" 2 427 "int8" `279 
F B "set_adc_channel" 2 427 "void(int8 channel,int8 neg_channel)" `277 
F N "read_adc" 2 428 ""
F B "read_adc" 2 428 "int16()" `280 
F N "read_adc" 2 429 ""
V L "mode" 2 429 "int8" `282 
F B "read_adc" 2 429 "int16(int8 mode)" `281 
F N "adc_done" 2 430 ""
F B "adc_done" 2 430 "int8()" `283  "Constants used for SETUP_ADC() are:"
D G "ADC_OFF" 2 434 "0x10000"
D G "ADC_CLOCK" 2 435 "0x0000"
D G "ADC_CLOCK_DIV_2" 2 436 "0x0001"
D G "ADC_CLOCK_DIV_4" 2 437 "0x0003"
D G "ADC_CLOCK_DIV_8" 2 438 "0x0007"
D G "ADC_CLOCK_DIV_16" 2 439 "0x000F"
D G "ADC_CLOCK_DIV_32" 2 440 "0x001F"
D G "ADC_CLOCK_DIV_64" 2 441 "0x003F"
D G "ADC_CLOCK_INTERNAL" 2 442 "0x8000" "Internal"
D G "ADC_TAD_MUL_0" 2 446 "0x1F00"
D G "ADC_TAD_MUL_2" 2 447 "0x1D00"
D G "ADC_TAD_MUL_4" 2 448 "0x1B00"
D G "ADC_TAD_MUL_8" 2 449 "0x1700"
D G "ADC_TAD_MUL_16" 2 450 "0x0F00"
D G "ADC_TAD_MUL_31" 2 451 "0x0000"
D G "ADC_START_AND_READ" 2 454 "0x07"
D G "ADC_START_ONLY" 2 455 "0x01"
D G "ADC_READ_ONLY" 2 456 "0x06"
D G "VSS" 2 459 "0"
D G "NO_ANALOGS" 2 464 "0" "None"
D G "ALL_ANALOG" 2 465 "0xFFFFFFFF" "All"
D G "sAN0" 2 466 "0x00000001" "| B0"
D G "sAN1" 2 467 "0x00000002" "| B1"
D G "sAN2" 2 468 "0x00000004" "| B2"
D G "sAN3" 2 469 "0x00000008" "| B3"
D G "sAN4" 2 470 "0x00000010" "| B4"
D G "sAN5" 2 471 "0x00000020" "| B5"
D G "sAN6" 2 472 "0x00000040" "| B6"
D G "sAN7" 2 473 "0x00000080" "| B7"
D G "sAN8" 2 474 "0x00000100" "| B8"
D G "sAN9" 2 475 "0x00000200" "| B9"
D G "sAN10" 2 476 "0x00000400" "| B10"
D G "sAN11" 2 477 "0x00000800" "| B11"
D G "sAN12" 2 478 "0x00001000" "| B12"
D G "sAN13" 2 479 "0x00002000" "| B13"
D G "sAN14" 2 480 "0x00004000" "| B14"
D G "sAN15" 2 481 "0x00008000" "| B15"
D G "VSS_VDD" 2 484 "0x0000" "Range 0-Vdd"
D G "VREF_VREF" 2 485 "0x6000" "Range VrefL-VrefH"
D G "VREF_VDD" 2 486 "0x4000" "Range VrefL-Vdd"
D G "VSS_VREF" 2 487 "0x2000" "Range 0-VrefH"
c L "adc_done" 2 3 4 "FUNCTION"
F N "setup_comparator" 2 493 ""
V L "comparator" 2 493 "int8" `285 
V L "mode" 2 493 "int16" `286 
F B "setup_comparator" 2 493 "void(int8 comparator,int16 mode)" `284  "Constants used in setup_comparator() second param are: - first param is the comparator number."
D G "NC_NC" 2 495 "0x0000"
D G "CXINB_CXINA" 2 496 "0x0401" "CXIN- and CXIN+"
D G "CXINA_CXINA" 2 497 "0x0403" "CXIN+ and CXIN+"
D G "CXINB_VREF" 2 498 "0x0400" "CXIN- and CVREF"
D G "CXINA_VREF" 2 499 "0x0402" "CXIN+ and CVREF"
D G "COMP_INVERT" 2 501 "0x0010"
D G "COMP_OUTPUT" 2 502 "0x0100"
D G "COMP_HALT_IDLE" 2 503 "0x8000"
D G "NC_NC_NC_NC" 2 510 "0"
D G "B4_B5_NC_NC" 2 511 "0x401"
D G "B4_VR_NC_NC" 2 512 "0x400"
D G "B5_VR_NC_NC" 2 513 "0x402"
D G "NC_NC_B2_B3" 2 514 "0x804"
D G "NC_NC_B2_VR" 2 515 "0x800"
D G "NC_NC_B3_VR" 2 516 "0x808"
D G "B4_B5_B2_B3" 2 517 "B4_B5_NC_NC | NC_NC_B2_B3"
D G "B4_VR_B2_VR" 2 518 "B4_VR_NC_NC | NC_NC_B2_VR"
D G "B5_VR_B3_VR" 2 519 "B5_VR_NC_NC | NC_NC_B3_VR"
D G "C1_INVERT" 2 521 "0x10"
D G "C2_INVERT" 2 522 "0x20"
D G "C1_OUTPUT" 2 523 "0x100"
D G "C2_OUTPUT" 2 524 "0x200"
c L "setup_comparator" 2 3 2 "FUNCTION"
F N "setup_vref" 2 528 ""
V L "mode" 2 528 "int16" `290 
F B "setup_vref" 2 528 "void(int16 mode)" `289  "Constants used in setup_vref() are:"
D G "VREF_DISABLED" 2 530 "0x0000"
D G "VREF_VSS_VDD" 2 531 "0x0080"
D G "VREF_ANALOG" 2 532 "0x0090"
D G "VREF_HIGH" 2 534 "0x0080"
D G "VREF_LOW" 2 535 "0x00A0"
D G "VREF_OUTPUT" 2 537 "0x0040"
c L "setup_vref" 2 3 7 "FUNCTION"
F N "setup_pmp" 2 546 ""
V L "mode" 2 546 "int32" `292 
V L "address_mask" 2 546 "int16" `293 
F B "setup_pmp" 2 546 "void(int32 mode,int16 address_mask)" `291 
F N "pmp_address" 2 547 ""
V L "address" 2 547 "int16" `295 
F B "pmp_address" 2 547 "void(int16 address)" `294 
F N "pmp_read" 2 548 ""
F B "pmp_read" 2 548 "int8()" `296 
F N "pmp_write" 2 549 ""
V L "data" 2 549 "int8" `298 
F B "pmp_write" 2 549 "void(int8 data)" `297 
F N "pmp_output_full" 2 550 ""
F B "pmp_output_full" 2 550 "int8()" `299 
F N "pmp_input_full" 2 551 ""
F B "pmp_input_full" 2 551 "int8()" `300 
F N "pmp_overflow" 2 552 ""
F B "pmp_overflow" 2 552 "int8()" `301 
F N "setup_psp" 2 553 ""
V L "mode" 2 553 "int32" `303 
V L "address_mask" 2 553 "int16" `304 
F B "setup_psp" 2 553 "void(int32 mode,int16 address_mask)" `302 
F N "psp_read" 2 554 ""
F B "psp_read" 2 554 "int8()" `305 
F N "psp_read" 2 555 ""
V L "address" 2 555 "int16" `307 
F B "psp_read" 2 555 "int8(int16 address)" `306 
F N "psp_write" 2 556 ""
V L "data" 2 556 "int8" `309 
F B "psp_write" 2 556 "void(int8 data)" `308 
F N "psp_write" 2 557 ""
V L "data" 2 557 "int8" `311 
V L "address" 2 557 "int16" `312 
F B "psp_write" 2 557 "void(int8 data,int16 address)" `310 
F N "psp_output_full" 2 558 ""
F B "psp_output_full" 2 558 "int8()" `313 
F N "psp_input_full" 2 559 ""
F B "psp_input_full" 2 559 "int8()" `314 
F N "psp_overflow" 2 560 ""
F B "psp_overflow" 2 560 "int8()" `315  "Constants used in SETUP_PMP() and SETUP_PSP() are:"
D G "PAR_ENABLE" 2 562 "0x8000"
D G "PAR_DISABLE" 2 563 "0x0000"
D G "PAR_STOP_IN_IDLE" 2 565 "0x2000"
D G "PAR_CONTINUE_IN_IDLE" 2 566 "0x0000"
D G "PAR_ADDR_NOT_MULTIPLEXED" 2 568 "0x0000"
D G "PAR_LOW_ADDR_MULTIPLEXED" 2 569 "0x0800"
D G "PAR_FULL_ADDR_MULTIPLEXED" 2 570 "0x1000"
D G "PAR_PTBEEN_ENABLE" 2 572 "0x0400" "Byte Enable Port Enable bit"
D G "PAR_PTWREN_ENABLE" 2 573 "0x0200" "Write Enable Strobe bit"
D G "PAR_PTRDEN_ENABLE" 2 574 "0x0100" "Read/Write Strobe Port bit"
D G "PAR_ALP_ACTIVE_HIGH" 2 575 "0x0020" "Address latch polarity high"
D G "PAR_BEP_ACTIVE_HIGH" 2 576 "0x0004" "Byte Enable Polarity"
D G "PAR_WRSP_ACTIVE_HIGH" 2 577 "0x0002" "Write strobe Polarity bit"
D G "PAR_RDSP_ACTIVE_HIGH" 2 578 "0x0001" "Read strobe Polarity bit"
D G "PAR_CS_XX" 2 580 "0x0000" "Chip select pins used for address"
D G "PAR_CS_X1" 2 581 "0x0008" "Chip select pin 1 used, active high"
D G "PAR_CS_X0" 2 582 "0x0000" "Chip select pin 1 used, active low"
D G "PAR_CS_1X" 2 583 "0x0050" "Chip select pin 2 used, active high"
D G "PAR_CS_0X" 2 584 "0x0040" "Chip select pin 2 used, active low"
D G "PAR_CS_00" 2 585 "0x0080" "Chip select pins 1,2 used, active low"
D G "PAR_CS_11" 2 586 "0x0098" "Chip select pins 1,2 used, active high"
D G "PAR_CS_10" 2 587 "0x0090" "Chip select pins 1,2 used, 1 is active low, 2 is high"
D G "PAR_CS_01" 2 588 "0x0088" "Chip select pins 1,2 used, 1 is active high, 2 is low"
D G "PAR_INTR_ON_3_RW_BUF" 2 590 "0x60000000" "Interrupt on write to Buffer 3 or read from Buffer 3"
D G "PAR_NO_INTR_STALL_ACTIVATED" 2 591 "0x40000000" "No interrupt, processor stall activated"
D G "PAR_INTR_ON_RW" 2 592 "0x20000000" "Interrupt on read write"
D G "PAR_NO_INTR" 2 593 "0x00000000" "No interrupt"
D G "PAR_PSP_AUTO_INC" 2 595 "0x18000000" "Read write buffers auto increment"
D G "PAR_DEC_ADDR" 2 596 "0x10000000" "Decrement the address"
D G "PAR_INC_ADDR" 2 597 "0x08000000" "Increment the address"
D G "PAR_NO_INC_DEC_ADDR" 2 598 "0x00000000" "No increment or decrement of the address"
D G "PAR_MASTER_MODE_1" 2 600 "0x03000000" "Master mode 1"
D G "PAR_MASTER_MODE_2" 2 601 "0x02000000" "Master mode 2"
D G "PAR_ENHANCED_PSP_MODE" 2 602 "0x01000000" "Enhanced PSP control signals"
D G "PAR_LEGACY_PSP_MODE" 2 603 "0x00000000" "Legacy Parallel Slave Port"
D G "PAR_WAITB1" 2 605 "0x00000000" "1 wait states for data setup R/W"
D G "PAR_WAITB2" 2 606 "0x00400000" "2 wait states for data setup R/W"
D G "PAR_WAITB3" 2 607 "0x00800000" "3 wait states for data setup R/W"
D G "PAR_WAITB4" 2 608 "0x00C00000" "4 wait states for data setup R/W"
D G "PAR_WAITM0" 2 610 "0x00000000" "0 wait states"
D G "PAR_WAITM1" 2 611 "0x00040000" "1 wait states"
D G "PAR_WAITM2" 2 612 "0x00080000" "2 wait states"
D G "PAR_WAITM3" 2 613 "0x000C0000" "3 wait states"
D G "PAR_WAITM4" 2 614 "0x00100000" "4 wait states"
D G "PAR_WAITM5" 2 615 "0x00140000" "5 wait states"
D G "PAR_WAITM6" 2 616 "0x00180000" "6 wait states"
D G "PAR_WAITM7" 2 617 "0x001C0000" "7 wait states"
D G "PAR_WAITM8" 2 618 "0x00200000" "8 wait states"
D G "PAR_WAITM9" 2 619 "0x00240000" "9 wait states"
D G "PAR_WAITM10" 2 620 "0x00280000" "10 wait states"
D G "PAR_WAITM11" 2 621 "0x002C0000" "11 wait states"
D G "PAR_WAITM12" 2 622 "0x00300000" "12 wait states"
D G "PAR_WAITM13" 2 623 "0x00340000" "13 wait states"
D G "PAR_WAITM14" 2 624 "0x00380000" "14 wait states"
D G "PAR_WAITM15" 2 625 "0x003C0000" "15 wait states"
D G "PAR_WAITE1" 2 627 "0x00000000" "1 wait states for data hold after strobe"
D G "PAR_WAITE2" 2 628 "0x00010000" "2 wait states for data hold after strobe"
D G "PAR_WAITE3" 2 629 "0x00020000" "3 wait states for data hold after strobe"
D G "PAR_WAITE4" 2 630 "0x00030000" "4 wait states for data hold after strobe"
c L "psp_overflow" 2 3 4 "FUNCTION"
F N "setup_crc" 2 636 ""
V L "poly_terms" 2 636 "int8" `317 
F B "setup_crc" 2 636 "void(int8 poly_terms,*int8 _VA_LIST)" `316 
F N "crc_init" 2 637 ""
V L "value" 2 637 "int16" `320 
F B "crc_init" 2 637 "void(int16 value)" `319 
F N "crc_calc16" 2 638 ""
V L "data" 2 638 "int16" `322 
F B "crc_calc16" 2 638 "int16(int16 data)" `321 
F N "crc_calc16" 2 639 ""
V L "data" 2 639 "int8" `324 
V L "width" 2 639 "int8" `325 
F B "crc_calc16" 2 639 "int16(int8 data,int8 width)" `323 
F N "crc_calc16" 2 640 ""
V L "data" 2 640 "int16" `327 
V L "width" 2 640 "int8" `328 
F B "crc_calc16" 2 640 "int16(int16 data,int8 width)" `326 
F N "crc_calc16" 2 641 ""
V L "ptr" 2 641 "*int16" `330 
V L "count" 2 641 "int16" `331 
F B "crc_calc16" 2 641 "int16(*int16 ptr,int16 count)" `329 
F N "crc_calc16" 2 642 ""
V L "ptr" 2 642 "*int8" `333 
V L "count" 2 642 "int16" `334 
V L "width" 2 642 "int8" `335 
F B "crc_calc16" 2 642 "int16(*int8 ptr,int16 count,int8 width)" `332 
F N "crc_calc16" 2 643 ""
V L "ptr" 2 643 "*int16" `337 
V L "count" 2 643 "int16" `338 
V L "width" 2 643 "int8" `339 
F B "crc_calc16" 2 643 "int16(*int16 ptr,int16 count,int8 width)" `336 
F N "crc_calc8" 2 644 ""
V L "data" 2 644 "int8" `341 
F B "crc_calc8" 2 644 "int8(int8 data)" `340 
F N "crc_calc8" 2 645 ""
V L "data" 2 645 "int8" `343 
V L "width" 2 645 "int8" `344 
F B "crc_calc8" 2 645 "int8(int8 data,int8 width)" `342 
F N "crc_calc8" 2 646 ""
V L "data" 2 646 "int16" `346 
V L "width" 2 646 "int8" `347 
F B "crc_calc8" 2 646 "int8(int16 data,int8 width)" `345 
F N "crc_calc8" 2 647 ""
V L "ptr" 2 647 "*int8" `349 
V L "count" 2 647 "int16" `350 
F B "crc_calc8" 2 647 "int8(*int8 ptr,int16 count)" `348 
F N "crc_calc8" 2 648 ""
V L "ptr" 2 648 "*int8" `352 
V L "count" 2 648 "int16" `353 
V L "width" 2 648 "int8" `354 
F B "crc_calc8" 2 648 "int8(*int8 ptr,int16 count,int8 width)" `351 
F N "crc_calc8" 2 649 ""
V L "ptr" 2 649 "*int16" `356 
V L "count" 2 649 "int16" `357 
V L "width" 2 649 "int8" `358 
F B "crc_calc8" 2 649 "int8(*int16 ptr,int16 count,int8 width)" `355 
F N "crc_calc" 2 650 ""
V L "data" 2 650 "int16" `360 
F B "crc_calc" 2 650 "int16(int16 data)" `359 
F N "crc_calc" 2 651 ""
V L "data" 2 651 "int8" `362 
V L "width" 2 651 "int8" `363 
F B "crc_calc" 2 651 "int16(int8 data,int8 width)" `361 
F N "crc_calc" 2 652 ""
V L "data" 2 652 "int16" `365 
V L "width" 2 652 "int8" `366 
F B "crc_calc" 2 652 "int16(int16 data,int8 width)" `364 
F N "crc_calc" 2 653 ""
V L "ptr" 2 653 "*int16" `368 
V L "count" 2 653 "int16" `369 
F B "crc_calc" 2 653 "int16(*int16 ptr,int16 count)" `367 
F N "crc_calc" 2 654 ""
V L "ptr" 2 654 "*int8" `371 
V L "count" 2 654 "int16" `372 
V L "width" 2 654 "int8" `373 
F B "crc_calc" 2 654 "int16(*int8 ptr,int16 count,int8 width)" `370 
F N "crc_calc" 2 655 ""
V L "ptr" 2 655 "*int16" `375 
V L "count" 2 655 "int16" `376 
V L "width" 2 655 "int8" `377 
F B "crc_calc" 2 655 "int16(*int16 ptr,int16 count,int8 width)" `374  "RTC"
c L "crc_calc" 2 3 3 "FUNCTION"
c L "crc_calc" 2 3 1 "FUNCTION"
c L "crc_calc" 2 3 1 "FUNCTION"
T G "rtc_time_t" 2 671 "{int8 tm_year,int8 tm_temp,int8 tm_mday,int8 tm_mon,int8 tm_hour,int8 tm_wday,int8 tm_sec,int8 tm_min,int8 tm_isdst}" `388  "RTC Prototypes:"
F N "setup_rtc" 2 673 ""
V L "mode" 2 673 "int16" `390 
V L "calibration" 2 673 "int8" `391 
F B "setup_rtc" 2 673 "void(int16 mode,int8 calibration)" `389 
F N "setup_rtc_alarm" 2 674 ""
V L "mode" 2 674 "int16" `393 
V L "mask" 2 674 "int16" `394 
V L "repeat" 2 674 "int8" `395 
F B "setup_rtc_alarm" 2 674 "void(int16 mode,int16 mask,int8 repeat)" `392 
F N "rtc_read" 2 675 ""
V L "time" 2 675 " *" `397 
F B "rtc_read" 2 675 "void( * time)" `396 
F N "rtc_write" 2 676 ""
V L "time" 2 676 " *" `399 
F B "rtc_write" 2 676 "void( * time)" `398 
F N "rtc_alarm_read" 2 677 ""
V L "time" 2 677 " *" `401 
F B "rtc_alarm_read" 2 677 "void( * time)" `400 
F N "rtc_alarm_write" 2 678 ""
V L "time" 2 678 " *" `403 
F B "rtc_alarm_write" 2 678 "void( * time)" `402  "Constants used in setup_rtc() are:  // Second param is calibration"
D G "RTC_ENABLE" 2 680 "0x8000"
D G "RTC_DISABLE" 2 681 "0"
D G "RTC_OUTPUT_SECONDS" 2 682 "0x20400"
D G "RTC_OUTPUT_ALARM" 2 683 "0x00400"
D G "RTC_ALARM_ENABLE" 2 686 "0x8000"
D G "RTC_ALARM_DISABLE" 2 687 "0"
D G "RTC_CHIME_ENABLE" 2 688 "0x4000"
D G "RTC_CHIME_DISABLE" 2 689 "0"
D G "RTC_ALARM_HALFSECOND" 2 691 "0x0000"
D G "RTC_ALARM_SECOND" 2 692 "0x0400"
D G "RTC_ALARM_10_SECONDS" 2 693 "0x0800"
D G "RTC_ALARM_MINUTE" 2 694 "0x0C00"
D G "RTC_ALARM_10_MINUTES" 2 695 "0x1000"
D G "RTC_ALARM_HOUR" 2 696 "0x1400"
D G "RTC_ALARM_DAY" 2 697 "0x1800"
D G "RTC_ALARM_WEEK" 2 698 "0x1C00"
D G "RTC_ALARM_MONTH" 2 699 "0x2000"
D G "RTC_ALARM_YEAR" 2 700 "0x2400"
c L "rtc_alarm_write" 2 3 3 "FUNCTION"
F N "abs" 2 706 ""
V L "x" 2 706 "sint8" `405 
F B "abs" 2 706 "sint8(sint8 x)" `404 
F N "abs" 2 707 ""
V L "x" 2 707 "sint16" `407 
F B "abs" 2 707 "sint16(sint16 x)" `406 
F N "abs" 2 708 ""
V L "x" 2 708 "sint32" `409 
F B "abs" 2 708 "sint32(sint32 x)" `408 
F N "abs" 2 709 ""
V L "x" 2 709 "float" `411 
F B "abs" 2 709 "float(float x)" `410 
F N "_mul" 2 710 ""
V L "??65535" 2 710 "int8" `413 
V L "??65535" 2 710 "int8" `414 
F B "_mul" 2 710 "int16(int8 ,int8 )" `412 
F N "_mul" 2 711 ""
V L "??65535" 2 711 "sint8" `416 
V L "??65535" 2 711 "sint8" `417 
F B "_mul" 2 711 "sint16(sint8 ,sint8 )" `415 
F N "_mul" 2 712 ""
V L "??65535" 2 712 "int16" `419 
V L "??65535" 2 712 "int16" `420 
F B "_mul" 2 712 "int32(int16 ,int16 )" `418 
F N "_mul" 2 713 ""
V L "??65535" 2 713 "sint16" `422 
V L "??65535" 2 713 "sint16" `423 
F B "_mul" 2 713 "sint32(sint16 ,sint16 )" `421 
F N "abs" 2 714 ""
V L "x" 2 714 "?" `425 
F B "abs" 2 714 "?(? x)" `424 
F N "abs" 2 715 ""
V L "x" 2 715 "?" `427 
F B "abs" 2 715 "?(? x)" `426 
F N "abs" 2 716 ""
V L "x" 2 716 "?" `429 
F B "abs" 2 716 "?(? x)" `428 
F N "abs" 2 717 ""
V L "x" 2 717 "?" `431 
F B "abs" 2 717 "?(? x)" `430 
F N "_mul" 2 718 ""
V L "??65535" 2 718 "int32" `433 
V L "??65535" 2 718 "int32" `434 
F B "_mul" 2 718 "?(int32 ,int32 )" `432 
F N "_mul" 2 719 ""
V L "??65535" 2 719 "sint32" `436 
V L "??65535" 2 719 "sint32" `437 
F B "_mul" 2 719 "?(sint32 ,sint32 )" `435 
F N "_mul" 2 720 ""
V L "??65535" 2 720 "?" `439 
V L "??65535" 2 720 "?" `440 
F B "_mul" 2 720 "?(? ,? )" `438 
F N "_mul" 2 721 ""
V L "??65535" 2 721 "?" `442 
V L "??65535" 2 721 "?" `443 
F B "_mul" 2 721 "?(? ,? )" `441  "Memory Manipulation Prototypes:"
F N "strcpy" 2 724 ""
V L "dest" 2 724 "*sint8" `445 
V L "src" 2 724 "*sint8" `446 
F B "strcpy" 2 724 "void(*sint8 dest,*sint8 src)" `444 
F N "memset" 2 725 ""
V L "destination" 2 725 "*int8" `448 
V L "value" 2 725 "int8" `449 
V L "num" 2 725 "int16" `450 
F B "memset" 2 725 "void(*int8 destination,int8 value,int16 num)" `447 
F N "memcpy" 2 726 ""
V L "destination" 2 726 "*int8" `452 
V L "source" 2 726 "*int8" `453 
V L "num" 2 726 "int16" `454 
F B "memcpy" 2 726 "void(*int8 destination,*int8 source,int16 num)" `451  "Data Manipulators Prototypes:"
F N "shift_left" 2 729 ""
V L "address" 2 729 "*int8" `456 
V L "bytes" 2 729 "int8" `457 
V L "value" 2 729 "int8" `458 
F B "shift_left" 2 729 "int8(*int8 address,int8 bytes,int8 value)" `455 
F N "shift_right" 2 730 ""
V L "address" 2 730 "*int8" `460 
V L "bytes" 2 730 "int8" `461 
V L "value" 2 730 "int8" `462 
F B "shift_right" 2 730 "int8(*int8 address,int8 bytes,int8 value)" `459 
F N "rotate_left" 2 731 ""
V L "address" 2 731 "*int8" `464 
V L "bytes" 2 731 "int8" `465 
F B "rotate_left" 2 731 "void(*int8 address,int8 bytes)" `463 
F N "rotate_right" 2 732 ""
V L "address" 2 732 "*int8" `467 
V L "bytes" 2 732 "int8" `468 
F B "rotate_right" 2 732 "void(*int8 address,int8 bytes)" `466 
F N "swap" 2 733 ""
V L "value" 2 733 "int8" `470 
F B "swap" 2 733 "void(int8 value)" `469 
F N "make8" 2 734 ""
V L "var" 2 734 "int16" `472 
V L "offset" 2 734 "int8" `473 
F B "make8" 2 734 "int8(int16 var,int8 offset)" `471 
F N "make8" 2 735 ""
V L "var" 2 735 "int32" `475 
V L "offset" 2 735 "int8" `476 
F B "make8" 2 735 "int8(int32 var,int8 offset)" `474 
F N "make16" 2 736 ""
V L "varhigh" 2 736 "int8" `478 
V L "varlow" 2 736 "int8" `479 
F B "make16" 2 736 "int16(int8 varhigh,int8 varlow)" `477 
F N "make32" 2 737 ""
V L "var1" 2 737 "int16" `481 
F B "make32" 2 737 "int32(int16 var1)" `480 
F N "make32" 2 738 ""
V L "var1" 2 738 "int16" `483 
V L "var2" 2 738 "int16" `484 
F B "make32" 2 738 "int32(int16 var1,int16 var2)" `482 
F N "make32" 2 739 ""
V L "var1" 2 739 "int16" `486 
V L "var2" 2 739 "int8" `487 
F B "make32" 2 739 "int32(int16 var1,int8 var2)" `485 
F N "make32" 2 740 ""
V L "var1" 2 740 "int16" `489 
V L "var2" 2 740 "int8" `490 
V L "var3" 2 740 "int8" `491 
F B "make32" 2 740 "int32(int16 var1,int8 var2,int8 var3)" `488 
F N "make32" 2 741 ""
V L "var1" 2 741 "int8" `493 
F B "make32" 2 741 "int32(int8 var1)" `492 
F N "make32" 2 742 ""
V L "var1" 2 742 "int8" `495 
V L "var2" 2 742 "int8" `496 
F B "make32" 2 742 "int32(int8 var1,int8 var2)" `494 
F N "make32" 2 743 ""
V L "var1" 2 743 "int8" `498 
V L "var2" 2 743 "int8" `499 
V L "var3" 2 743 "int8" `500 
F B "make32" 2 743 "int32(int8 var1,int8 var2,int8 var3)" `497 
F N "make32" 2 744 ""
V L "var1" 2 744 "int8" `502 
V L "var2" 2 744 "int8" `503 
V L "var3" 2 744 "int8" `504 
V L "var4" 2 744 "int8" `505 
F B "make32" 2 744 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `501 
F N "make32" 2 745 ""
V L "var1" 2 745 "int8" `507 
V L "var2" 2 745 "int16" `508 
F B "make32" 2 745 "int32(int8 var1,int16 var2)" `506 
F N "make32" 2 746 ""
V L "var1" 2 746 "int8" `510 
V L "var2" 2 746 "int16" `511 
V L "var3" 2 746 "int8" `512 
F B "make32" 2 746 "int32(int8 var1,int16 var2,int8 var3)" `509 
F N "make32" 2 747 ""
V L "var1" 2 747 "int8" `514 
V L "var2" 2 747 "int8" `515 
V L "var3" 2 747 "int16" `516 
F B "make32" 2 747 "int32(int8 var1,int8 var2,int16 var3)" `513 
F N "bit_set" 2 748 ""
V L "var" 2 748 "int8" `518 
V L "bit" 2 748 "int8" `519 
F B "bit_set" 2 748 "void(int8 var,int8 bit)" `517 
F N "bit_set" 2 749 ""
V L "var" 2 749 "int16" `521 
V L "bit" 2 749 "int8" `522 
F B "bit_set" 2 749 "void(int16 var,int8 bit)" `520 
F N "bit_set" 2 750 ""
V L "var" 2 750 "int32" `524 
V L "bit" 2 750 "int8" `525 
F B "bit_set" 2 750 "void(int32 var,int8 bit)" `523 
F N "bit_clear" 2 751 ""
V L "var" 2 751 "int8" `527 
V L "bit" 2 751 "int8" `528 
F B "bit_clear" 2 751 "void(int8 var,int8 bit)" `526 
F N "bit_clear" 2 752 ""
V L "var" 2 752 "int16" `530 
V L "bit" 2 752 "int8" `531 
F B "bit_clear" 2 752 "void(int16 var,int8 bit)" `529 
F N "bit_clear" 2 753 ""
V L "var" 2 753 "int32" `533 
V L "bit" 2 753 "int8" `534 
F B "bit_clear" 2 753 "void(int32 var,int8 bit)" `532 
F N "bit_test" 2 754 ""
V L "var" 2 754 "int8" `536 
V L "bit" 2 754 "int8" `537 
F B "bit_test" 2 754 "int8(int8 var,int8 bit)" `535 
F N "bit_test" 2 755 ""
V L "var" 2 755 "int16" `539 
V L "bit" 2 755 "int8" `540 
F B "bit_test" 2 755 "int8(int16 var,int8 bit)" `538 
F N "bit_test" 2 756 ""
V L "var" 2 756 "int32" `542 
V L "bit" 2 756 "int8" `543 
F B "bit_test" 2 756 "int8(int32 var,int8 bit)" `541 
F N "bit_set" 2 757 ""
V L "var" 2 757 "?" `545 
V L "bit" 2 757 "int8" `546 
F B "bit_set" 2 757 "void(? var,int8 bit)" `544 
F N "bit_set" 2 758 ""
V L "var" 2 758 "?" `548 
V L "bit" 2 758 "int8" `549 
F B "bit_set" 2 758 "void(? var,int8 bit)" `547 
F N "bit_clear" 2 759 ""
V L "var" 2 759 "?" `551 
V L "bit" 2 759 "int8" `552 
F B "bit_clear" 2 759 "void(? var,int8 bit)" `550 
F N "bit_clear" 2 760 ""
V L "var" 2 760 "?" `554 
V L "bit" 2 760 "int8" `555 
F B "bit_clear" 2 760 "void(? var,int8 bit)" `553 
F N "bit_test" 2 761 ""
V L "var" 2 761 "?" `557 
V L "bit" 2 761 "int8" `558 
F B "bit_test" 2 761 "int8(? var,int8 bit)" `556 
F N "bit_test" 2 762 ""
V L "var" 2 762 "?" `560 
V L "bit" 2 762 "int8" `561 
F B "bit_test" 2 762 "int8(? var,int8 bit)" `559 
F N "bit_first" 2 763 ""
V L "value" 2 763 "int8" `563 
V L "var" 2 763 "int16" `564 
F B "bit_first" 2 763 "int8(int8 value,int16 var)" `562 
F N "bit_last" 2 764 ""
V L "var" 2 764 "sint16" `566 
F B "bit_last" 2 764 "int8(sint16 var)" `565 
F N "bit_last" 2 765 ""
V L "value" 2 765 "int8" `568 
V L "var" 2 765 "sint16" `569 
F B "bit_last" 2 765 "int8(int8 value,sint16 var)" `567  "#use delay() Prototypes:"
F N "delay_cycles" 2 768 ""
V L "count" 2 768 "int16" `571 
F B "delay_cycles" 2 768 "void(int16 count)" `570 
F N "delay_ms" 2 769 ""
V L "time" 2 769 "int16" `573 
F B "delay_ms" 2 769 "void(int16 time)" `572 
F N "delay_us" 2 770 ""
V L "time" 2 770 "int16" `575 
F B "delay_us" 2 770 "void(int16 time)" `574  "#use rs232() Prototypes:"
F N "putchar" 2 773 ""
V L "cdata" 2 773 "sint8" `577 
F B "putchar" 2 773 "void(sint8 cdata)" `576 
F N "putchar" 2 774 ""
V L "cdata" 2 774 "sint8" `579 
V L "stream" 2 774 "int8" `580 
F B "putchar" 2 774 "void(sint8 cdata,int8 stream)" `578 
F N "puts" 2 775 ""
V L "string" 2 775 "*sint8" `582 
F B "puts" 2 775 "void(*sint8 string)" `581 
F N "puts" 2 776 ""
V L "string" 2 776 "*sint8" `584 
V L "stream" 2 776 "int8" `585 
F B "puts" 2 776 "void(*sint8 string,int8 stream)" `583 
F N "getch" 2 777 ""
F B "getch" 2 777 "sint8()" `586 
F N "getch" 2 778 ""
V L "stream" 2 778 "int8" `588 
F B "getch" 2 778 "sint8(int8 stream)" `587 
F N "gets" 2 779 ""
V L "string" 2 779 "*sint8" `590 
F B "gets" 2 779 "void(*sint8 string)" `589 
F N "gets" 2 780 ""
V L "string" 2 780 "*sint8" `592 
V L "stream" 2 780 "int8" `593 
F B "gets" 2 780 "void(*sint8 string,int8 stream)" `591 
F N "kbhit" 2 781 ""
F B "kbhit" 2 781 "int8()" `594 
F N "kbhit" 2 782 ""
V L "stream" 2 782 "int8" `596 
F B "kbhit" 2 782 "int8(int8 stream)" `595 
F N "printf" 2 783 ""
V L "string" 2 783 "*sint8" `598 
F B "printf" 2 783 "void(*sint8 string,*int8 _VA_LIST)" `597 
F N "fprintf" 2 784 ""
V L "stream" 2 784 "int8" `601 
V L "string" 2 784 "*sint8" `602 
F B "fprintf" 2 784 "void(int8 stream,*sint8 string,*int8 _VA_LIST)" `600 
F N "putc_send" 2 785 ""
F B "putc_send" 2 785 "void()" `604 
F N "fputc_send" 2 786 ""
V L "stream" 2 786 "int8" `606 
F B "fputc_send" 2 786 "void(int8 stream)" `605 
F N "rcv_buffer_full" 2 787 ""
F B "rcv_buffer_full" 2 787 "int8()" `607 
F N "rcv_buffer_full" 2 788 ""
V L "stream" 2 788 "int8" `609 
F B "rcv_buffer_full" 2 788 "int8(int8 stream)" `608 
F N "rcv_buffer_bytes" 2 789 ""
F B "rcv_buffer_bytes" 2 789 "int16()" `610 
F N "rcv_buffer_bytes" 2 790 ""
V L "stream" 2 790 "int8" `612 
F B "rcv_buffer_bytes" 2 790 "int16(int8 stream)" `611 
F N "tx_buffer_full" 2 791 ""
F B "tx_buffer_full" 2 791 "int8()" `613 
F N "tx_buffer_full" 2 792 ""
V L "stream" 2 792 "int8" `615 
F B "tx_buffer_full" 2 792 "int8(int8 stream)" `614 
F N "tx_buffer_bytes" 2 793 ""
F B "tx_buffer_bytes" 2 793 "int16()" `616 
F N "tx_buffer_bytes" 2 794 ""
V L "stream" 2 794 "int8" `618 
F B "tx_buffer_bytes" 2 794 "int16(int8 stream)" `617 
F N "linbus_header" 2 795 ""
V L "identifier" 2 795 "int8" `620 
F B "linbus_header" 2 795 "int8(int8 identifier)" `619 
F N "linbus_header" 2 796 ""
V L "stream" 2 796 "int8" `622 
V L "identifier" 2 796 "int8" `623 
F B "linbus_header" 2 796 "int8(int8 stream,int8 identifier)" `621 
F N "linbus_header_hit" 2 797 ""
F B "linbus_header_hit" 2 797 "int8()" `624 
F N "linbus_header_hit" 2 798 ""
V L "stream" 2 798 "int8" `626 
F B "linbus_header_hit" 2 798 "int8(int8 stream)" `625 
F N "linbus_header_get" 2 799 ""
F B "linbus_header_get" 2 799 "int8()" `627 
F N "linbus_header_get" 2 800 ""
V L "stream" 2 800 "int8" `629 
F B "linbus_header_get" 2 800 "int8(int8 stream)" `628 
F N "linbus_rx_response" 2 801 ""
V L "DataPtr" 2 801 "*int8" `631 
V L "count" 2 801 "int8" `632 
F B "linbus_rx_response" 2 801 "int8(*int8 DataPtr,int8 count)" `630 
F N "linbus_rx_response" 2 802 ""
V L "stream" 2 802 "int8" `634 
V L "DataPtr" 2 802 "*int8" `635 
V L "count" 2 802 "int8" `636 
F B "linbus_rx_response" 2 802 "int8(int8 stream,*int8 DataPtr,int8 count)" `633 
F N "linbus_tx_response" 2 803 ""
V L "DataPtr" 2 803 "*int8" `638 
V L "count" 2 803 "int8" `639 
F B "linbus_tx_response" 2 803 "void(*int8 DataPtr,int8 count)" `637 
F N "linbus_tx_response" 2 804 ""
V L "stream" 2 804 "int8" `641 
V L "DataPtr" 2 804 "*int8" `642 
V L "count" 2 804 "int8" `643 
F B "linbus_tx_response" 2 804 "void(int8 stream,*int8 DataPtr,int8 count)" `640 
F N "linbus_checksum_type" 2 805 ""
V L "type" 2 805 "int8" `645 
F B "linbus_checksum_type" 2 805 "void(int8 type)" `644 
F N "linbus_checksum_type" 2 806 ""
V L "stream" 2 806 "int8" `647 
V L "type" 2 806 "int8" `648 
F B "linbus_checksum_type" 2 806 "void(int8 stream,int8 type)" `646  "#use i2c() Prototypes:"
F N "i2c_read" 2 809 ""
F B "i2c_read" 2 809 "int8()" `649 
F N "i2c_read" 2 810 ""
V L "ack" 2 810 "int8" `651 
F B "i2c_read" 2 810 "int8(int8 ack)" `650 
F N "i2c_read" 2 811 ""
V L "stream" 2 811 "int8" `653 
V L "ack" 2 811 "int8" `654 
F B "i2c_read" 2 811 "int8(int8 stream,int8 ack)" `652 
F N "i2c_write" 2 812 ""
V L "data" 2 812 "int8" `656 
F B "i2c_write" 2 812 "int8(int8 data)" `655 
F N "i2c_write" 2 813 ""
V L "stream" 2 813 "int8" `658 
V L "data" 2 813 "int8" `659 
F B "i2c_write" 2 813 "int8(int8 stream,int8 data)" `657 
F N "i2c_start" 2 814 ""
F B "i2c_start" 2 814 "void()" `660 
F N "i2c_start" 2 815 ""
V L "stream" 2 815 "int8" `662 
F B "i2c_start" 2 815 "void(int8 stream)" `661 
F N "i2c_start" 2 816 ""
V L "stream" 2 816 "int8" `664 
V L "restart" 2 816 "int8" `665 
F B "i2c_start" 2 816 "void(int8 stream,int8 restart)" `663 
F N "i2c_stop" 2 817 ""
F B "i2c_stop" 2 817 "void()" `666 
F N "i2c_stop" 2 818 ""
V L "stream" 2 818 "int8" `668 
F B "i2c_stop" 2 818 "void(int8 stream)" `667 
F N "i2c_isr_state" 2 819 ""
F B "i2c_isr_state" 2 819 "sint8()" `669 
F N "i2c_slaveaddr" 2 820 ""
V L "addr" 2 820 "int8" `671 
F B "i2c_slaveaddr" 2 820 "void(int8 addr)" `670 
F N "i2c_slaveaddr" 2 821 ""
V L "stream" 2 821 "int8" `673 
V L "addr" 2 821 "int8" `674 
F B "i2c_slaveaddr" 2 821 "void(int8 stream,int8 addr)" `672 
F N "i2c_poll" 2 822 ""
F B "i2c_poll" 2 822 "int8()" `675 
F N "i2c_poll" 2 823 ""
V L "stream" 2 823 "int8" `677 
F B "i2c_poll" 2 823 "int8(int8 stream)" `676 
F N "i2c_init" 2 824 ""
V L "baud" 2 824 "int32" `679 
F B "i2c_init" 2 824 "void(int32 baud)" `678 
F N "i2c_init" 2 825 ""
V L "stream" 2 825 "int8" `681 
V L "baud" 2 825 "int32" `682 
F B "i2c_init" 2 825 "void(int8 stream,int32 baud)" `680 
F N "i2c_transfer" 2 826 ""
V L "address" 2 826 "int8" `684 
V L "wData" 2 826 "*int8" `685 
V L "wCount" 2 826 "int8" `686 
F B "i2c_transfer" 2 826 "int8(int8 address,*int8 wData,int8 wCount)" `683 
F N "i2c_transfer" 2 827 ""
V L "address" 2 827 "int8" `688 
V L "wData" 2 827 "*int8" `689 
V L "wCount" 2 827 "int8" `690 
V L "rData" 2 827 "*int8" `691 
V L "rCount" 2 827 "*int8" `692 
F B "i2c_transfer" 2 827 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `687 
F N "i2c_transfer" 2 828 ""
V L "stream" 2 828 "int8" `694 
V L "address" 2 828 "int8" `695 
V L "wData" 2 828 "*int8" `696 
V L "wCount" 2 828 "int8" `697 
F B "i2c_transfer" 2 828 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `693 
F N "i2c_transfer" 2 829 ""
V L "stream" 2 829 "int8" `699 
V L "address" 2 829 "int8" `700 
V L "wData" 2 829 "*int8" `701 
V L "wCount" 2 829 "int8" `702 
V L "rData" 2 829 "*int8" `703 
V L "rCount" 2 829 "*int8" `704 
F B "i2c_transfer" 2 829 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `698 
F N "i2c_transfer_out" 2 830 ""
V L "address" 2 830 "int8" `706 
V L "wData" 2 830 "*int8" `707 
V L "wCount" 2 830 "int8" `708 
F B "i2c_transfer_out" 2 830 "int8(int8 address,*int8 wData,int8 wCount)" `705 
F N "i2c_transfer_out" 2 831 ""
V L "stream" 2 831 "int8" `710 
V L "address" 2 831 "int8" `711 
V L "wData" 2 831 "*int8" `712 
V L "wCount" 2 831 "int8" `713 
F B "i2c_transfer_out" 2 831 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `709 
F N "i2c_transfer_in" 2 832 ""
V L "address" 2 832 "int8" `715 
V L "rData" 2 832 "*int8" `716 
V L "rCount" 2 832 "int8" `717 
F B "i2c_transfer_in" 2 832 "int8(int8 address,*int8 rData,int8 rCount)" `714 
F N "i2c_transfer_in" 2 833 ""
V L "stream" 2 833 "int8" `719 
V L "address" 2 833 "int8" `720 
V L "rData" 2 833 "*int8" `721 
V L "rCount" 2 833 "int8" `722 
F B "i2c_transfer_in" 2 833 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `718  "#use spi() Prototypes:"
F N "spi_xfer" 2 836 ""
F B "spi_xfer" 2 836 "int8()" `723 
F N "spi_xfer" 2 837 ""
f G "spi_xfer" 2 837 "int16(int8 data)" `724 
F N "spi_xfer" 2 838 ""
f G "spi_xfer" 2 838 "int32(int8 data)" `724 
F N "spi_xfer" 2 839 ""
V L "data" 2 839 "int8" `725 
F B "spi_xfer" 2 839 "int8(int8 data)" `724 
F N "spi_xfer" 2 840 ""
V L "data" 2 840 "int16" `727 
F B "spi_xfer" 2 840 "int16(int16 data)" `726 
F N "spi_xfer" 2 841 ""
V L "data" 2 841 "int32" `729 
F B "spi_xfer" 2 841 "int32(int32 data)" `728 
F N "spi_xfer" 2 842 ""
V L "stream" 2 842 "int8" `731 
V L "data" 2 842 "int8" `732 
F B "spi_xfer" 2 842 "int8(int8 stream,int8 data)" `730 
F N "spi_xfer" 2 843 ""
V L "stream" 2 843 "int8" `734 
V L "data" 2 843 "int16" `735 
F B "spi_xfer" 2 843 "int16(int8 stream,int16 data)" `733 
F N "spi_xfer" 2 844 ""
V L "stream" 2 844 "int8" `737 
V L "data" 2 844 "int32" `738 
F B "spi_xfer" 2 844 "int32(int8 stream,int32 data)" `736 
F N "spi_xfer" 2 845 ""
V L "stream" 2 845 "int8" `740 
V L "data" 2 845 "int8" `741 
V L "bits" 2 845 "int8" `742 
F B "spi_xfer" 2 845 "int8(int8 stream,int8 data,int8 bits)" `739 
F N "spi_xfer" 2 846 ""
V L "stream" 2 846 "int8" `744 
V L "data" 2 846 "int16" `745 
V L "bits" 2 846 "int8" `746 
F B "spi_xfer" 2 846 "int16(int8 stream,int16 data,int8 bits)" `743 
F N "spi_xfer" 2 847 ""
V L "stream" 2 847 "int8" `748 
V L "data" 2 847 "int32" `749 
V L "bits" 2 847 "int8" `750 
F B "spi_xfer" 2 847 "int32(int8 stream,int32 data,int8 bits)" `747 
F N "spi_init" 2 848 ""
V L "baud" 2 848 "int32" `752 
F B "spi_init" 2 848 "void(int32 baud)" `751 
F N "spi_init" 2 849 ""
V L "stream" 2 849 "int8" `754 
V L "baud" 2 849 "int32" `755 
F B "spi_init" 2 849 "void(int8 stream,int32 baud)" `753 
F N "spi_speed" 2 850 ""
V L "baud" 2 850 "int32" `757 
F B "spi_speed" 2 850 "void(int32 baud)" `756 
F N "spi_speed" 2 851 ""
V L "stream" 2 851 "int8" `759 
V L "baud" 2 851 "int32" `760 
F B "spi_speed" 2 851 "void(int8 stream,int32 baud)" `758 
F N "spi_speed" 2 852 ""
V L "stream" 2 852 "int8" `762 
V L "baud" 2 852 "int32" `763 
V L "clock" 2 852 "int32" `764 
F B "spi_speed" 2 852 "void(int8 stream,int32 baud,int32 clock)" `761 
F N "spi_prewrite" 2 853 ""
V L "data" 2 853 "int8" `766 
F B "spi_prewrite" 2 853 "void(int8 data)" `765 
F N "spi_prewrite" 2 854 ""
V L "data" 2 854 "int16" `768 
F B "spi_prewrite" 2 854 "void(int16 data)" `767 
F N "spi_prewrite" 2 855 ""
V L "data" 2 855 "int32" `770 
F B "spi_prewrite" 2 855 "void(int32 data)" `769 
F N "spi_prewrite" 2 856 ""
V L "??65535" 2 856 "int8" `772 
V L "data" 2 856 "int8" `773 
F B "spi_prewrite" 2 856 "void(int8 ,int8 data)" `771 
F N "spi_prewrite" 2 857 ""
V L "??65535" 2 857 "int8" `775 
V L "data" 2 857 "int16" `776 
F B "spi_prewrite" 2 857 "void(int8 ,int16 data)" `774 
F N "spi_prewrite" 2 858 ""
V L "??65535" 2 858 "int8" `778 
V L "data" 2 858 "int32" `779 
F B "spi_prewrite" 2 858 "void(int8 ,int32 data)" `777 
F N "spi_xfer_in" 2 859 ""
F B "spi_xfer_in" 2 859 "int8()" `780 
F N "spi_xfer_in" 2 860 ""
f G "spi_xfer_in" 2 860 "int16(int8 bits)" `781 
F N "spi_xfer_in" 2 861 ""
f G "spi_xfer_in" 2 861 "int32(int8 bits)" `781 
F N "spi_xfer_in" 2 862 ""
V L "bits" 2 862 "int8" `782 
F B "spi_xfer_in" 2 862 "int8(int8 bits)" `781 
F N "spi_xfer_in" 2 863 ""
V L "bits" 2 863 "int8" `784 
f G "spi_xfer_in" 2 863 "int16(int8 bits,int8 bits)" `783 
F N "spi_xfer_in" 2 864 ""
V L "bits" 2 864 "int8" `784 
f G "spi_xfer_in" 2 864 "int32(int8 bits,int8 bits)" `783 
F N "spi_xfer_in" 2 865 ""
V L "stream" 2 865 "int8" `784 
V L "bits" 2 865 "int8" `785 
F B "spi_xfer_in" 2 865 "int8(int8 stream,int8 bits)" `783 
F N "spi_xfer_in" 2 866 ""
V L "stream" 2 866 "int8" `784 
V L "bits" 2 866 "int8" `788 
f G "spi_xfer_in" 2 866 "int16(int8 stream,int8 bits,int16 count)" `786 
F N "spi_xfer_in" 2 867 ""
V L "stream" 2 867 "int8" `784 
V L "bits" 2 867 "int8" `788 
f G "spi_xfer_in" 2 867 "int32(int8 stream,int8 bits,int16 count)" `786 
F N "spi_transfer" 2 868 ""
V L "wData" 2 868 "*int8" `787 
V L "rData" 2 868 "*int8" `788 
V L "count" 2 868 "int16" `789 
F B "spi_transfer" 2 868 "void(*int8 wData,*int8 rData,int16 count)" `786 
F N "spi_transfer" 2 869 ""
V L "stream" 2 869 "int8" `791 
V L "wData" 2 869 "*int8" `792 
V L "rData" 2 869 "*int8" `793 
V L "count" 2 869 "int16" `794 
F B "spi_transfer" 2 869 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `790 
F N "spi_transfer_write" 2 870 ""
V L "wData" 2 870 "*int8" `796 
V L "count" 2 870 "int16" `797 
F B "spi_transfer_write" 2 870 "void(*int8 wData,int16 count)" `795 
F N "spi_transfer_write" 2 871 ""
V L "stream" 2 871 "int8" `799 
V L "wData" 2 871 "*int8" `800 
V L "count" 2 871 "int16" `801 
F B "spi_transfer_write" 2 871 "void(int8 stream,*int8 wData,int16 count)" `798 
F N "spi_transfer_read" 2 872 ""
V L "rData" 2 872 "*int8" `803 
V L "count" 2 872 "int16" `804 
F B "spi_transfer_read" 2 872 "void(*int8 rData,int16 count)" `802 
F N "spi_transfer_read" 2 873 ""
V L "stream" 2 873 "int8" `806 
V L "rData" 2 873 "*int8" `807 
V L "count" 2 873 "int16" `808 
F B "spi_transfer_read" 2 873 "void(int8 stream,*int8 rData,int16 count)" `805  "#use rtos() Prototypes:"
F N "rtos_run" 2 876 ""
F B "rtos_run" 2 876 "void()" `809 
F N "rtos_yield" 2 877 ""
F B "rtos_yield" 2 877 "void()" `810 
F N "rtos_enable" 2 878 ""
V L "task" 2 878 "int8" `812 
F B "rtos_enable" 2 878 "void(int8 task)" `811 
F N "rtos_disable" 2 879 ""
V L "task" 2 879 "int8" `814 
F B "rtos_disable" 2 879 "void(int8 task)" `813 
F N "rtos_terminate" 2 880 ""
F B "rtos_terminate" 2 880 "void()" `815 
F N "rtos_await" 2 881 ""
V L "flag" 2 881 "int8" `817 
F B "rtos_await" 2 881 "void(int8 flag)" `816 
F N "rtos_wait" 2 882 ""
V L "sem" 2 882 "int8" `819 
F B "rtos_wait" 2 882 "void(int8 sem)" `818 
F N "rtos_signal" 2 883 ""
V L "sem" 2 883 "int8" `821 
F B "rtos_signal" 2 883 "void(int8 sem)" `820 
F N "rtos_msg_send" 2 884 ""
V L "task" 2 884 "int8" `823 
V L "msg" 2 884 "int8" `824 
F B "rtos_msg_send" 2 884 "void(int8 task,int8 msg)" `822 
F N "rtos_msg_read" 2 885 ""
F B "rtos_msg_read" 2 885 "int8()" `825 
F N "rtos_msg_poll" 2 886 ""
F B "rtos_msg_poll" 2 886 "int8()" `826 
F N "rtos_overrun" 2 887 ""
V L "task" 2 887 "int8" `828 
F B "rtos_overrun" 2 887 "int8(int8 task)" `827 
F N "rtos_stats" 2 888 ""
V L "task" 2 888 "int8" `830 
V L "stat" 2 888 "*int8" `831 
F B "rtos_stats" 2 888 "void(int8 task,*int8 stat)" `829  "#use timer() Prototypes:"
F N "get_ticks" 2 891 ""
F B "get_ticks" 2 891 "int8()" `832 
F N "get_ticks" 2 892 ""
f G "get_ticks" 2 892 "int16(int8 stream)" `833 
F N "get_ticks" 2 893 ""
f G "get_ticks" 2 893 "int32(int8 stream)" `833 
F N "get_ticks" 2 894 ""
f G "get_ticks" 2 894 "?(int8 stream)" `833 
F N "get_ticks" 2 895 ""
V L "stream" 2 895 "int8" `834 
F B "get_ticks" 2 895 "int8(int8 stream)" `833 
F N "get_ticks" 2 896 ""
V L "stream" 2 896 "int8" `836 
f G "get_ticks" 2 896 "int16(int8 stream)" `835 
F N "get_ticks" 2 897 ""
V L "stream" 2 897 "int8" `836 
f G "get_ticks" 2 897 "int32(int8 stream)" `835 
F N "get_ticks" 2 898 ""
V L "stream" 2 898 "int8" `836 
f G "get_ticks" 2 898 "?(int8 stream)" `835 
F N "set_ticks" 2 899 ""
V L "value" 2 899 "int8" `836 
F B "set_ticks" 2 899 "void(int8 value)" `835 
F N "set_ticks" 2 900 ""
V L "value" 2 900 "int16" `838 
F B "set_ticks" 2 900 "void(int16 value)" `837 
F N "set_ticks" 2 901 ""
V L "value" 2 901 "int32" `840 
F B "set_ticks" 2 901 "void(int32 value)" `839 
F N "set_ticks" 2 902 ""
V L "value" 2 902 "?" `842 
F B "set_ticks" 2 902 "void(? value)" `841 
F N "set_ticks" 2 903 ""
V L "stream" 2 903 "int8" `844 
V L "value" 2 903 "int8" `845 
F B "set_ticks" 2 903 "void(int8 stream,int8 value)" `843 
F N "set_ticks" 2 904 ""
V L "stream" 2 904 "int8" `847 
V L "value" 2 904 "int16" `848 
F B "set_ticks" 2 904 "void(int8 stream,int16 value)" `846 
F N "set_ticks" 2 905 ""
V L "stream" 2 905 "int8" `850 
V L "value" 2 905 "int32" `851 
F B "set_ticks" 2 905 "void(int8 stream,int32 value)" `849 
F N "set_ticks" 2 906 ""
V L "stream" 2 906 "int8" `853 
V L "value" 2 906 "?" `854 
F B "set_ticks" 2 906 "void(int8 stream,? value)" `852  "#use pwm() Prototypes:"
F N "pwm_on" 2 909 ""
F B "pwm_on" 2 909 "void()" `855 
F N "pwm_on" 2 910 ""
V L "stream" 2 910 "int8" `857 
F B "pwm_on" 2 910 "void(int8 stream)" `856 
F N "pwm_off" 2 911 ""
F B "pwm_off" 2 911 "void()" `858 
F N "pwm_off" 2 912 ""
V L "stream" 2 912 "int8" `860 
F B "pwm_off" 2 912 "void(int8 stream)" `859 
F N "pwm_set_duty" 2 913 ""
V L "duty" 2 913 "int16" `862 
F B "pwm_set_duty" 2 913 "void(int16 duty)" `861 
F N "pwm_set_duty" 2 914 ""
V L "stream" 2 914 "int8" `864 
V L "duty" 2 914 "int16" `865 
F B "pwm_set_duty" 2 914 "void(int8 stream,int16 duty)" `863 
F N "pwm_set_duty_percent" 2 915 ""
V L "percent" 2 915 "int16" `867 
F B "pwm_set_duty_percent" 2 915 "void(int16 percent)" `866 
F N "pwm_set_duty_percent" 2 916 ""
V L "stream" 2 916 "int8" `869 
V L "percent" 2 916 "int16" `870 
F B "pwm_set_duty_percent" 2 916 "void(int8 stream,int16 percent)" `868 
F N "pwm_set_frequency" 2 917 ""
V L "frequency" 2 917 "int32" `872 
F B "pwm_set_frequency" 2 917 "void(int32 frequency)" `871 
F N "pwm_set_frequency" 2 918 ""
V L "stream" 2 918 "int8" `874 
V L "frequency" 2 918 "int32" `875 
F B "pwm_set_frequency" 2 918 "void(int8 stream,int32 frequency)" `873 
F N "pwm_get_duty_period" 2 919 ""
F B "pwm_get_duty_period" 2 919 "int16()" `876 
F N "pwm_get_duty_period" 2 920 ""
V L "stream" 2 920 "int8" `878 
F B "pwm_get_duty_period" 2 920 "int16(int8 stream)" `877  "#use capture() Prototypes:"
F N "get_capture_time" 2 923 ""
F B "get_capture_time" 2 923 "int16()" `879 
F N "get_capture_time" 2 924 ""
V L "stream" 2 924 "int8" `881 
F B "get_capture_time" 2 924 "int16(int8 stream)" `880 
F N "get_capture_event" 2 925 ""
F B "get_capture_event" 2 925 "int8()" `882 
F N "get_capture_event" 2 926 ""
V L "stream" 2 926 "int8" `884 
F B "get_capture_event" 2 926 "int8(int8 stream)" `883  "Environment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
F N "goto_address" 2 935 ""
V L "address" 2 935 "int32" `886 
F B "goto_address" 2 935 "void(int32 address)" `885 
F N "label_address" 2 936 ""
V L "label" 2 936 "int32" `888 
F B "label_address" 2 936 "int32(int32 label)" `887  "Program Memory Prototypes:"
F N "read_program_memory" 2 939 ""
V L "address" 2 939 "int32" `890 
V L "DataPtr" 2 939 "*int8" `891 
V L "count" 2 939 "int16" `892 
F B "read_program_memory" 2 939 "void(int32 address,*int8 DataPtr,int16 count)" `889 
F N "erase_program_memory" 2 940 ""
V L "address" 2 940 "int32" `894 
F B "erase_program_memory" 2 940 "void(int32 address)" `893 
F N "write_program_memory" 2 941 ""
V L "address" 2 941 "int32" `896 
V L "DataPtr" 2 941 "*int8" `897 
V L "count" 2 941 "int16" `898 
F B "write_program_memory" 2 941 "void(int32 address,*int8 DataPtr,int16 count)" `895 
F N "read_configuration_memory" 2 942 ""
V L "DataPtr" 2 942 "*int8" `900 
V L "count" 2 942 "int8" `901 
F B "read_configuration_memory" 2 942 "void(*int8 DataPtr,int8 count)" `899 
F N "write_configuration_memory" 2 943 ""
V L "DataPtr" 2 943 "*int8" `903 
V L "count" 2 943 "int8" `904 
F B "write_configuration_memory" 2 943 "void(*int8 DataPtr,int8 count)" `902  "INT"
c L "write_configuration_memory" 2 3 4 "FUNCTION"
F N "enable_interrupts" 2 950 ""
V L "interrupt" 2 950 "int16" `906 
F B "enable_interrupts" 2 950 "void(int16 interrupt)" `905 
F N "disable_interrupts" 2 951 ""
V L "interrupt" 2 951 "int16" `908 
F B "disable_interrupts" 2 951 "void(int16 interrupt)" `907 
F N "clear_interrupt" 2 952 ""
V L "interrupt" 2 952 "int16" `910 
F B "clear_interrupt" 2 952 "void(int16 interrupt)" `909 
F N "interrupt_active" 2 953 ""
V L "interrupt" 2 953 "int16" `912 
F B "interrupt_active" 2 953 "int8(int16 interrupt)" `911 
F N "interrupt_enabled" 2 954 ""
V L "interrupt" 2 954 "int16" `914 
F B "interrupt_enabled" 2 954 "int8(int16 interrupt)" `913 
F N "ext_int_edge" 2 955 ""
V L "source" 2 955 "int8" `916 
V L "edge" 2 955 "int8" `917 
F B "ext_int_edge" 2 955 "void(int8 source,int8 edge)" `915 
F N "jump_to_isr" 2 956 ""
V L "address" 2 956 "int16" `919 
F B "jump_to_isr" 2 956 "void(int16 address)" `918  "Constants used in EXT_INT_EDGE() are:"
D G "L_TO_H" 2 958 "0x40"
D G "H_TO_L" 2 959 "0"
D G "INTR_GLOBAL" 2 963 "0x0800"
D G "GLOBAL" 2 964 "0x0800" "For compatibility with PIC16/18"
D G "INTR_NORMAL" 2 965 "0x1000"
D G "INTR_ALTERNATE" 2 966 "0x2000"
D G "INTR_LEVEL0" 2 967 "0x3000"
D G "INTR_LEVEL1" 2 968 "0x3001"
D G "INTR_LEVEL2" 2 969 "0x3002"
D G "INTR_LEVEL3" 2 970 "0x3003"
D G "INTR_LEVEL4" 2 971 "0x3004"
D G "INTR_LEVEL5" 2 972 "0x3005"
D G "INTR_LEVEL6" 2 973 "0x3006"
D G "INTR_LEVEL7" 2 974 "0x3007"
D G "INTR_CN_PIN" 2 990 "0x8000" "or in a PIN_xx constant (enable/disable only)"
D G "INT_OSCFAIL" 2 992 "1"
D G "INT_ADDRERR" 2 993 "2"
D G "INT_STACKERR" 2 994 "3"
D G "INT_MATHERR" 2 995 "4"
D G "INT_EXT0" 2 996 "6"
D G "INT_IC1" 2 997 "7"
D G "INT_OC1" 2 998 "8"
D G "INT_TIMER1" 2 999 "9"
D G "INT_IC2" 2 1000 "70"
D G "INT_OC2" 2 1001 "71"
D G "INT_TIMER2" 2 1002 "72"
D G "INT_TIMER3" 2 1003 "73"
D G "INT_SPI1E" 2 1004 "74"
D G "INT_SPI1" 2 1005 "75"
D G "INT_RDA" 2 1006 "76"
D G "INT_TBE" 2 1007 "77"
D G "INT_ADC1" 2 1008 "78"
D G "INT_SI2C" 2 1009 "81"
D G "INT_MI2C" 2 1010 "82"
D G "INT_CNI" 2 1011 "84"
D G "INT_EXT1" 2 1012 "85"
D G "INT_OC3" 2 1013 "90"
D G "INT_OC4" 2 1014 "91"
D G "INT_TIMER4" 2 1015 "92"
D G "INT_TIMER5" 2 1016 "93"
D G "INT_EXT2" 2 1017 "94"
D G "INT_RDA2" 2 1018 "95"
D G "INT_TBE2" 2 1019 "96"
D G "INT_SPI2E" 2 1020 "97"
D G "INT_SPI2" 2 1021 "98"
D G "INT_IC3" 2 1022 "102"
D G "INT_IC4" 2 1023 "103"
D G "INT_IC5" 2 1024 "104"
D G "INT_OC5" 2 1025 "106"
D G "INT_SI2C2" 2 1026 "114"
D G "INT_MI2C2" 2 1027 "115"
D G "INT_EXT3" 2 1028 "118"
D G "INT_EXT4" 2 1029 "119"
D G "INT_UART1E" 2 1030 "130"
D G "INT_UART2E" 2 1031 "131"
D G "INT_COMP" 2 1032 "152"
D G "INT_PMP" 2 1033 "164"
D G "INT_RTC" 2 1034 "173"
D G "INT_CRC" 2 1035 "174"
F N "main" 0 5 ""
F G "main" 0 6 "void()" `928 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "bit_first" 2 0
F B "bit_last" 1 2
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "real_address" 1 0
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "profileout" 1 2
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_memory" 1 0
F B "write_program_memory" 3 4
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "output_f" 1 0
F B "output_g" 1 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "input_f" 0 0
F B "input_g" 0 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "set_tris_f" 1 0
F B "set_tris_g" 1 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "get_tris_f" 0 0
F B "get_tris_g" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "input_change_f" 0 0
F B "input_change_g" 0 0
F B "set_open_drain_b" 1 0
F B "set_open_drain_c" 1 0
F B "set_open_drain_d" 1 0
F B "set_open_drain_e" 1 0
F B "set_open_drain_f" 1 0
F B "set_open_drain_g" 1 0
F B "set_pullup" 1 2
F B "setup_wdt" 1 0
F B "restart_cause" 0 1
F B "restart_wdt" 0 0
F B "setup_oscillator" 1 3
F B "pll_locked" 0 0
F B "setup_comparator" 1 2
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "set_analog_pins" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 2
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer1" 1 2
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer2" 1 2
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer3" 1 2
F B "get_timer3" 0 0
F B "set_timer3" 1 0
F B "get_timer23" 0 0
F B "set_timer23" 1 0
F B "setup_timer4" 1 2
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer5" 1 2
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "get_timer45" 0 0
F B "set_timer45" 1 0
F B "setup_capture" 2 0
F B "get_capture" 1 2
F B "setup_compare" 2 0
F B "set_compare_time" 2 3
F B "set_pwm_duty" 2 0
F B "setup_vref" 1 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "spi_read_16" 0 1
F B "spi_write_16" 1 2
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "spi_read2_16" 0 1
F B "spi_write2_16" 1 2
F B "setup_spi3" 1 0
F B "spi_read3" 0 1
F B "spi_write3" 1 2
F B "spi_data_is_in3" 0 0
F B "spi_read3_16" 0 1
F B "spi_write3_16" 1 2
F B "setup_spi4" 1 0
F B "setup_spi4" 1 0
F B "spi_read4" 0 1
F B "spi_write4" 1 2
F B "spi_data_is_in4" 0 0
F B "spi_read4_16" 0 1
F B "spi_write4_16" 1 2
F B "setup_crc" F B "crc_init" 0 1
F B "crc_calc16" 1 3
F B "crc_calc8" 1 3
F B "crc_calc" 1 3
F B "setup_pmp" 2 0
F B "setup_psp" 2 0
F B "pmp_address" 1 0
F B "pmp_read" 0 0
F B "pmp_write" 1 0
F B "psp_read" 0 1
F B "psp_write" 1 2
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "pmp_output_full" 0 0
F B "pmp_input_full" 0 0
F B "pmp_overflow" 0 0
F B "setup_rtc" 1 2
F B "setup_rtc_alarm" 1 3
F B "rtc_read" 1 0
F B "rtc_write" 1 0
F B "rtc_alarm_read" 1 0
F B "rtc_alarm_write" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
