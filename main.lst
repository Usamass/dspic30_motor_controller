CCS PCD C Compiler, Version 5.112, 5967               30-Apr-24 17:31

               Filename:   C:\Users\eelab\Documents\dspic30f4011\main.lst

               ROM used:   4974 bytes (15%)
                           Largest free fragment is 27794
               RAM used:   1492 (73%) at main() level
                           1699 (83%) worst case
               Stack used: 96 locations (46 in main + 50 for interrupts)
               Stack size: 128

*
0000:  GOTO    10EA
*
001A:  DATA    B4,01,00
*
0062:  DATA    28,01,00
.................... #include <30F4011.h>
.................... //////////// Standard Header file for the DSPIC30F4011 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device DSPIC30F4011
*
0100:  CLR     32
0102:  MOV     #10C,W3
0104:  ADD     W3,W0,W0
0106:  TBLRDL.B[W0],W0L
0108:  CLR.B   1
010A:  RETURN  
010C:  DATA    0A,4D,00
010E:  DATA    6F,74,00
0110:  DATA    6F,72,00
0112:  DATA    20,43,00
0114:  DATA    6F,6E,00
0116:  DATA    74,72,00
0118:  DATA    6F,6C,00
011A:  DATA    20,55,00
011C:  DATA    6E,69,00
011E:  DATA    74,20,00
0120:  DATA    76,30,00
0122:  DATA    2E,31,00
0124:  DATA    0D,0A,00
0126:  DATA    00,00,00
*
0172:  MOV     W5,[W15++]
0174:  MOV     #C,W5
0176:  REPEAT  #3
0178:  MOV     [W5++],[W15++]
017A:  MUL.UU  W0,W2,W4
017C:  BTSS    W3.F
017E:  BRA     184
0180:  MUL.SS  W0,W3,W6
0182:  BRA     186
0184:  MUL.UU  W0,W3,W6
0186:  BCLR.B  42.0
0188:  ADD     W6,W5,W5
018A:  ADDC    W7,#0,W8
018C:  BTSS    W1.F
018E:  BRA     194
0190:  MUL.SS  W1,W2,W6
0192:  BRA     196
0194:  MUL.UU  W1,W2,W6
0196:  ADDC    W6,W5,W5
0198:  ADDC    W7,W8,W8
019A:  ADDC    #0,W9
019C:  MUL.SS  W1,W3,W6
019E:  ADDC    W6,W8,W8
01A0:  ADDC    W9,W7,W7
01A2:  MOV     W7,W3
01A4:  MOV     W8,W2
01A6:  MOV     W5,W1
01A8:  MOV     W4,W0
01AA:  MOV     #12,W5
01AC:  REPEAT  #3
01AE:  MOV     [--W15],[W5--]
01B0:  MOV     [--W15],W5
01B2:  RETURN  
*
03CC:  MOV     W1,[W15++]
03CE:  MOV     D52,W1
03D0:  MOV.B   W0L,[W1++]
03D2:  CLR.B   [W1]
03D4:  MOV     [--W15],W1
03D6:  INC     0D52
03D8:  RETURN  
*
0432:  MOV     W5,[W15++]
0434:  MOV     #C,W5
0436:  REPEAT  #3
0438:  MOV     [W5++],[W15++]
043A:  MOV     W0,W4
043C:  MOV     W1,W5
043E:  MOV     W2,W6
0440:  MOV     W3,W7
0442:  CLR     W0
0444:  CLR     W1
0446:  CLR     W2
0448:  CLR     W3
044A:  BCLR    W8.0
044C:  BTSS    W7.F
044E:  BRA     460
0450:  BSET    W8.0
0452:  COM     W7,W7
0454:  COM     W6,W6
0456:  COM     W5,W5
0458:  NEG     W4,W4
045A:  ADDC    W5,#0,W5
045C:  ADDC    W6,#0,W6
045E:  ADDC    W7,#0,W7
0460:  IOR      W4,  W5,W9
0462:  BRA     NZ,468
0464:  IOR      W6,  W7,W9
0466:  BRA     Z,492
0468:  MOV     #473,W9
046A:  BTSC    W3.4
046C:  BRA     484
046E:  BCLR.B  42.0
0470:  RLC     W4,W4
0472:  RLC     W5,W5
0474:  RLC     W6,W6
0476:  RLC     W7,W7
0478:  RLC     W0,W0
047A:  RLC     W1,W1
047C:  RLC     W2,W2
047E:  RLC     W3,W3
0480:  DEC     W9,W9
0482:  BRA     NZ,46A
0484:  SL      W9,#4,W9
0486:  BCLR.B  42.0
0488:  BCLR    W9.F
048A:  BCLR    W3.4
048C:  XOR     W9,W3,W3
048E:  BTSC    W8.0
0490:  BSET    W3.F
0492:  MOV     #12,W5
0494:  REPEAT  #3
0496:  MOV     [--W15],[W5--]
0498:  MOV     [--W15],W5
049A:  RETURN  
049C:  MOV     W8,[W15++]
049E:  MOV     #12,W8
04A0:  REPEAT  #4
04A2:  MOV     [W8++],[W15++]
04A4:  CLR     W11
04A6:  MUL.UU  W12,#0,W12
04A8:  MOV     W3,W8
04AA:  MOV     W7,W9
04AC:  MOV     #7FF,W10
04AE:  BCLR.B  42.0
04B0:  BCLR.B  42.1
04B2:  ASR     W8,#4,W8
04B4:  AND     W10,W8,W8
04B6:  CP0     W8
04B8:  BRA     Z,59C
04BA:  BCLR.B  42.0
04BC:  BCLR.B  42.1
04BE:  ASR     W9,#4,W9
04C0:  AND     W10,W9,W9
04C2:  CP0     W9
04C4:  BRA     Z,59C
04C6:  ADD     W9,W8,W8
04C8:  BTSC    W9.B
04CA:  BRA     4D4
04CC:  SUB     #3FF,W8
04CE:  BRA     Z,59C
04D0:  BRA     NC,59C
04D2:  BRA     4DA
04D4:  MOV     #401,W10
04D6:  ADD.B   W10L,W5L,W5L
04D8:  BRA     C,59C
04DA:  XOR     W3,W7,W13
04DC:  BCLR.B  42.0
04DE:  BCLR.B  42.1
04E0:  AND     #F,W3
04E2:  BSET    W3.4
04E4:  AND     #F,W7
04E6:  BSET    W7.4
04E8:  MOV     W8,[W15++]
04EA:  MUL.UU  W4,W1,W8
04EC:  MUL.UU  W5,W0,W10
04EE:  ADD     W8,W10,W10
04F0:  ADDC    W9,W11,W11
04F2:  ADDC    #0,W12
04F4:  MUL.UU  W4,W2,W8
04F6:  ADD     W8,W11,W11
04F8:  ADDC    W9,W12,W12
04FA:  MUL.UU  W5,W1,W8
04FC:  CLR     W10
04FE:  ADD     W8,W11,W11
0500:  ADDC    W9,W12,W12
0502:  ADDC    #0,W10
0504:  MUL.UU  W6,W0,W8
0506:  ADD     W8,W11,W11
0508:  ADDC    W9,W12,W12
050A:  ADDC    #0,W10
050C:  CLR     W11
050E:  MUL.UU  W4,W3,W8
0510:  ADD     W8,W12,W12
0512:  ADDC    W9,W10,W10
0514:  ADDC    #0,W11
0516:  MUL.UU  W5,W2,W8
0518:  ADD     W8,W12,W12
051A:  ADDC    W9,W10,W10
051C:  ADDC    #0,W11
051E:  MUL.UU  W6,W1,W8
0520:  ADD     W8,W12,W12
0522:  ADDC    W9,W10,W10
0524:  ADDC    #0,W11
0526:  MUL.UU  W7,W0,W8
0528:  ADD     W8,W12,W12
052A:  ADDC    W9,W10,W10
052C:  ADDC    #0,W11
052E:  MOV     W12,W0
0530:  CLR     W12
0532:  MUL.UU  W5,W3,W8
0534:  ADD     W8,W10,W10
0536:  ADDC    W9,W11,W11
0538:  ADDC    #0,W12
053A:  MUL.UU  W6,W2,W8
053C:  ADD     W8,W10,W10
053E:  ADDC    W9,W11,W11
0540:  ADDC    #0,W12
0542:  MUL.UU  W6,W3,W8
0544:  ADD     W8,W11,W11
0546:  ADDC    W9,W12,W12
0548:  MUL.UU  W7,W1,W8
054A:  ADD     W8,W10,W10
054C:  ADDC    W9,W11,W11
054E:  ADDC    #0,W12
0550:  MUL.UU  W7,W2,W8
0552:  ADD     W8,W11,W11
0554:  ADDC    W9,W12,W12
0556:  MUL.UU  W7,W3,W8
0558:  ADD     W8,W12,W12
055A:  MOV     W10,W1
055C:  MOV     W11,W2
055E:  MOV     W12,W3
0560:  MOV     #5,W4
0562:  BCLR.B  42.0
0564:  RRC     W3,W3
0566:  RRC     W2,W2
0568:  RRC     W1,W1
056A:  RRC     W0,W0
056C:  DEC     W4,W4
056E:  BRA     NZ,562
0570:  MOV     [--W15],W8
0572:  INC     W8,W8
0574:  IOR      W0,  W1,W6
0576:  BRA     Z,57A
0578:  BRA     57E
057A:  IOR      W2,  W3,W6
057C:  BRA     Z,58E
057E:  BTSC    W3.4
0580:  BRA     58E
0582:  BCLR.B  42.0
0584:  RLC     W0,W0
0586:  RLC     W1,W1
0588:  RLC     W2,W2
058A:  RLC     W3,W3
058C:  DEC     W8,W8
058E:  SL      W8,#4,W8
0590:  BCLR    W3.F
0592:  BTSC    W13.F
0594:  BSET    W3.F
0596:  BCLR    W3.4
0598:  XOR     W8,W3,W3
059A:  BRA     5A2
059C:  MUL.UU  W0,#0,W0
059E:  MUL.UU  W0,#0,W2
05A0:  BRA     5A2
05A2:  MOV     #1A,W8
05A4:  REPEAT  #4
05A6:  MOV     [--W15],[W8--]
05A8:  MOV     [--W15],W8
05AA:  RETURN  
05AC:  MOV     W8,[W15++]
05AE:  MOV     #12,W8
05B0:  REPEAT  #4
05B2:  MOV     [W8++],[W15++]
05B4:  XOR     W3,W7,W13
05B6:  MOV     W3,W8
05B8:  MOV     W7,W9
05BA:  MOV     #7FF,W10
05BC:  BCLR.B  42.0
05BE:  BCLR.B  42.1
05C0:  ASR     W8,#4,W8
05C2:  AND     W10,W8,W8
05C4:  CP0     W8
05C6:  BRA     Z,6A0
05C8:  BCLR.B  42.0
05CA:  BCLR.B  42.1
05CC:  ASR     W9,#4,W9
05CE:  AND     W10,W9,W9
05D0:  CP0     W9
05D2:  BRA     Z,6A0
05D4:  CLR     W10
05D6:  SUB     W8,W9,W12
05D8:  BRA     NC,5E0
05DA:  ADD     #3FF,W12
05DC:  BRA     C,6A0
05DE:  BRA     5E8
05E0:  MOV     #401,W11
05E2:  SUB     W12,W11,W12
05E4:  BRA     NC,6A0
05E6:  BRA     Z,6A0
05E8:  CLR     W8
05EA:  CLR     W9
05EC:  CLR     W10
05EE:  CLR     W11
05F0:  AND     #1F,W3
05F2:  BSET    W3.4
05F4:  AND     #1F,W7
05F6:  BSET    W7.4
05F8:  MOV     W12,[W15++]
05FA:  MOV     #36,W12
05FC:  SUB     W0,W4,W0
05FE:  SUBB    W1,W5,W1
0600:  SUBB    W2,W6,W2
0602:  SUBB    W3,W7,W3
0604:  BRA     N,60A
0606:  BRA     C,614
0608:  BRA     NZ,616
060A:  ADD     W0,W4,W0
060C:  ADDC    W1,W5,W1
060E:  ADDC    W2,W6,W2
0610:  ADDC    W3,W7,W3
0612:  BRA     616
0614:  BSET    W8.0
0616:  DEC     W12,W12
0618:  BRA     Z,630
061A:  BCLR.B  42.0
061C:  RLC     W0,W0
061E:  RLC     W1,W1
0620:  RLC     W2,W2
0622:  RLC     W3,W3
0624:  BCLR.B  42.0
0626:  RLC     W8,W8
0628:  RLC     W9,W9
062A:  RLC     W10,W10
062C:  RLC     W11,W11
062E:  BRA     5FC
0630:  MOV     [--W15],W12
0632:  BTSC    W11.5
0634:  BRA     638
0636:  BRA     644
0638:  BCLR.B  42.0
063A:  RRC     W11,W11
063C:  RRC     W10,W10
063E:  RRC     W9,W9
0640:  RRC     W8,W8
0642:  BRA     64A
0644:  DEC     W12,W12
0646:  BCLR.B  42.0
0648:  BRA     Z,6A0
064A:  BTSC.B  42.0
064C:  BRA     660
064E:  RLC     W0,W0
0650:  RLC     W1,W1
0652:  RLC     W2,W2
0654:  RLC     W3,W3
0656:  SUB     W0,W4,W4
0658:  SUBB    W1,W5,W5
065A:  SUBB    W2,W6,W6
065C:  SUBB    W3,W7,W7
065E:  BRA     NC,68A
0660:  INC     W8,W8
0662:  BRA     NZ,68A
0664:  INC     W9,W9
0666:  BRA     NZ,68A
0668:  INC     W10,W10
066A:  BRA     NZ,68A
066C:  INC     W11,W11
066E:  BRA     NZ,68A
0670:  INC     W12,W12
0672:  BRA     Z,6A0
0674:  BRA     68A
0676:  DEC     W12,W12
0678:  BRA     Z,6A0
067A:  BTSC    W11.4
067C:  BRA     68A
067E:  BCLR.B  42.0
0680:  RLC     W8,W8
0682:  RLC     W9,W9
0684:  RLC     W10,W10
0686:  RLC     W11,W11
0688:  BRA     67A
068A:  SL      W12,#4,W12
068C:  BCLR.B  42.0
068E:  BCLR    W12.F
0690:  BTSC    W13.F
0692:  BSET    W12.F
0694:  BCLR    W11.4
0696:  XOR     W12,W11,W3
0698:  MOV     W10,W2
069A:  MOV     W9,W1
069C:  MOV     W8,W0
069E:  BRA     6AA
06A0:  MOV     #0,W0
06A2:  MOV     #0,W1
06A4:  MOV     #0,W2
06A6:  MOV     #0,W3
06A8:  BRA     6AA
06AA:  MOV     #1A,W8
06AC:  REPEAT  #4
06AE:  MOV     [--W15],[W8--]
06B0:  MOV     [--W15],W8
06B2:  RETURN  
06B4:  MOV     W8,[W15++]
06B6:  MOV     #12,W8
06B8:  REPEAT  #4
06BA:  MOV     [W8++],[W15++]
06BC:  MOV     #8000,W8
06BE:  BTSC.B  43.0
06C0:  XOR     W8,W7,W7
06C2:  CP0     W0
06C4:  BRA     NZ,6D4
06C6:  CP0     W1
06C8:  BRA     NZ,6D4
06CA:  CP0     W2
06CC:  BRA     NZ,6D4
06CE:  MOV     #7FFF,W10
06D0:  AND     W3,W10,W10
06D2:  BTSS.B  42.1
06D4:  MOV     W3,W10
06D6:  XOR     W7,W10,W11
06D8:  MOV     W3,W8
06DA:  MOV     W7,W9
06DC:  MOV     W7,W12
06DE:  MOV     #7FF,W13
06E0:  BCLR.B  42.1
06E2:  BCLR.B  42.0
06E4:  ASR     W8,#4,W8
06E6:  AND     W13,W8,W8
06E8:  CP0     W8
06EA:  BRA     Z,864
06EC:  BCLR.B  42.1
06EE:  BCLR.B  42.0
06F0:  ASR     W9,#4,W9
06F2:  AND     W13,W9,W9
06F4:  CP0     W9
06F6:  BRA     Z,874
06F8:  CLR     W13
06FA:  BCLR.B  42.1
06FC:  BCLR.B  42.0
06FE:  CP      W9,W8
0700:  BRA     Z,876
0702:  BRA     N,886
0704:  BCLR    W13.0
0706:  BSET    W13.1
0708:  SUB     W9,W8,W8
070A:  AND     #F,W3
070C:  BSET    W3.4
070E:  AND     #F,W7
0710:  BSET    W7.4
0712:  SUB     #34,W8
0714:  BRA     NN,742
0716:  ADD     #34,W8
0718:  BCLR.B  42.1
071A:  BCLR.B  42.0
071C:  RRC     W3,W3
071E:  RRC     W2,W2
0720:  RRC     W1,W1
0722:  RRC     W0,W0
0724:  DEC     W8,W8
0726:  BRA     NZ,718
0728:  BRA     752
072A:  SUB     #34,W8
072C:  BRA     NN,74C
072E:  ADD     #34,W8
0730:  BCLR.B  42.1
0732:  BCLR.B  42.0
0734:  RRC     W7,W7
0736:  RRC     W6,W6
0738:  RRC     W5,W5
073A:  RRC     W4,W4
073C:  DEC     W8,W8
073E:  BRA     NZ,730
0740:  BRA     778
0742:  MOV     W4,W0
0744:  MOV     W5,W1
0746:  MOV     W6,W2
0748:  MOV     W7,W3
074A:  XOR     W11,W12,W12
074C:  BTSC    W12.F
074E:  BTG     W11.F
0750:  BRA     844
0752:  BTSS    W11.F
0754:  BRA     794
0756:  BTSC    W13.4
0758:  MOV     W12,W11
075A:  COM     W0,W0
075C:  COM     W1,W1
075E:  COM     W2,W2
0760:  COM.B   W3L,W3L
0762:  AND.B   #1F,W3L
0764:  INC     W0,W0
0766:  BRA     NZ,772
0768:  INC     W1,W1
076A:  BRA     NZ,772
076C:  INC     W2,W2
076E:  BRA     NZ,772
0770:  INC.B   W3L,W3L
0772:  BTSC    W13.4
0774:  BRA     7DA
0776:  BRA     794
0778:  BTSS    W11.F
077A:  BRA     794
077C:  COM     W4,W4
077E:  COM     W5,W5
0780:  COM     W6,W6
0782:  COM.B   W7L,W7L
0784:  AND.B   #1F,W7L
0786:  INC     W4,W4
0788:  BRA     NZ,794
078A:  INC     W5,W5
078C:  BRA     NZ,794
078E:  INC     W6,W6
0790:  BRA     NZ,794
0792:  INC.B   W7L,W7L
0794:  BCLR.B  42.1
0796:  BCLR.B  42.0
0798:  ADD     W0,W4,W0
079A:  ADDC    W1,W5,W1
079C:  ADDC    W2,W6,W2
079E:  ADDC.B  W3L,W7L,W3L
07A0:  BTSC    W3.5
07A2:  BSET    W13.3
07A4:  BTSC    W13.0
07A6:  BRA     7BA
07A8:  BTSC    W13.1
07AA:  BRA     7AE
07AC:  BRA     7C4
07AE:  BTSC    W11.F
07B0:  BRA     7DA
07B2:  BTSC    W13.3
07B4:  BRA     808
07B6:  BSET    W13.6
07B8:  BRA     7FC
07BA:  BTSC    W11.F
07BC:  BRA     7DA
07BE:  BTSC    W13.3
07C0:  BRA     808
07C2:  BRA     7FC
07C4:  BTSC    W11.F
07C6:  BRA     7D0
07C8:  MOV     W10,W11
07CA:  BTSC    W13.3
07CC:  BRA     808
07CE:  BRA     844
07D0:  BSET    W13.4
07D2:  XOR.B   #10,W3L
07D4:  BTSC    W3.4
07D6:  BRA     756
07D8:  MOV     W10,W11
07DA:  AND     #1F,W3
07DC:  IOR      W3,  W2,W8
07DE:  BRA     NZ,7E4
07E0:  IOR      W1,  W0,W8
07E2:  BRA     Z,7FC
07E4:  BTSC    W3.4
07E6:  BRA     7FC
07E8:  BCLR.B  42.1
07EA:  BCLR.B  42.0
07EC:  RLC     W0,W0
07EE:  RLC     W1,W1
07F0:  RLC     W2,W2
07F2:  RLC     W3,W3
07F4:  DEC     W9,W9
07F6:  BTSC.B  42.1
07F8:  BRA     85E
07FA:  BRA     7E4
07FC:  BTSC    W13.0
07FE:  MOV     W10,W11
0800:  BTSC    W13.1
0802:  MOV     W12,W11
0804:  BTSS    W13.5
0806:  BRA     844
0808:  BCLR.B  42.0
080A:  RRC.B   W3L,W3L
080C:  RRC     W2,W2
080E:  RRC     W1,W1
0810:  RRC     W0,W0
0812:  BTSC.B  42.0
0814:  BSET    W13.5
0816:  INC     W9,W9
0818:  BTSC.B  42.1
081A:  BRA     85E
081C:  BTSS    W13.5
081E:  BRA     83C
0820:  INC     W0,W0
0822:  BRA     NZ,83C
0824:  INC     W1,W1
0826:  BRA     NZ,83C
0828:  INC     W2,W2
082A:  BRA     NZ,83C
082C:  INC     W3,W3
082E:  BRA     NZ,83C
0830:  RRC.B   W3L,W3L
0832:  RRC     W2,W2
0834:  RRC     W1,W1
0836:  RRC     W0,W0
0838:  INC     W9,W9
083A:  BRA     Z,85E
083C:  BTSC    W13.0
083E:  MOV     W10,W11
0840:  BTSC    W13.1
0842:  MOV     W12,W11
0844:  IOR      W0,  W1,W4
0846:  BRA     NZ,84C
0848:  IOR      W2,  W3,W4
084A:  BRA     Z,898
084C:  BCLR    W3.4
084E:  BCLR.B  42.1
0850:  BCLR.B  42.0
0852:  SL      W9,#4,W9
0854:  XOR     W9,W3,W3
0856:  BSET    W3.F
0858:  BTSS    W11.F
085A:  BCLR    W3.F
085C:  BRA     898
085E:  MUL.UU  W0,#0,W0
0860:  MUL.UU  W2,#0,W2
0862:  BRA     898
0864:  MOV     #8000,W8
0866:  BTSC    W10.F
0868:  XOR     W8,W7,W7
086A:  MOV     W5,W1
086C:  MOV     W4,W0
086E:  MOV     W6,W2
0870:  MOV     W7,W3
0872:  BRA     898
0874:  BRA     898
0876:  AND     #F,W7
0878:  BSET    W7.4
087A:  AND     #F,W3
087C:  BSET    W3.4
087E:  BTSC    W11.F
0880:  BCLR    W7.4
0882:  BSET    W13.2
0884:  BRA     778
0886:  AND     #F,W3
0888:  BSET    W3.4
088A:  AND     #F,W7
088C:  BSET    W7.4
088E:  SUB     W8,W9,W8
0890:  ADD     W8,W9,W9
0892:  BCLR    W13.1
0894:  BSET    W13.0
0896:  BRA     72A
0898:  MOV     #1A,W8
089A:  REPEAT  #4
089C:  MOV     [--W15],[W8--]
089E:  MOV     [--W15],W8
08A0:  RETURN  
08A2:  MOV     W8,[W15++]
08A4:  MOV     W9,[W15++]
08A6:  MOV     W10,[W15++]
08A8:  XOR     W3,W7,W9
08AA:  BTSS    W9.F
08AC:  BRA     8BA
08AE:  BCLR.B  42.0
08B0:  BCLR.B  42.1
08B2:  BTSS    W3.F
08B4:  BRA     91E
08B6:  BSET.B  42.0
08B8:  BRA     91E
08BA:  MOV     #7FF,W10
08BC:  MOV     W3,W8
08BE:  MOV     W7,W9
08C0:  ASR     W8,#4,W8
08C2:  AND     W10,W8,W8
08C4:  ASR     W9,#4,W9
08C6:  AND     W10,W9,W9
08C8:  SUB     W9,W8,W10
08CA:  BRA     Z,8D6
08CC:  BTSS    W3.F
08CE:  BRA     91E
08D0:  MOV     #1,W0
08D2:  XOR.B   42
08D4:  BRA     91E
08D6:  MOV     W3,W8
08D8:  MOV     W7,W9
08DA:  AND     #1F,W3
08DC:  AND     #1F,W7
08DE:  BCLR    W3.4
08E0:  BCLR    W7.4
08E2:  SUB.B   W7L,W3L,W10L
08E4:  BRA     Z,8F0
08E6:  BTSS    W8.F
08E8:  BRA     91E
08EA:  MOV     #1,W0
08EC:  XOR.B   42
08EE:  BRA     91E
08F0:  SUB     W6,W2,W10
08F2:  BRA     Z,8FE
08F4:  BTSS    W8.F
08F6:  BRA     91E
08F8:  MOV     #1,W0
08FA:  XOR.B   42
08FC:  BRA     91E
08FE:  SUB     W5,W1,W10
0900:  BRA     Z,90C
0902:  BTSS    W8.F
0904:  BRA     91E
0906:  MOV     #1,W0
0908:  XOR.B   42
090A:  BRA     91E
090C:  SUB     W4,W0,W10
090E:  BRA     Z,91A
0910:  BTSS    W8.F
0912:  BRA     91E
0914:  MOV     #1,W0
0916:  XOR.B   42
0918:  BRA     91E
091A:  BCLR.B  42.0
091C:  BRA     91E
091E:  MOV     [--W15],W10
0920:  MOV     [--W15],W9
0922:  MOV     [--W15],W8
0924:  RETURN  
0926:  MOV     W5,[W15++]
0928:  MOV     #C,W5
092A:  REPEAT  #5
092C:  MOV     [W5++],[W15++]
092E:  MOV     W3,W8
0930:  MOV     W2,W7
0932:  MOV     W1,W6
0934:  MOV     W0,W5
0936:  MOV     W3,W9
0938:  MOV     #473,W11
093A:  ASR     W3,#4,W3
093C:  MOV     #7FF,W10
093E:  AND     W10,W3,W3
0940:  SUB     W11,W3,W11
0942:  AND     #1F,W8
0944:  BSET    W8.4
0946:  CLR     W0
0948:  CLR     W1
094A:  CLR     W2
094C:  CLR     W3
094E:  BCLR.B  42.0
0950:  RRC     W8,W8
0952:  RRC     W7,W7
0954:  RRC     W6,W6
0956:  RRC     W5,W5
0958:  RRC     W3,W3
095A:  RRC     W2,W2
095C:  RRC     W1,W1
095E:  RRC     W0,W0
0960:  DEC     W11,W11
0962:  BRA     NZ,94E
0964:  BTSS    W9.F
0966:  BRA     97A
0968:  COM     W0,W0
096A:  COM     W1,W1
096C:  COM     W2,W2
096E:  COM     W3,W3
0970:  INC     W0,W0
0972:  ADDC    #0,W1
0974:  ADDC    #0,W2
0976:  ADDC    #0,W3
0978:  BRA     97A
097A:  MOV     #16,W5
097C:  REPEAT  #5
097E:  MOV     [--W15],[W5--]
0980:  MOV     [--W15],W5
0982:  RETURN  
*
0C68:  MOV     W5,[W15++]
0C6A:  MOV     #C,W5
0C6C:  REPEAT  #5
0C6E:  MOV     [W5++],[W15++]
0C70:  MOV     W3,W8
0C72:  MOV     W2,W7
0C74:  MOV     W1,W6
0C76:  MOV     W0,W5
0C78:  MOV     W3,W9
0C7A:  MOV     #473,W11
0C7C:  ASR     W3,#4,W3
0C7E:  MOV     #7FF,W10
0C80:  AND     W10,W3,W3
0C82:  SUB     W11,W3,W11
0C84:  AND     #1F,W8
0C86:  BSET    W8.4
0C88:  CLR     W0
0C8A:  CLR     W1
0C8C:  CLR     W2
0C8E:  CLR     W3
0C90:  BCLR.B  42.0
0C92:  RRC     W8,W8
0C94:  RRC     W7,W7
0C96:  RRC     W6,W6
0C98:  RRC     W5,W5
0C9A:  RRC     W3,W3
0C9C:  RRC     W2,W2
0C9E:  RRC     W1,W1
0CA0:  RRC     W0,W0
0CA2:  DEC     W11,W11
0CA4:  BRA     NZ,C90
0CA6:  BTSS    W9.F
0CA8:  BRA     CBC
0CAA:  COM     W0,W0
0CAC:  COM     W1,W1
0CAE:  COM     W2,W2
0CB0:  COM     W3,W3
0CB2:  INC     W0,W0
0CB4:  ADDC    #0,W1
0CB6:  ADDC    #0,W2
0CB8:  ADDC    #0,W3
0CBA:  BRA     CBC
0CBC:  MOV     #16,W5
0CBE:  REPEAT  #5
0CC0:  MOV     [--W15],[W5--]
0CC2:  MOV     [--W15],W5
0CC4:  RETURN  
*
0D8E:  MOV     W5,[W15++]
0D90:  MOV     #C,W5
0D92:  REPEAT  #3
0D94:  MOV     [W5++],[W15++]
0D96:  MOV     W0,W4
0D98:  MOV     W1,W5
0D9A:  MOV     W2,W6
0D9C:  MOV     W3,W7
0D9E:  CLR     W0
0DA0:  CLR     W1
0DA2:  CLR     W2
0DA4:  CLR     W3
0DA6:  BCLR    W8.0
0DA8:  BTSS    W7.F
0DAA:  BRA     DBC
0DAC:  BSET    W8.0
0DAE:  COM     W7,W7
0DB0:  COM     W6,W6
0DB2:  COM     W5,W5
0DB4:  NEG     W4,W4
0DB6:  ADDC    W5,#0,W5
0DB8:  ADDC    W6,#0,W6
0DBA:  ADDC    W7,#0,W7
0DBC:  IOR      W4,  W5,W9
0DBE:  BRA     NZ,DC4
0DC0:  IOR      W6,  W7,W9
0DC2:  BRA     Z,DEE
0DC4:  MOV     #473,W9
0DC6:  BTSC    W3.4
0DC8:  BRA     DE0
0DCA:  BCLR.B  42.0
0DCC:  RLC     W4,W4
0DCE:  RLC     W5,W5
0DD0:  RLC     W6,W6
0DD2:  RLC     W7,W7
0DD4:  RLC     W0,W0
0DD6:  RLC     W1,W1
0DD8:  RLC     W2,W2
0DDA:  RLC     W3,W3
0DDC:  DEC     W9,W9
0DDE:  BRA     NZ,DC6
0DE0:  SL      W9,#4,W9
0DE2:  BCLR.B  42.0
0DE4:  BCLR    W9.F
0DE6:  BCLR    W3.4
0DE8:  XOR     W9,W3,W3
0DEA:  BTSC    W8.0
0DEC:  BSET    W3.F
0DEE:  MOV     #12,W5
0DF0:  REPEAT  #3
0DF2:  MOV     [--W15],[W5--]
0DF4:  MOV     [--W15],W5
0DF6:  RETURN  
*
0FBA:  MOV     W5,[W15++]
0FBC:  MOV     #C,W5
0FBE:  REPEAT  #3
0FC0:  MOV     [W5++],[W15++]
0FC2:  BTSS    W0.F
0FC4:  BRA     FE4
0FC6:  NEG     W0,W0
0FC8:  BSET    W4.8
0FCA:  BTSS    W4.F
0FCC:  BRA     FE4
0FCE:  MOV     W0,[W15++]
0FD0:  MOV     #2D,W0
0FD2:  MOV     W4,[W15++]
0FD4:  MOV     W0,[W15++]
0FD6:  MOV     [--W15],W0
0FD8:  CALL    3CC
0FDC:  MOV     [--W15],W4
0FDE:  MOV     [--W15],W0
0FE0:  BCLR    W4.8
0FE2:  DEC.B   0008
0FE4:  CLR     W5
0FE6:  MOV     W0,W7
0FE8:  MOV     W4,W9
0FEA:  BCLR    W4.F
0FEC:  CP0.B   W4L
0FEE:  BRA     NZ,FFC
0FF0:  BTSC    W9.F
0FF2:  BRA     FF8
0FF4:  MOV     #0,W5
0FF6:  BRA     1026
0FF8:  MOV     #0,W5
0FFA:  BRA     1026
0FFC:  BTSS    W9.8
0FFE:  SUB.B   W4L,#6,W5L
1000:  BTSC    W9.8
1002:  SUB.B   W4L,#7,W5L
1004:  BRA     NC,1024
1006:  MOV     #30,W0
1008:  BTSS    W9.F
100A:  MOV     #20,W0
100C:  MOV     W0,[W15++]
100E:  MOV     W4,[W15++]
1010:  MOV     W0,[W15++]
1012:  MOV     [--W15],W0
1014:  CALL    3CC
1018:  MOV     [--W15],W4
101A:  MOV     [--W15],W0
101C:  DEC     W5,W5
101E:  BRA     NN,100C
1020:  MOV     #5,W5
1022:  BRA     1026
1024:  MOV     W4,W5
1026:  MOV     #6,W4
1028:  BTSC    W5.8
102A:  INC     W4,W4
102C:  BSET    W5.E
102E:  BTSC    W9.F
1030:  BSET    W5.F
1032:  MOV     #2710,W8
1034:  REPEAT  #11
1036:  DIV.U   W7,W8
1038:  CALL    108C
103C:  MOV     W1,W7
103E:  MOV     #3E8,W8
1040:  REPEAT  #11
1042:  DIV.U   W7,W8
1044:  CALL    108C
1048:  MOV     W1,W7
104A:  MOV     #64,W8
104C:  REPEAT  #11
104E:  DIV.U   W7,W8
1050:  CALL    108C
1054:  MOV     W1,W7
1056:  MOV     #A,W8
1058:  REPEAT  #11
105A:  DIV.U   W7,W8
105C:  CALL    108C
1060:  BTSS    W9.8
1062:  BRA     1078
1064:  MOV     #2D,W0
1066:  MOV     W1,[W15++]
1068:  MOV     W4,[W15++]
106A:  MOV     W0,[W15++]
106C:  MOV     [--W15],W0
106E:  CALL    3CC
1072:  MOV     [--W15],W4
1074:  MOV     [--W15],W1
1076:  BCLR    W9.8
1078:  MOV     #30,W0
107A:  ADD.B   W1L,W0L,W0L
107C:  MOV     W0,2A
107E:  MOV     W4,[W15++]
1080:  MOV     W0,[W15++]
1082:  MOV     [--W15],W0
1084:  CALL    3CC
1088:  MOV     [--W15],W4
108A:  BRA     10E0
108C:  MOV     #30,W6
108E:  CP0     W0
1090:  BRA     NZ,10AE
1092:  BTSS    W5.E
1094:  BRA     10CC
1096:  DEC     W4,W4
1098:  CP.B    W4L,W5L
109A:  BRA     Z,10A0
109C:  BTSC.B  42.0
109E:  RETURN  
10A0:  CP0     W0
10A2:  BRA     NZ,10AE
10A4:  BTSS    W5.E
10A6:  BRA     10CC
10A8:  BTSS    W5.F
10AA:  MOV     #20,W6
10AC:  BRA     10CC
10AE:  BCLR    W5.E
10B0:  BTSS    W9.8
10B2:  BRA     10CC
10B4:  MOV     W0,W10
10B6:  MOV     #2D,W0
10B8:  MOV     W1,[W15++]
10BA:  MOV     W4,[W15++]
10BC:  MOV     W0,[W15++]
10BE:  MOV     [--W15],W0
10C0:  CALL    3CC
10C4:  MOV     [--W15],W4
10C6:  MOV     [--W15],W1
10C8:  BCLR    W9.8
10CA:  MOV     W10,W0
10CC:  ADD.B   W6L,W0L,W0L
10CE:  MOV     W1,[W15++]
10D0:  MOV     W4,[W15++]
10D2:  MOV     W0,[W15++]
10D4:  MOV     [--W15],W0
10D6:  CALL    3CC
10DA:  MOV     [--W15],W4
10DC:  MOV     [--W15],W1
10DE:  RETURN  
10E0:  MOV     #12,W5
10E2:  REPEAT  #3
10E4:  MOV     [--W15],[W5--]
10E6:  MOV     [--W15],W5
10E8:  RETURN  
.................... 
.................... #list
.................... 
.................... #DEVICE ADC=10
.................... #device ICSP=1
.................... #use delay(clock=64000000,crystal=8000000)
.................... #use rs232(UART2, baud=9600, stream=UART_PORT2)
.................... 
.................... #FUSES NOWDT                    //No Watch Dog Timer
.................... #FUSES CKSFSM                   //Clock Switching is enabled, fail Safe clock monitor is enabled
.................... #FUSES BORV42                   //Brownout reset at 4.5V
.................... #FUSES WRT                      //Program Memory Write Protected
.................... #FUSES PROTECT                  //Code protected from reads
.................... #include <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
*
0984:  MOV     W5,[W15++]
0986:  MOV     W6,[W15++]
0988:  MOV     W7,[W15++]
098A:  MOV     W8,[W15++]
098C:  CLR     D82
098E:  CLR     D84
0990:  CLR     D86
0992:  MOV     #3FF0,W4
0994:  MOV     W4,D88
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
0996:  MOV     #FF1F,W4
0998:  MOV     W4,D92
099A:  SETM    D94
099C:  SETM    D96
099E:  MOV     #BFDF,W4
09A0:  MOV     W4,D98
09A2:  MOV     #1C35,W4
09A4:  MOV     W4,D9A
09A6:  MOV     #5555,W4
09A8:  MOV     W4,D9C
09AA:  MOV     #5555,W4
09AC:  MOV     W4,D9E
09AE:  MOV     #3FA5,W4
09B0:  MOV     W4,DA0
09B2:  MOV     #3F1C,W4
09B4:  MOV     W4,DA2
09B6:  MOV     #16A7,W4
09B8:  MOV     W4,DA4
09BA:  MOV     #C16C,W4
09BC:  MOV     W4,DA6
09BE:  MOV     #BF56,W4
09C0:  MOV     W4,DA8
09C2:  MOV     #F3E6,W4
09C4:  MOV     W4,DAA
09C6:  MOV     #D65,W4
09C8:  MOV     W4,DAC
09CA:  MOV     #1A0,W4
09CC:  MOV     W4,DAE
09CE:  MOV     #3EFA,W4
09D0:  MOV     W4,DB0
09D2:  MOV     #A3E,W4
09D4:  MOV     W4,DB2
09D6:  MOV     #3931,W4
09D8:  MOV     W4,DB4
09DA:  MOV     #7E4C,W4
09DC:  MOV     W4,DB6
09DE:  MOV     #BE92,W4
09E0:  MOV     W4,DB8
09E2:  MOV     #DDFB,W4
09E4:  MOV     W4,DBA
09E6:  MOV     #2B77,W4
09E8:  MOV     W4,DBC
09EA:  MOV     #EDB1,W4
09EC:  MOV     W4,DBE
09EE:  MOV     #3E21,W4
09F0:  MOV     W4,DC0
09F2:  MOV     #6FCC,W4
09F4:  MOV     W4,DC2
09F6:  MOV     #8FF7,W4
09F8:  MOV     W4,DC4
09FA:  MOV     #C610,W4
09FC:  MOV     W4,DC6
09FE:  MOV     #BDA8,W4
0A00:  MOV     W4,DC8
0A02:  MOV     #124C,W4
0A04:  MOV     W4,DCA
0A06:  MOV     #8E1C,W4
0A08:  MOV     W4,DCC
0A0A:  MOV     #3AF9,W4
0A0C:  MOV     W4,DCE
0A0E:  MOV     #3CF3,W4
0A10:  MOV     W4,DD0
0A12:  MOV     #7676,W4
0A14:  MOV     W4,DD2
0A16:  MOV     #350F,W4
0A18:  MOV     W4,DD4
0A1A:  MOV     #C0DE,W4
0A1C:  MOV     W4,DD6
0A1E:  MOV     #3CF0,W4
0A20:  MOV     W4,DD8
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
0A22:  MOV     D68,W0
0A24:  MOV     D6A,W1
0A26:  MOV     D6C,W2
0A28:  MOV     D6E,W3
0A2A:  MOV     #0,W4
0A2C:  MOV     #0,W5
0A2E:  MOV     #0,W6
0A30:  MOV     #0,W7
0A32:  CALL    8A2
0A36:  BRA     NC,A42
0A38:  MOV     #D68,W0
0A3A:  MOV     #D68,W1
0A3C:  REPEAT  #7
0A3E:  MOV     [W0++],[W1++]
0A40:  BTG.B   D6F.7
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
0A42:  MOV     D68,W0
0A44:  MOV     D6A,W1
0A46:  MOV     D6C,W2
0A48:  MOV     D6E,W3
0A4A:  MOV     #C884,W4
0A4C:  MOV     #6DC9,W5
0A4E:  MOV     #5F30,W6
0A50:  MOV     #3FE4,W7
0A52:  CALL    49C
0A56:  CALL    926
0A5A:  MOV.B   W0L,D70
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
0A5C:  MOV     D68,W0
0A5E:  MOV     D6A,W1
0A60:  MOV     D6C,W2
0A62:  MOV     D6E,W3
0A64:  MOV     #C884,W4
0A66:  MOV     #6DC9,W5
0A68:  MOV     #5F30,W6
0A6A:  MOV     #3FE4,W7
0A6C:  CALL    49C
0A70:  MOV     W0,W5
0A72:  MOV     W1,W6
0A74:  MOV     W2,W7
0A76:  MOV     W3,W8
0A78:  MOV     #0,W1
0A7A:  MOV     #0,W2
0A7C:  MOV     #0,W3
0A7E:  MOV.B   D70,W0L
0A80:  CLR.B   1
0A82:  CALL    432
0A86:  BSET.B  43.0
0A88:  MOV     W5,[W15++]
0A8A:  MOV     W6,[W15++]
0A8C:  MOV     W7,[W15++]
0A8E:  MOV     W0,W4
0A90:  MOV     W5,W0
0A92:  MOV     W1,W5
0A94:  MOV     W6,W1
0A96:  MOV     W2,W6
0A98:  MOV     W7,W2
0A9A:  MOV     W3,W7
0A9C:  MOV     W8,W3
0A9E:  CALL    6B4
0AA2:  MOV     [--W15],W7
0AA4:  MOV     [--W15],W6
0AA6:  MOV     [--W15],W5
0AA8:  MOV     W0,D8A
0AAA:  MOV     W1,D8C
0AAC:  MOV     W2,D8E
0AAE:  MOV     W3,D90
....................    quad = quad % 4;                    // quadrant (0 to 3)
0AB0:  MOV.B   D70,W0L
0AB2:  AND.B   W0L,#3,W0L
0AB4:  MOV.B   W0L,D70
.................... 
....................    if (quad == 0 || quad == 2)
0AB6:  CP0.B   D70
0AB8:  BRA     Z,AC0
0ABA:  MOV     D70,W4
0ABC:  CP.B    W4L,#2
0ABE:  BRA     NZ,ADE
....................       t = frac * PI_DIV_BY_TWO;
0AC0:  MOV     D8A,W0
0AC2:  MOV     D8C,W1
0AC4:  MOV     D8E,W2
0AC6:  MOV     D90,W3
0AC8:  MOV     #2D18,W4
0ACA:  MOV     #5444,W5
0ACC:  MOV     #21FB,W6
0ACE:  MOV     #3FF9,W7
0AD0:  CALL    49C
0AD4:  MOV     W0,D7A
0AD6:  MOV     W1,D7C
0AD8:  MOV     W2,D7E
0ADA:  MOV     W3,D80
0ADC:  BRA     B72
....................    else if (quad == 1)
0ADE:  MOV     D70,W4
0AE0:  CP.B    W4L,#1
0AE2:  BRA     NZ,B2C
....................       t = (1-frac) * PI_DIV_BY_TWO;
0AE4:  BSET.B  43.0
0AE6:  MOV     #0,W0
0AE8:  MOV     #0,W1
0AEA:  MOV     #0,W2
0AEC:  MOV     #3FF0,W3
0AEE:  MOV     D8A,W4
0AF0:  MOV     D8C,W5
0AF2:  MOV     D8E,W6
0AF4:  MOV     D90,W7
0AF6:  CALL    6B4
0AFA:  MOV     W0,W5
0AFC:  MOV     W1,W6
0AFE:  MOV     W2,W7
0B00:  MOV     W3,W8
0B02:  MOV     W5,[W15++]
0B04:  MOV     W6,[W15++]
0B06:  MOV     W7,[W15++]
0B08:  MOV     W5,W0
0B0A:  MOV     W6,W1
0B0C:  MOV     W7,W2
0B0E:  MOV     W8,W3
0B10:  MOV     #2D18,W4
0B12:  MOV     #5444,W5
0B14:  MOV     #21FB,W6
0B16:  MOV     #3FF9,W7
0B18:  CALL    49C
0B1C:  MOV     [--W15],W7
0B1E:  MOV     [--W15],W6
0B20:  MOV     [--W15],W5
0B22:  MOV     W0,D7A
0B24:  MOV     W1,D7C
0B26:  MOV     W2,D7E
0B28:  MOV     W3,D80
0B2A:  BRA     B72
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
0B2C:  BSET.B  43.0
0B2E:  MOV     D8A,W0
0B30:  MOV     D8C,W1
0B32:  MOV     D8E,W2
0B34:  MOV     D90,W3
0B36:  MOV     #0,W4
0B38:  MOV     #0,W5
0B3A:  MOV     #0,W6
0B3C:  MOV     #3FF0,W7
0B3E:  CALL    6B4
0B42:  MOV     W0,W5
0B44:  MOV     W1,W6
0B46:  MOV     W2,W7
0B48:  MOV     W3,W8
0B4A:  MOV     W5,[W15++]
0B4C:  MOV     W6,[W15++]
0B4E:  MOV     W7,[W15++]
0B50:  MOV     W5,W0
0B52:  MOV     W6,W1
0B54:  MOV     W7,W2
0B56:  MOV     W8,W3
0B58:  MOV     #2D18,W4
0B5A:  MOV     #5444,W5
0B5C:  MOV     #21FB,W6
0B5E:  MOV     #3FF9,W7
0B60:  CALL    49C
0B64:  MOV     [--W15],W7
0B66:  MOV     [--W15],W6
0B68:  MOV     [--W15],W5
0B6A:  MOV     W0,D7A
0B6C:  MOV     W1,D7C
0B6E:  MOV     W2,D7E
0B70:  MOV     W3,D80
.................... 
....................    y = 1.0;
0B72:  CLR     D72
0B74:  CLR     D74
0B76:  CLR     D76
0B78:  MOV     #3FF0,W4
0B7A:  MOV     W4,D78
....................    t = t * t;
0B7C:  MOV     D7A,W0
0B7E:  MOV     D7C,W1
0B80:  MOV     D7E,W2
0B82:  MOV     D80,W3
0B84:  MOV     D7A,W4
0B86:  MOV     D7C,W5
0B88:  MOV     D7E,W6
0B8A:  MOV     D80,W7
0B8C:  CALL    49C
0B90:  MOV     W0,D7A
0B92:  MOV     W1,D7C
0B94:  MOV     W2,D7E
0B96:  MOV     W3,D80
....................    for (i = 0; i <= 8; i++)
0B98:  CLR.B   D71
0B9A:  MOV     D70,W4
0B9C:  LSR     W4,#8,W4
0B9E:  CP.B    W4L,#8
0BA0:  BRA     GTU,C04
....................    {
....................       t2 = t2 * t;
0BA2:  MOV     D82,W0
0BA4:  MOV     D84,W1
0BA6:  MOV     D86,W2
0BA8:  MOV     D88,W3
0BAA:  MOV     D7A,W4
0BAC:  MOV     D7C,W5
0BAE:  MOV     D7E,W6
0BB0:  MOV     D80,W7
0BB2:  CALL    49C
0BB6:  MOV     W0,D82
0BB8:  MOV     W1,D84
0BBA:  MOV     W2,D86
0BBC:  MOV     W3,D88
....................       y = y + p_64[i] * t2;
0BBE:  MOV.B   D71,W0L
0BC0:  CLR.B   1
0BC2:  SL      W0,#3,W0
0BC4:  MOV     #D92,W4
0BC6:  ADD     W0,W4,W0
0BC8:  MOV     W0,W5
0BCA:  MOV     W5,[W15++]
0BCC:  MOV     [W5],W0
0BCE:  MOV     [++W5],W1
0BD0:  MOV     [++W5],W2
0BD2:  MOV     [++W5],W3
0BD4:  MOV     D82,W4
0BD6:  MOV     D84,W5
0BD8:  MOV     D86,W6
0BDA:  MOV     D88,W7
0BDC:  CALL    49C
0BE0:  MOV     [--W15],W5
0BE2:  BCLR.B  43.0
0BE4:  MOV     W0,W4
0BE6:  MOV     W1,W5
0BE8:  MOV     W2,W6
0BEA:  MOV     W3,W7
0BEC:  MOV     D72,W0
0BEE:  MOV     D74,W1
0BF0:  MOV     D76,W2
0BF2:  MOV     D78,W3
0BF4:  CALL    6B4
0BF8:  MOV     W0,D72
0BFA:  MOV     W1,D74
0BFC:  MOV     W2,D76
0BFE:  MOV     W3,D78
0C00:  INC.B   0D71
0C02:  BRA     B9A
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
0C04:  MOV     D70,W4
0C06:  CP.B    W4L,#2
0C08:  BRA     Z,C10
0C0A:  MOV     D70,W4
0C0C:  CP.B    W4L,#1
0C0E:  BRA     NZ,C1A
....................       y = -y;  // correct sign
0C10:  MOV     #D72,W0
0C12:  MOV     #D72,W1
0C14:  REPEAT  #7
0C16:  MOV     [W0++],[W1++]
0C18:  BTG.B   D79.7
.................... 
....................    return (y);
0C1A:  MOV     D72,W0
0C1C:  MOV     D74,W1
0C1E:  MOV     D76,W2
0C20:  MOV     D78,W3
0C22:  MOV     [--W15],W8
0C24:  MOV     [--W15],W7
0C26:  MOV     [--W15],W6
0C28:  MOV     [--W15],W5
0C2A:  RETURN  
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
0C2C:  MOV     W5,[W15++]
0C2E:  MOV     W6,[W15++]
0C30:  MOV     W7,[W15++]
0C32:  MOV     W8,[W15++]
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
0C34:  BSET.B  43.0
0C36:  MOV     D58,W0
0C38:  MOV     D5A,W1
0C3A:  MOV     D5C,W2
0C3C:  MOV     D5E,W3
0C3E:  MOV     #2D18,W4
0C40:  MOV     #5444,W5
0C42:  MOV     #21FB,W6
0C44:  MOV     #3FF9,W7
0C46:  CALL    6B4
0C4A:  MOV     W0,W5
0C4C:  MOV     W1,W6
0C4E:  MOV     W2,W7
0C50:  MOV     W3,W8
0C52:  MOV     W5,D68
0C54:  MOV     W6,D6A
0C56:  MOV     W7,D6C
0C58:  MOV     W8,D6E
0C5A:  CALL    984
0C5E:  MOV     [--W15],W8
0C60:  MOV     [--W15],W7
0C62:  MOV     [--W15],W6
0C64:  MOV     [--W15],W5
0C66:  RETURN  
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #define P1TCON 0x01C0
.................... #define P1TMR 0x01C2 
.................... #define P1TPER 0x01C4
.................... #define P1SECMP 0x01C6
.................... #define PWM1CON1 0x01C8 
.................... #define PWM1CON2 0x01CA
.................... #define P1DTCON1 0x01CC
.................... #define P1DTCON2 0x01CE  
.................... #define P1FLTACON 0x01D0
.................... #define P1OVDCON 0x01D4   
.................... #define P1DC1 0x01D6   
.................... #define P1DC2 0x01D8
.................... #define P1DC3 0x01DA
.................... #define IPC14 0x00C0  
.................... #define CLKDIV 0x0744 
.................... #define PLLFBD 0x0746
.................... 
.................... 
.................... #define ADC_pin sAN0
.................... #define LED_PIN PIN_B5
.................... 
.................... #define voltage_offset 1000//1248
.................... #define low_duty_limit 50
.................... #define high_duty_limit 1950
.................... #define SLOPE 5.4
.................... //! #define SLOPE 6.2
.................... #define break_level 5
.................... #define sustain_level 200  
.................... #define break_amplitude 0 
.................... #define pedestal_amplitude 5
.................... #define peak_amplitude 950
.................... 
.................... 
.................... #define throttle_PIN PIN_B1
.................... #define PWM_tick_pin PIN_B2
.................... #define TIM_tick_pin PIN_B3
.................... 
....................   
....................   
.................... void initMCPWM(void);
.................... void fill_sine_table(void);  
.................... void timer_reload(void);
.................... void voltage_gain(void); 
.................... 
.................... 
.................... unsigned int16 duty[3]={voltage_offset,voltage_offset,voltage_offset},sample=0;
.................... signed int16 peak_voltage =0;//  1184; 
.................... signed int32 reference[3] = {0,0,0};
.................... 
.................... const unsigned max_samples=30.0;
.................... signed int16 sine_table[max_samples];
.................... unsigned int16 sine_index,phase_angle[3] = {0 , 0 , 0};  
.................... double theeta;
.................... 
.................... const unsigned max_freq = 250; //Hz
.................... //!const double per_clock_tick = 0.006405; //ms
.................... //!const double per_clock_tick = 0.007996; //ms
.................... const double per_clock_tick = 0.001; //ms
.................... unsigned int16 timer_table[max_freq+1];
.................... 
.................... unsigned int16 gain_table[256];
.................... unsigned int16 raw_adc =0 ;
.................... signed int16 throttle_level = 0;
.................... unsigned int16 freq = 1;
.................... unsigned int16 temp = 0;
.................... 
.................... int1 tick = 0;
.................... int1 uart_tick = 0;
.................... int8 tick_count = 0;
.................... unsigned long millis_count = 0;
.................... 
.................... char Serial_OutputBuffer[60];
.................... 
.................... 
.................... #int_PWM1
.................... void  PWM1_isr(void) 
*
0128:  PUSH    42
012A:  PUSH    36
012C:  PUSH    32
012E:  MOV     W0,[W15++]
0130:  MOV     #2,W0
0132:  REPEAT  #C
0134:  MOV     [W0++],[W15++]
.................... {
.................... 
....................    tick_count++;
0136:  INC.B   0D11
....................    if(tick_count >= 8)
0138:  MOV     D10,W4
013A:  LSR     W4,#8,W4
013C:  CP.B    W4L,#8
013E:  BRA     LT,14A
....................    {   
.................... //!      output_bit(PWM_tick_pin , 1);
....................       millis_count++;
0140:  INC     0D12
0142:  BTSC.B  42.1
0144:  INC     0D14
....................       tick = 1;
0146:  BSET.B  D10.0
....................       tick_count=0;
0148:  CLR.B   D11
....................    
....................    }
....................    if (millis_count >= 500) {
014A:  MOV     D14,W4
014C:  CP      W4,#0
014E:  BRA     NC,160
0150:  BRA     GTU,15A
0152:  MOV     D12,W4
0154:  MOV     #1F4,W3
0156:  CP      W3,W4
0158:  BRA     GTU,160
.................... //!      output_toggle(LED_PIN);
....................       uart_tick = 1;
015A:  BSET.B  D10.1
....................       millis_count = 0;
015C:  CLR     D12
015E:  CLR     D14
....................       
....................    }
.................... 
.................... }
0160:  BCLR.B  88.7
0162:  MOV     #1A,W0
0164:  REPEAT  #C
0166:  MOV     [--W15],[W0--]
0168:  MOV     [--W15],W0
016A:  POP     32
016C:  POP     36
016E:  POP     42
0170:  RETFIE  
.................... #INT_TIMER1
.................... void  timer1_isr(void) 
*
01B4:  PUSH    42
01B6:  PUSH    36
01B8:  PUSH    32
01BA:  MOV     W0,[W15++]
01BC:  MOV     #2,W0
01BE:  REPEAT  #C
01C0:  MOV     [W0++],[W15++]
.................... {
....................     
....................    output_bit(TIM_tick_pin , 1);
01C2:  BSET.B  2CA.3
01C4:  BCLR.B  2C6.3
.................... //!   delay_us(10);
.................... //!   output_bit(TIM_tick_pin , 0); 
.................... //!   
....................    
....................    sample = (sample+1)%max_samples;
01C6:  MOV     8B6,W4
01C8:  ADD     W4,#1,W5
01CA:  MOV     #1E,W4
01CC:  REPEAT  #11
01CE:  DIV.U   W5,W4
01D0:  MOV     W1,8B6
....................    phase_angle[0] = sample;
01D2:  PUSH    8B6
01D4:  POP     904
....................    phase_angle[1] = (sample+10)%max_samples;
01D6:  MOV     8B6,W4
01D8:  ADD     W4,#A,W5
01DA:  MOV     #1E,W4
01DC:  REPEAT  #11
01DE:  DIV.U   W5,W4
01E0:  MOV     W1,906
....................    phase_angle[2] = (sample+20)%max_samples; 
01E2:  MOV     8B6,W4
01E4:  ADD     W4,#14,W5
01E6:  MOV     #1E,W4
01E8:  REPEAT  #11
01EA:  DIV.U   W5,W4
01EC:  MOV     W1,908
.................... 
....................    for (int i = 0 ; i < 3 ; i++) {
01EE:  CLR     E1A
01F0:  MOV     E1A,W4
01F2:  CP      W4,#3
01F4:  BRA     GE,38C
....................       
....................       reference[i] = sine_table[phase_angle[i]];
01F6:  MOV     E1A,W4
01F8:  MUL.UU  W4,#4,W0
01FA:  MOV     #8BA,W4
01FC:  ADD     W0,W4,W5
01FE:  MOV     E1A,W4
0200:  MUL.UU  W4,#2,W0
0202:  MOV     #904,W4
0204:  ADD     W0,W4,W0
0206:  MOV     [W0],W6
0208:  SL      W6,#1,W0
020A:  MOV     #8C6,W4
020C:  ADD     W0,W4,W0
020E:  MOV     W0,W4
0210:  MOV     [W4],W0
0212:  CLR     W1
0214:  BTSC    W0.F
0216:  SETM    W1
0218:  MOV     #0,W4
021A:  MOV     [W4++],[W5++]
021C:  MOV     [W4++],[W5++]
....................       reference[i] = reference[i] * peak_voltage; 
021E:  MOV     E1A,W4
0220:  MUL.UU  W4,#4,W0
0222:  MOV     #8BA,W4
0224:  ADD     W0,W4,W5
0226:  MOV     E1A,W4
0228:  MUL.UU  W4,#4,W0
022A:  MOV     #8BA,W4
022C:  ADD     W0,W4,W0
022E:  MOV     #C,W4
0230:  MOV     [W0++],[W4++]
0232:  MOV     [W0++],[W4++]
0234:  MOV     8B8,W0
0236:  CLR     W1
0238:  BTSC    W0.F
023A:  SETM    W1
023C:  MOV     W0,W2
023E:  MOV     W1,W3
0240:  MOV     W6,W0
0242:  MOV     W7,W1
0244:  CALL    172
0248:  MOV     #0,W4
024A:  MOV     [W4++],[W5++]
024C:  MOV     [W4++],[W5++]
....................       if( reference[i] > 0)
024E:  MOV     E1A,W4
0250:  MUL.UU  W4,#4,W0
0252:  MOV     #8BA,W4
0254:  ADD     W0,W4,W0
0256:  MOV     #A,W4
0258:  MOV     [W0++],[W4++]
025A:  MOV     [W0++],[W4++]
025C:  CP      W6,#0
025E:  BRA     LT,28C
0260:  BRA     GT,266
0262:  CP      W5,#0
0264:  BRA     LEU,28C
....................       {
....................          reference[i] = reference[i] >> 8; 
0266:  MOV     E1A,W4
0268:  MUL.UU  W4,#4,W0
026A:  MOV     #8BA,W4
026C:  ADD     W0,W4,W5
026E:  MOV     E1A,W4
0270:  MUL.UU  W4,#4,W0
0272:  MOV     #8BA,W4
0274:  ADD     W0,W4,W0
0276:  MOV     #C,W4
0278:  MOV     [W0++],[W4++]
027A:  MOV     [W0++],[W4++]
027C:  MOV.B   D,W0L
027E:  MOV.B   W0L,[W5]
0280:  MOV.B   W7L,[W5+#1]
0282:  MOV.B   F,W0L
0284:  MOV.B   W0L,[W5+#2]
0286:  MOV.B   #0,W0L
0288:  MOV.B   W0L,[W5+#3]
....................       }
028A:  BRA     308
....................       else if( reference[i] < 0)
028C:  MOV     E1A,W4
028E:  MUL.UU  W4,#4,W0
0290:  MOV     #8BA,W4
0292:  ADD     W0,W4,W0
0294:  MOV     #A,W4
0296:  MOV     [W0++],[W4++]
0298:  MOV     [W0++],[W4++]
029A:  CP      W6,#0
029C:  BRA     GT,308
029E:  BRA     LT,2A4
02A0:  CP      W5,#0
02A2:  BRA     C,308
....................       {
....................          reference[i] = 0 - reference[i];
02A4:  MOV     E1A,W4
02A6:  MUL.UU  W4,#4,W0
02A8:  MOV     #8BA,W4
02AA:  ADD     W0,W4,W5
02AC:  MOV     E1A,W4
02AE:  MUL.UU  W4,#4,W0
02B0:  MOV     #8BA,W4
02B2:  ADD     W0,W4,W0
02B4:  MOV     W0,W4
02B6:  MOV     #0,W3
02B8:  MOV     [W4++],[W3++]
02BA:  MOV     [W4++],[W3++]
02BC:  MOV     #0,W4
02BE:  SUB     W4,W0,[W5]
02C0:  MOV     #0,W4
02C2:  SUBB    W4,W1,[++W5]
....................          reference[i] = reference[i] >> 8;
02C4:  MOV     E1A,W4
02C6:  MUL.UU  W4,#4,W0
02C8:  MOV     #8BA,W4
02CA:  ADD     W0,W4,W5
02CC:  MOV     E1A,W4
02CE:  MUL.UU  W4,#4,W0
02D0:  MOV     #8BA,W4
02D2:  ADD     W0,W4,W0
02D4:  MOV     #C,W4
02D6:  MOV     [W0++],[W4++]
02D8:  MOV     [W0++],[W4++]
02DA:  MOV.B   D,W0L
02DC:  MOV.B   W0L,[W5]
02DE:  MOV.B   W7L,[W5+#1]
02E0:  MOV.B   F,W0L
02E2:  MOV.B   W0L,[W5+#2]
02E4:  MOV.B   #0,W0L
02E6:  MOV.B   W0L,[W5+#3]
....................          reference[i] = 0 - reference[i];
02E8:  MOV     E1A,W4
02EA:  MUL.UU  W4,#4,W0
02EC:  MOV     #8BA,W4
02EE:  ADD     W0,W4,W5
02F0:  MOV     E1A,W4
02F2:  MUL.UU  W4,#4,W0
02F4:  MOV     #8BA,W4
02F6:  ADD     W0,W4,W0
02F8:  MOV     W0,W4
02FA:  MOV     #0,W3
02FC:  MOV     [W4++],[W3++]
02FE:  MOV     [W4++],[W3++]
0300:  MOV     #0,W4
0302:  SUB     W4,W0,[W5]
0304:  MOV     #0,W4
0306:  SUBB    W4,W1,[++W5]
....................       }
....................       
....................       reference[i] = reference[i] + voltage_offset;
0308:  MOV     E1A,W4
030A:  MUL.UU  W4,#4,W0
030C:  MOV     #8BA,W4
030E:  ADD     W0,W4,W5
0310:  MOV     E1A,W4
0312:  MUL.UU  W4,#4,W0
0314:  MOV     #8BA,W4
0316:  ADD     W0,W4,W0
0318:  MOV     #C,W4
031A:  MOV     [W0++],[W4++]
031C:  MOV     [W0++],[W4++]
031E:  MOV     #3E8,W4
0320:  ADD     W6,W4,[W5]
0322:  ADDC    W7,#0,[++W5]
....................       if(reference[i] > high_duty_limit )
0324:  MOV     E1A,W4
0326:  MUL.UU  W4,#4,W0
0328:  MOV     #8BA,W4
032A:  ADD     W0,W4,W0
032C:  MOV     #A,W4
032E:  MOV     [W0++],[W4++]
0330:  MOV     [W0++],[W4++]
0332:  CP      W6,#0
0334:  BRA     LT,356
0336:  BRA     GT,33E
0338:  MOV     #79E,W4
033A:  CP      W4,W5
033C:  BRA     C,356
....................       { 
....................          reference[i] = high_duty_limit;
033E:  MOV     E1A,W4
0340:  MUL.UU  W4,#4,W0
0342:  MOV     #8BA,W4
0344:  ADD     W0,W4,W5
0346:  MOV.B   #9E,W0L
0348:  MOV.B   W0L,[W5]
034A:  MOV.B   #7,W0L
034C:  MOV.B   W0L,[W5+#1]
034E:  MOV.B   #0,W0L
0350:  MOV.B   W0L,[W5+#2]
0352:  MOV.B   #0,W0L
0354:  MOV.B   W0L,[W5+#3]
....................       }
....................       if(reference[i] < low_duty_limit)
0356:  MOV     E1A,W4
0358:  MUL.UU  W4,#4,W0
035A:  MOV     #8BA,W4
035C:  ADD     W0,W4,W0
035E:  MOV     #A,W4
0360:  MOV     [W0++],[W4++]
0362:  MOV     [W0++],[W4++]
0364:  CP      W6,#0
0366:  BRA     GT,388
0368:  BRA     LT,370
036A:  MOV     #32,W4
036C:  CP      W4,W5
036E:  BRA     LEU,388
....................       { 
....................          reference[i] = low_duty_limit;
0370:  MOV     E1A,W4
0372:  MUL.UU  W4,#4,W0
0374:  MOV     #8BA,W4
0376:  ADD     W0,W4,W5
0378:  MOV.B   #32,W0L
037A:  MOV.B   W0L,[W5]
037C:  MOV.B   #0,W0L
037E:  MOV.B   W0L,[W5+#1]
0380:  MOV.B   #0,W0L
0382:  MOV.B   W0L,[W5+#2]
0384:  MOV.B   #0,W0L
0386:  MOV.B   W0L,[W5+#3]
....................       }
0388:  INC     0E1A
038A:  BRA     1F0
....................    }
....................       
....................    *P1DC1 = reference[0];  *(P1DC1+1) = reference[0]>>8;
038C:  MOV.B   8BA,W0L
038E:  MOV.B   W0L,1D6
0390:  MOV.B   8BB,W0L
0392:  MOV.B   W0L,1D7
....................    *P1DC2 = reference[1];  *(P1DC2+1) = reference[1]>>8;
0394:  MOV.B   8BE,W0L
0396:  MOV.B   W0L,1D8
0398:  MOV.B   8BF,W0L
039A:  MOV.B   W0L,1D9
....................    *P1DC3 = reference[2];  *(P1DC3+1) = reference[2]>>8;
039C:  MOV.B   8C2,W0L
039E:  MOV.B   W0L,1DA
03A0:  MOV.B   8C3,W0L
03A2:  MOV.B   W0L,1DB
....................    
....................    setup_timer1(TMR_INTERNAL | TMR_DIV_BY_64, timer_table[freq]);
03A4:  MOV     D0C,W0
03A6:  SL      W0,#1,W0
03A8:  MOV     #912,W4
03AA:  ADD     W0,W4,W0
03AC:  MOV     [W0],W5
03AE:  CLR     104
03B0:  MOV     W5,102
03B2:  MOV     #8020,W4
03B4:  MOV     W4,104
....................    
....................    
....................   
.................... //!   if(sample < 15)
.................... //!   {
.................... //!      output_bit(Sync_Out,1);
.................... //!   }
.................... //!   else
.................... //!   {
.................... //!      output_bit(Sync_Out,0);
.................... //!   }
....................       output_bit(TIM_tick_pin , 0);
03B6:  BCLR.B  2CA.3
03B8:  BCLR.B  2C6.3
03BA:  BCLR.B  84.3
03BC:  MOV     #1A,W0
03BE:  REPEAT  #C
03C0:  MOV     [--W15],[W0--]
03C2:  MOV     [--W15],W0
03C4:  POP     32
03C6:  POP     36
03C8:  POP     42
03CA:  RETFIE  
.................... }
.................... 
....................    
.................... void main()
*
10EA:  MOV     #F80,W15
10EC:  MOV     #FFF,W0
10EE:  MOV     W0,20
10F0:  NOP     
10F2:  MOV     #4444,W0
10F4:  MOV     W0,94
10F6:  MOV     #4444,W0
10F8:  MOV     W0,A6
10FA:  BSET.B  81.7
10FC:  MOV     #8000,W4
10FE:  MOV     W4,216
1100:  MOV     #400,W4
1102:  MOV     W4,218
1104:  MOV     #67,W4
1106:  MOV     W4,21E
1108:  CLR     8B6
110A:  CLR     8B8
110C:  CLR     D08
110E:  CLR     D0A
1110:  MOV     #1,W4
1112:  MOV     W4,D0C
1114:  CLR     D0E
1116:  BCLR.B  D10.0
1118:  BCLR.B  D10.1
111A:  CLR.B   D11
111C:  CLR     D12
111E:  CLR     D14
1120:  CLR     D52
1122:  SETM    2A8
1124:  BRA     11C4
1126:  DATA    C0,06,08
1128:  DATA    00,00,00
112A:  DATA    4B,F0,3F
112C:  DATA    5C,0A,58
112E:  DATA    F6,3B,8F
1130:  DATA    00,C0,3C
1132:  DATA    8B,28,AC
1134:  DATA    3C,BE,F6
1136:  DATA    3F,D2,D5
1138:  DATA    44,16,8C
113A:  DATA    15,D7,BF
113C:  DATA    69,00,5A
113E:  DATA    2E,1B,87
1140:  DATA    99,3F,9A
1142:  DATA    5F,AD,4B
1144:  DATA    91,E4,01
1146:  DATA    C0,5D,11
1148:  DATA    2F,92,E4
114A:  DATA    81,FB,3F
114C:  DATA    38,DA,91
114E:  DATA    80,9D,C5
1150:  DATA    E0,BF,6F
1152:  DATA    12,C0,B4
1154:  DATA    C3,09,AB
1156:  DATA    3F,6B,C1
1158:  DATA    03,4E,C1
115A:  DATA    B5,45,BF
115C:  DATA    F7,40,05
115E:  DATA    FF,00,60
1160:  DATA    EF,3F,F3
1162:  DATA    A3,E2,F7
1164:  DATA    D7,FF,01
1166:  DATA    40,C0,B4
1168:  DATA    FF,05,3C
116A:  DATA    58,FC,3F
116C:  DATA    3B,D3,C0
116E:  DATA    B5,BA,8C
1170:  DATA    E2,3F,39
1172:  DATA    D3,C7,3D
1174:  DATA    41,79,B2
1176:  DATA    3F,87,0D
1178:  DATA    3C,50,D0
117A:  DATA    AF,62,3F
117C:  DATA    30,4B,8D
117E:  DATA    A2,82,AA
1180:  DATA    04,40,09
1182:  DATA    A0,40,4A
1184:  DATA    05,76,03
1186:  DATA    40,EC,9E
1188:  DATA    37,88,A6
118A:  DATA    44,F0,3F
118C:  DATA    8F,12,8D
118E:  DATA    29,9A,5B
1190:  DATA    C7,3F,0E
1192:  DATA    E0,80,7C
1194:  DATA    A1,D8,86
1196:  DATA    3F,29,4B
1198:  DATA    FB,95,C2
119A:  DATA    37,1A,3F
119C:  DATA    E8,03,E8
119E:  DATA    03,E8,03
11A0:  DATA    C0,0C,08
11A2:  DATA    BA,00,C0
11A4:  DATA    06,09,04
11A6:  DATA    00,00,00
11A8:  INC     W2,W2
11AA:  CP      W2,#1
11AC:  BRA     NZ,11B6
11AE:  TBLRDL  [W1],W3
11B0:  TBLRDH  [W1++],W4
11B2:  MOV.B   6,W0L
11B4:  RETURN  
11B6:  CP      W2,#2
11B8:  BRA     NZ,11BE
11BA:  MOV.B   7,W0L
11BC:  RETURN  
11BE:  MOV.B   8,W0L
11C0:  CLR     W2
11C2:  RETURN  
11C4:  MOV     #0,W6
11C6:  MOV     #0,W0
11C8:  MOV     W0,32
11CA:  MOV     #1126,W0
11CC:  MOV     W0,W1
11CE:  CLR     W2
11D0:  CALL    11A8
11D4:  MOV.B   W0L,B
11D6:  CALL    11A8
11DA:  MOV.B   W0L,A
11DC:  CP0     W5
11DE:  BRA     Z,1212
11E0:  BTSS    W5.F
11E2:  BRA     11F2
11E4:  CALL    11A8
11E8:  MOV.B   W0L,D
11EA:  CALL    11A8
11EE:  MOV.B   W0L,C
11F0:  BCLR    W5.F
11F2:  BTSS    W5.E
11F4:  BRA     1206
11F6:  BCLR    W5.E
11F8:  DEC     W5,W5
11FA:  CALL    11A8
11FE:  MOV.B   W0L,W7L
1200:  REPEAT  W5
1202:  MOV.B   W7L,[W6++]
1204:  BRA     11D0
1206:  CALL    11A8
120A:  MOV.B   W0L,[W6++]
120C:  DEC     W5,W5
120E:  BRA     NZ,1206
1210:  BRA     11D0
.................... { 
....................     sprintf(Serial_OutputBuffer, "\nMotor Control Unit v0.1\r\n");
1212:  MOV     #D16,W4
1214:  MOV     W4,D52
1216:  MOV     #0,W1
1218:  MOV     W1,W0
121A:  CLR.B   1
121C:  CALL    100
1220:  INC     W1,W1
1222:  MOV     W1,[W15++]
1224:  MOV     W0,[W15++]
1226:  MOV     [--W15],W0
1228:  CALL    3CC
122C:  MOV     [--W15],W1
122E:  MOV     #19,W0
1230:  CPSGT   W1,W0
1232:  BRA     1218
....................     printf(Serial_OutputBuffer);
1234:  MOV     #D16,W1
1236:  CP0.B   [W1]
1238:  BRA     Z,1248
123A:  BTSC.B  219.1
123C:  BRA     123A
123E:  MOV.B   [W1+#0],W0L
1240:  MOV.B   W0L,21A
1242:  CLR.B   21B
1244:  INC     W1,W1
1246:  BRA     1236
....................  
....................    freq = 1;
1248:  MOV     #1,W4
124A:  MOV     W4,D0C
....................    
....................    initMCPWM();
124C:  CALL    3DA
....................    fill_sine_table();
1250:  CALL    CC6
....................    timer_reload();
1254:  CALL    DF8
....................    voltage_gain(); 
1258:  CALL    EF2
....................    
....................    output_drive(LED_PIN);
125C:  BCLR.B  2C6.5
....................    output_drive(PWM_tick_pin);
125E:  BCLR.B  2C6.2
....................    output_drive(TIM_tick_pin);   
1260:  BCLR.B  2C6.3
....................    
....................    setup_adc(ADC_CLOCK_DIV_32);
1262:  MOV     #1F1F,W4
1264:  MOV     W4,2A4
1266:  MOV     #80E0,W4
1268:  MOV     W4,2A0
....................    setup_adc_ports(ADC_pin);
126A:  MOV     #FFFE,W4
126C:  MOV     W4,2A8
126E:  CLR     2A2
....................    set_adc_channel(0);
1270:  CLR     2A6
....................    delay_us(10);
1272:  REPEAT  #9E
1274:  NOP     
....................    
....................    setup_timer1(TMR_INTERNAL | TMR_DIV_BY_64, timer_table[freq]);            
1276:  MOV     D0C,W0
1278:  SL      W0,#1,W0
127A:  MOV     #912,W4
127C:  ADD     W0,W4,W0
127E:  MOV     [W0],W5
1280:  CLR     104
1282:  MOV     W5,102
1284:  MOV     #8020,W4
1286:  MOV     W4,104
....................    enable_interrupts(INT_TIMER1);  
1288:  BSET.B  8C.3
....................       
....................    enable_interrupts(INT_PWM1);  
128A:  BSET.B  90.7
....................    enable_interrupts(INTR_GLOBAL);
128C:  BCLR.B  81.7
128E:  CLR     42
1290:  BSET.B  81.7
....................    
.................... //!   duty[0] = 50;
.................... //!   duty[1] = 50;    
.................... //!   duty[2] = 50;  
.................... //!   
.................... //!   *(P1DC1+1) = duty[0]>>8;   *P1DC1 = duty[0];
....................    
....................   
....................    
....................     
....................    while(TRUE)         
....................    {
....................       
....................       if (tick) {
1292:  BTSS.B  D10.0
1294:  BRA     12E6
....................          raw_adc = read_adc();
1296:  BCLR.B  2A0.0
1298:  BSET.B  2A0.1
129A:  BTSS.B  2A0.0
129C:  BRA     129A
129E:  PUSH    280
12A0:  POP     D08
....................          if (raw_adc > 1023) 
12A2:  MOV     D08,W4
12A4:  MOV     #3FF,W3
12A6:  CP      W3,W4
12A8:  BRA     C,12AE
....................          {
....................             raw_adc = 1023;
12AA:  MOV     #3FF,W4
12AC:  MOV     W4,D08
....................          }
....................          raw_adc = raw_adc >> 2;
12AE:  LSR     D08
12B0:  LSR     D08
....................          throttle_level = raw_adc;  
12B2:  PUSH    D08
12B4:  POP     D0A
....................          if (throttle_level > 255)
12B6:  MOV     D0A,W4
12B8:  MOV     #FF,W3
12BA:  CP      W3,W4
12BC:  BRA     GE,12C2
....................          {
....................             throttle_level = 255;
12BE:  MOV     #FF,W4
12C0:  MOV     W4,D0A
....................          }
....................          if (throttle_level < 0)   
12C2:  MOV     D0A,W4
12C4:  CP      W4,#0
12C6:  BRA     GE,12CA
....................          {
....................             throttle_level = 0;
12C8:  CLR     D0A
....................          }                                      
....................          freq = throttle_level +8; 
12CA:  MOV     D0A,W4
12CC:  ADD     W4,#8,W0
12CE:  MOV     W0,D0C
....................          if (freq > max_freq) {
12D0:  MOV     D0C,W4
12D2:  MOV     #FA,W3
12D4:  CP      W3,W4
12D6:  BRA     C,12DC
....................             freq = max_freq;
12D8:  MOV     #FA,W4
12DA:  MOV     W4,D0C
....................          }
....................   //       peak_voltage = gain_table[throttle_level];
....................          peak_voltage = gain_table[55];  
12DC:  PUSH    B76
12DE:  POP     8B8
....................              
....................         
....................          output_bit(PWM_tick_pin , 0);
12E0:  BCLR.B  2CA.2
12E2:  BCLR.B  2C6.2
....................          tick = 0;      
12E4:  BCLR.B  D10.0
....................       } 
....................       
....................       if (uart_tick) 
12E6:  BTSS.B  D10.1
12E8:  BRA     136A
....................       {
....................          sprintf(Serial_OutputBuffer, "\r\n %d , %d , %d , %d", raw_adc , throttle_level , freq , peak_voltage);
12EA:  MOV     #D16,W4
12EC:  MOV     W4,D52
12EE:  MOV.B   #D,W0L
12F0:  CALL    3CC
12F4:  MOV.B   #A,W0L
12F6:  CALL    3CC
12FA:  MOV.B   #20,W0L
12FC:  CALL    3CC
1300:  MOV     D08,W0
1302:  MOV     #0,W4
1304:  CALL    FBA
1308:  MOV.B   #20,W0L
130A:  CALL    3CC
130E:  MOV.B   #2C,W0L
1310:  CALL    3CC
1314:  MOV.B   #20,W0L
1316:  CALL    3CC
131A:  MOV     D0A,W0
131C:  MOV     #0,W4
131E:  CALL    FBA
1322:  MOV.B   #20,W0L
1324:  CALL    3CC
1328:  MOV.B   #2C,W0L
132A:  CALL    3CC
132E:  MOV.B   #20,W0L
1330:  CALL    3CC
1334:  MOV     D0C,W0
1336:  MOV     #0,W4
1338:  CALL    FBA
133C:  MOV.B   #20,W0L
133E:  CALL    3CC
1342:  MOV.B   #2C,W0L
1344:  CALL    3CC
1348:  MOV.B   #20,W0L
134A:  CALL    3CC
134E:  MOV     8B8,W0
1350:  MOV     #0,W4
1352:  CALL    FBA
....................          printf(Serial_OutputBuffer);
1356:  MOV     #D16,W1
1358:  CP0.B   [W1]
135A:  BRA     Z,136A
135C:  BTSC.B  219.1
135E:  BRA     135C
1360:  MOV.B   [W1+#0],W0L
1362:  MOV.B   W0L,21A
1364:  CLR.B   21B
1366:  INC     W1,W1
1368:  BRA     1358
....................          
....................       
....................       }
136A:  BRA     1292
....................     } 
.................... }    
.................... 
136C:  PWRSAV  #0
.................... 
.................... void initMCPWM(void) 
.................... {    
....................    *(P1TCON+1)=0x80;  *P1TCON=0x02;
*
03DA:  MOV.B   #80,W0L
03DC:  MOV.B   W0L,1C1
03DE:  MOV.B   #2,W0L
03E0:  MOV.B   W0L,1C0
....................    *(P1TPER+1)=0x03;  *P1TPER=0xE7;  
03E2:  MOV.B   #3,W0L
03E4:  MOV.B   W0L,1C5
03E6:  MOV.B   #E7,W0L
03E8:  MOV.B   W0L,1C4
....................    *(P1SECMP+1)=0x00;  *P1SECMP=0x01; //
03EA:  CLR.B   1C7
03EC:  MOV.B   #1,W0L
03EE:  MOV.B   W0L,1C6
....................    *(PWM1CON1+1)=0x00;  *PWM1CON1=0x77;  
03F0:  CLR.B   1C9
03F2:  MOV.B   #77,W0L
03F4:  MOV.B   W0L,1C8
....................    *(PWM1CON2+1)=0x00;  *PWM1CON2=0x02;
03F6:  CLR.B   1CB
03F8:  MOV.B   #2,W0L
03FA:  MOV.B   W0L,1CA
....................    *(P1DTCON1+1)=0x00;  *P1DTCON1=0x10; //0x09
03FC:  CLR.B   1CD
03FE:  MOV.B   #10,W0L
0400:  MOV.B   W0L,1CC
....................    *(P1DTCON2+1)=0x00;  *P1DTCON2=0x00;
0402:  CLR.B   1CF
0404:  CLR.B   1CE
....................    *(P1FLTACON+1)=0x00;  *P1FLTACON=0x00; //0x0000
0406:  CLR.B   1D1
0408:  CLR.B   1D0
....................    *(P1OVDCON+1)=0x3F;  *P1OVDCON=0x0F;
040A:  MOV.B   #3F,W0L
040C:  MOV.B   W0L,1D5
040E:  MOV.B   #F,W0L
0410:  MOV.B   W0L,1D4
....................    *(P1DC1+1) = duty[0]>>8;   *P1DC1 = duty[0]; 
0412:  MOV.B   8B1,W0L
0414:  MOV.B   W0L,1D7
0416:  MOV.B   8B0,W0L
0418:  MOV.B   W0L,1D6
....................    *(P1DC2+1) = duty[1]>>8;   *P1DC2 = duty[1];
041A:  MOV.B   8B3,W0L
041C:  MOV.B   W0L,1D9
041E:  MOV.B   8B2,W0L
0420:  MOV.B   W0L,1D8
....................    *(P1DC3+1) = duty[2]>>8;   *P1DC3 = duty[2];  
0422:  MOV.B   8B5,W0L
0424:  MOV.B   W0L,1DB
0426:  MOV.B   8B4,W0L
0428:  MOV.B   W0L,1DA
....................    *(IPC14+1) =0x00;*(IPC14) =0x70;
042A:  CLR.B   C1
042C:  MOV.B   #70,W0L
042E:  MOV.B   W0L,C0
0430:  RETURN  
....................   }
.................... 
.................... 
....................    
.................... void fill_sine_table(void)
*
0CC6:  MOV     W5,[W15++]
0CC8:  MOV     W6,[W15++]
0CCA:  MOV     W7,[W15++]
0CCC:  MOV     W8,[W15++]
.................... {
....................    for(sine_index=0;sine_index < max_samples;sine_index++)  
0CCE:  CLR     902
0CD0:  MOV     902,W4
0CD2:  CP      W4,#1E
0CD4:  BRA     C,D84
....................    {
....................       theeta=sine_index*2.0*PI/max_samples;
0CD6:  MOV     902,W0
0CD8:  MOV     #0,W1
0CDA:  MOV     #0,W2
0CDC:  MOV     #0,W3
0CDE:  CALL    432
0CE2:  MOV     #0,W4
0CE4:  MOV     #0,W5
0CE6:  MOV     #0,W6
0CE8:  MOV     #4000,W7
0CEA:  CALL    49C
0CEE:  MOV     W0,W5
0CF0:  MOV     W1,W6
0CF2:  MOV     W2,W7
0CF4:  MOV     W3,W8
0CF6:  MOV     W5,[W15++]
0CF8:  MOV     W6,[W15++]
0CFA:  MOV     W7,[W15++]
0CFC:  MOV     W5,W0
0CFE:  MOV     W6,W1
0D00:  MOV     W7,W2
0D02:  MOV     W8,W3
0D04:  MOV     #2D18,W4
0D06:  MOV     #5444,W5
0D08:  MOV     #21FB,W6
0D0A:  MOV     #4009,W7
0D0C:  CALL    49C
0D10:  MOV     [--W15],W7
0D12:  MOV     [--W15],W6
0D14:  MOV     [--W15],W5
0D16:  MOV     W0,W5
0D18:  MOV     W1,W6
0D1A:  MOV     W2,W7
0D1C:  MOV     W3,W8
0D1E:  MOV     W5,[W15++]
0D20:  MOV     W6,[W15++]
0D22:  MOV     W7,[W15++]
0D24:  MOV     W5,W0
0D26:  MOV     W6,W1
0D28:  MOV     W7,W2
0D2A:  MOV     W8,W3
0D2C:  MOV     #0,W4
0D2E:  MOV     #0,W5
0D30:  MOV     #0,W6
0D32:  MOV     #403E,W7
0D34:  CALL    5AC
0D38:  MOV     [--W15],W7
0D3A:  MOV     [--W15],W6
0D3C:  MOV     [--W15],W5
0D3E:  MOV     W0,90A
0D40:  MOV     W1,90C
0D42:  MOV     W2,90E
0D44:  MOV     W3,910
....................       sine_table[sine_index]=255*sin(theeta);
0D46:  MOV     902,W0
0D48:  SL      W0,#1,W0
0D4A:  MOV     #8C6,W4
0D4C:  ADD     W0,W4,W5
0D4E:  PUSH    90A
0D50:  POP     D58
0D52:  PUSH    90C
0D54:  POP     D5A
0D56:  PUSH    90E
0D58:  POP     D5C
0D5A:  PUSH    910
0D5C:  POP     D5E
0D5E:  CALL    C2C
0D62:  MOV     W5,[W15++]
0D64:  MOV     W0,W4
0D66:  MOV     W1,W5
0D68:  MOV     W2,W6
0D6A:  MOV     W3,W7
0D6C:  MOV     #0,W0
0D6E:  MOV     #0,W1
0D70:  MOV     #E000,W2
0D72:  MOV     #406F,W3
0D74:  CALL    49C
0D78:  MOV     [--W15],W5
0D7A:  CALL    C68
0D7E:  MOV     W0,[W5]
0D80:  INC     0902
0D82:  BRA     CD0
....................    }
0D84:  MOV     [--W15],W8
0D86:  MOV     [--W15],W7
0D88:  MOV     [--W15],W6
0D8A:  MOV     [--W15],W5
0D8C:  RETURN  
.................... }
.................... 
.................... 
.................... void timer_reload(void) 
*
0DF8:  MOV     W5,[W15++]
0DFA:  MOV     #C,W5
0DFC:  REPEAT  #3
0DFE:  MOV     [W5++],[W15++]
0E00:  CLR     D54
0E02:  CLR     D56
0E04:  CLR     D58
0E06:  CLR     D5A
.................... {
....................    double intr_per_sample = 0.0;
....................    
....................    for (int sample = 1 ; sample <= max_freq ; sample++) 
0E08:  MOV     #1,W4
0E0A:  MOV     W4,D5C
0E0C:  MOV     D5C,W4
0E0E:  MOV     #FA,W3
0E10:  CP      W3,W4
0E12:  BRA     LT,EE4
....................    {
....................       intr_per_sample = ((1.0/sample)*1000)/max_samples;
0E14:  MOV     D5C,W0
0E16:  CLR     W3
0E18:  BTSC    W0.F
0E1A:  SETM    W3
0E1C:  MOV     W3,W1
0E1E:  MOV     W3,W2
0E20:  CALL    D8E
0E24:  MOV     W0,W4
0E26:  MOV     W1,W5
0E28:  MOV     W2,W6
0E2A:  MOV     W3,W7
0E2C:  MOV     #0,W0
0E2E:  MOV     #0,W1
0E30:  MOV     #0,W2
0E32:  MOV     #3FF0,W3
0E34:  CALL    5AC
0E38:  MOV     W0,W5
0E3A:  MOV     W1,W6
0E3C:  MOV     W2,W7
0E3E:  MOV     W3,W8
0E40:  MOV     W5,[W15++]
0E42:  MOV     W6,[W15++]
0E44:  MOV     W7,[W15++]
0E46:  MOV     W5,W0
0E48:  MOV     W6,W1
0E4A:  MOV     W7,W2
0E4C:  MOV     W8,W3
0E4E:  MOV     #0,W4
0E50:  MOV     #0,W5
0E52:  MOV     #4000,W6
0E54:  MOV     #408F,W7
0E56:  CALL    49C
0E5A:  MOV     [--W15],W7
0E5C:  MOV     [--W15],W6
0E5E:  MOV     [--W15],W5
0E60:  MOV     W0,W5
0E62:  MOV     W1,W6
0E64:  MOV     W2,W7
0E66:  MOV     W3,W8
0E68:  MOV     W5,[W15++]
0E6A:  MOV     W6,[W15++]
0E6C:  MOV     W7,[W15++]
0E6E:  MOV     W5,W0
0E70:  MOV     W6,W1
0E72:  MOV     W7,W2
0E74:  MOV     W8,W3
0E76:  MOV     #0,W4
0E78:  MOV     #0,W5
0E7A:  MOV     #0,W6
0E7C:  MOV     #403E,W7
0E7E:  CALL    5AC
0E82:  MOV     [--W15],W7
0E84:  MOV     [--W15],W6
0E86:  MOV     [--W15],W5
0E88:  MOV     W0,D54
0E8A:  MOV     W1,D56
0E8C:  MOV     W2,D58
0E8E:  MOV     W3,D5A
....................       timer_table[sample] = (intr_per_sample/per_clock_tick) - 100;     
0E90:  MOV     D5C,W4
0E92:  MUL.UU  W4,#2,W0
0E94:  MOV     #912,W4
0E96:  ADD     W0,W4,W5
0E98:  MOV     W5,[W15++]
0E9A:  MOV     D54,W0
0E9C:  MOV     D56,W1
0E9E:  MOV     D58,W2
0EA0:  MOV     D5A,W3
0EA2:  MOV     #A9FC,W4
0EA4:  MOV     #D2F1,W5
0EA6:  MOV     #624D,W6
0EA8:  MOV     #3F50,W7
0EAA:  CALL    5AC
0EAE:  MOV     [--W15],W5
0EB0:  MOV     W0,W6
0EB2:  MOV     W1,W7
0EB4:  MOV     W2,W8
0EB6:  MOV     W3,W9
0EB8:  BSET.B  43.0
0EBA:  MOV     W5,[W15++]
0EBC:  MOV     W6,[W15++]
0EBE:  MOV     W7,[W15++]
0EC0:  MOV     W6,W0
0EC2:  MOV     W7,W1
0EC4:  MOV     W8,W2
0EC6:  MOV     W9,W3
0EC8:  MOV     #0,W4
0ECA:  MOV     #0,W5
0ECC:  MOV     #0,W6
0ECE:  MOV     #4059,W7
0ED0:  CALL    6B4
0ED4:  MOV     [--W15],W7
0ED6:  MOV     [--W15],W6
0ED8:  MOV     [--W15],W5
0EDA:  CALL    926
0EDE:  MOV     W0,[W5]
0EE0:  INC     0D5C
0EE2:  BRA     E0C
....................    }
....................    timer_table[0] = timer_table[1];
0EE4:  PUSH    914
0EE6:  POP     912
0EE8:  MOV     #12,W5
0EEA:  REPEAT  #3
0EEC:  MOV     [--W15],[W5--]
0EEE:  MOV     [--W15],W5
0EF0:  RETURN  
....................    
....................    
.................... }
.................... 
.................... void voltage_gain(void) 
0EF2:  MOV     W5,[W15++]
0EF4:  MOV     W6,[W15++]
0EF6:  MOV     W7,[W15++]
0EF8:  MOV     W8,[W15++]
.................... {
....................    for (int i = 0 ; i <= break_level ; i++) {
0EFA:  CLR     D54
0EFC:  MOV     D54,W4
0EFE:  CP      W4,#5
0F00:  BRA     GT,F14
....................             gain_table[i] = 0; 
0F02:  MOV     D54,W4
0F04:  MUL.UU  W4,#2,W0
0F06:  MOV     #B08,W4
0F08:  ADD     W0,W4,W5
0F0A:  CLR.B   [W5]
0F0C:  MOV.B   #0,W0L
0F0E:  MOV.B   W0L,[W5+#1]
0F10:  INC     0D54
0F12:  BRA     EFC
....................    }
....................    
....................    for (int i = break_level+1 ; i <= sustain_level; i++) 
0F14:  MOV     #6,W4
0F16:  MOV     W4,D56
0F18:  MOV     D56,W4
0F1A:  MOV     #C8,W3
0F1C:  CP      W3,W4
0F1E:  BRA     LT,F90
....................    {
....................        temp = SLOPE * i + pedestal_amplitude;
0F20:  MOV     D56,W0
0F22:  CLR     W3
0F24:  BTSC    W0.F
0F26:  SETM    W3
0F28:  MOV     W3,W1
0F2A:  MOV     W3,W2
0F2C:  CALL    D8E
0F30:  MOV     W0,W4
0F32:  MOV     W1,W5
0F34:  MOV     W2,W6
0F36:  MOV     W3,W7
0F38:  MOV     #999A,W0
0F3A:  MOV     #9999,W1
0F3C:  MOV     #9999,W2
0F3E:  MOV     #4015,W3
0F40:  CALL    49C
0F44:  MOV     W0,W5
0F46:  MOV     W1,W6
0F48:  MOV     W2,W7
0F4A:  MOV     W3,W8
0F4C:  BCLR.B  43.0
0F4E:  MOV     W5,[W15++]
0F50:  MOV     W6,[W15++]
0F52:  MOV     W7,[W15++]
0F54:  MOV     W5,W0
0F56:  MOV     W6,W1
0F58:  MOV     W7,W2
0F5A:  MOV     W8,W3
0F5C:  MOV     #0,W4
0F5E:  MOV     #0,W5
0F60:  MOV     #0,W6
0F62:  MOV     #4014,W7
0F64:  CALL    6B4
0F68:  MOV     [--W15],W7
0F6A:  MOV     [--W15],W6
0F6C:  MOV     [--W15],W5
0F6E:  CALL    926
0F72:  MOV     W0,D0E
....................        if(temp > peak_amplitude ) 
0F74:  MOV     D0E,W4
0F76:  MOV     #3B6,W3
0F78:  CP      W3,W4
0F7A:  BRA     C,F80
....................        {
....................          temp = peak_amplitude;
0F7C:  MOV     #3B6,W4
0F7E:  MOV     W4,D0E
....................        }
....................        gain_table[i] = temp;
0F80:  MOV     D56,W4
0F82:  MUL.UU  W4,#2,W0
0F84:  MOV     #B08,W4
0F86:  ADD     W0,W4,W5
0F88:  MOV     D0E,W4
0F8A:  MOV     W4,[W5+#0]
0F8C:  INC     0D56
0F8E:  BRA     F18
....................    }
....................    for (int i = sustain_level+1 ; i <= 255; i++) {     
0F90:  MOV     #C9,W4
0F92:  MOV     W4,D58
0F94:  MOV     D58,W4
0F96:  MOV     #FF,W3
0F98:  CP      W3,W4
0F9A:  BRA     LT,FB0
....................       gain_table[i] = peak_amplitude;
0F9C:  MOV     D58,W4
0F9E:  MUL.UU  W4,#2,W0
0FA0:  MOV     #B08,W4
0FA2:  ADD     W0,W4,W5
0FA4:  MOV.B   #B6,W0L
0FA6:  MOV.B   W0L,[W5]
0FA8:  MOV.B   #3,W0L
0FAA:  MOV.B   W0L,[W5+#1]
0FAC:  INC     0D58
0FAE:  BRA     F94
....................    }
0FB0:  MOV     [--W15],W8
0FB2:  MOV     [--W15],W7
0FB4:  MOV     [--W15],W6
0FB6:  MOV     [--W15],W5
0FB8:  RETURN  
.................... 
.................... }
.................... 
.................... 
.................... 
.................... 

Configuration Fuses:
   Word  1L: 0306   XT_PLL8 PR CKSFSM
          H: 0000  
   Word  2L: 003F   WPSB16 WPSA512 NOWDT
          H: 0000  
   Word  3L: 8793   PUT64 BORV42 BROWNOUT LPOL_HIGH HPOL_HIGH NOPWMPIN MCLR
          H: 0000  
   Word  4L: 310F  
          H: 0000  
   Word  5L: 330F  
          H: 0000  
   Word  6L: 0004   WRT PROTECT
          H: 0000  
   Word  7L: C003   ICSP1 NODEBUG
          H: 0000  
