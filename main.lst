CCS PCD C Compiler, Version 5.112, 5967               07-May-24 14:11

               Filename:   C:\Users\eelab\Documents\dspic30f4011\main.lst

               ROM used:   5386 bytes (16%)
                           Largest free fragment is 27382
               RAM used:   490 (24%) at main() level
                           697 (34%) worst case
               Stack used: 96 locations (46 in main + 50 for interrupts)
               Stack size: 128

*
0000:  GOTO    11D6
*
001A:  DATA    A8,04,00
*
0020:  DATA    B8,06,00
*
0062:  DATA    18,04,00
.................... #include <30F4011.h>
.................... //////////// Standard Header file for the DSPIC30F4011 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device DSPIC30F4011
*
0100:  CLR     32
0102:  MOV     #156,W3
0104:  SUB     W0,W3,W3
0106:  BRA     C,110
0108:  MOV     #122,W3
010A:  ADD     W3,W0,W0
010C:  TBLRDL  [W0],W0
010E:  RETURN  
0110:  MOV     #122,W0
0112:  BCLR.B  6.0
0114:  ADD     W3,W3,W3
0116:  ADD     W3,W0,W3
0118:  TBLRDH  [W3++],W0
011A:  TBLRDH  [W3],W3
011C:  SL      W3,#8,W3
011E:  IOR      W3,  W0,W0
0120:  RETURN  
0122:  DATA    0C,04,76
0124:  DATA    0C,04,00
0126:  DATA    0C,04,74
0128:  DATA    0C,04,00
012A:  DATA    0C,04,72
012C:  DATA    0C,04,00
012E:  DATA    0C,04,70
0130:  DATA    0C,04,00
0132:  DATA    0C,04,6E
0134:  DATA    0C,04,00
0136:  DATA    0C,04,6C
0138:  DATA    0C,04,00
013A:  DATA    0C,04,6A
013C:  DATA    0C,04,00
013E:  DATA    0C,04,68
0140:  DATA    0C,04,00
0142:  DATA    0C,04,66
0144:  DATA    0C,04,00
0146:  DATA    0C,04,65
0148:  DATA    0C,04,00
014A:  DATA    0C,04,64
014C:  DATA    FD,03,00
014E:  DATA    EE,03,63
0150:  DATA    E0,03,00
0152:  DATA    D2,03,62
0154:  DATA    C4,03,00
0156:  DATA    B6,03,61
0158:  DATA    A8,03,00
015A:  DATA    9B,03,60
015C:  DATA    8E,03,00
015E:  DATA    81,03,5F
0160:  DATA    74,03,00
0162:  DATA    67,03,5E
0164:  DATA    5B,03,00
0166:  DATA    4F,03,5D
0168:  DATA    43,03,00
016A:  DATA    37,03,5C
016C:  DATA    2B,03,00
016E:  DATA    1F,03,5B
0170:  DATA    14,03,00
0172:  DATA    09,03,5A
0174:  DATA    FE,02,00
0176:  DATA    F3,02,59
0178:  DATA    E8,02,00
017A:  DATA    DD,02,58
017C:  DATA    D3,02,00
017E:  DATA    C9,02,57
0180:  DATA    BF,02,00
0182:  DATA    B5,02,56
0184:  DATA    AB,02,00
0186:  DATA    A1,02,55
0188:  DATA    97,02,00
018A:  DATA    8E,02,54
018C:  DATA    85,02,00
018E:  DATA    7C,02,53
0190:  DATA    73,02,00
0192:  DATA    6A,02,52
0194:  DATA    61,02,00
0196:  DATA    58,02,51
0198:  DATA    4F,02,00
019A:  DATA    47,02,50
019C:  DATA    3F,02,00
019E:  DATA    37,02,4F
01A0:  DATA    2F,02,00
01A2:  DATA    27,02,4E
01A4:  DATA    1F,02,00
01A6:  DATA    17,02,4D
01A8:  DATA    0F,02,00
01AA:  DATA    07,02,4C
01AC:  DATA    00,02,00
01AE:  DATA    F9,01,4B
01B0:  DATA    F2,01,00
01B2:  DATA    EB,01,4A
01B4:  DATA    E4,01,00
01B6:  DATA    DD,01,49
01B8:  DATA    D6,01,00
01BA:  DATA    CF,01,48
01BC:  DATA    C8,01,00
01BE:  DATA    C1,01,47
01C0:  DATA    BB,01,00
01C2:  DATA    B5,01,46
01C4:  DATA    AF,01,00
01C6:  DATA    A9,01,45
01C8:  DATA    A3,01,00
01CA:  DATA    9D,01,44
01CC:  DATA    97,01,00
01CE:  DATA    91,01,43
01D0:  DATA    8B,01,00
01D2:  DATA    85,01,42
01D4:  DATA    7F,01,00
01D6:  DATA    7A,01,41
01D8:  DATA    75,01,00
01DA:  DATA    70,01,40
01DC:  DATA    6B,01,00
01DE:  DATA    66,01,3F
01E0:  DATA    61,01,00
01E2:  DATA    5C,01,3E
01E4:  DATA    57,01,00
01E6:  DATA    52,01,3D
01E8:  DATA    4D,01,00
01EA:  DATA    48,01,3C
01EC:  DATA    43,01,00
01EE:  DATA    3E,01,3B
01F0:  DATA    39,01,00
01F2:  DATA    35,01,3A
01F4:  DATA    31,01,00
01F6:  DATA    2D,01,39
01F8:  DATA    29,01,00
01FA:  DATA    25,01,38
01FC:  DATA    21,01,00
01FE:  DATA    1D,01,37
0200:  DATA    19,01,00
0202:  DATA    15,01,36
0204:  DATA    11,01,00
0206:  DATA    0D,01,35
0208:  DATA    09,01,00
020A:  DATA    05,01,34
020C:  DATA    01,01,00
020E:  DATA    FD,00,33
0210:  DATA    F9,00,00
0212:  DATA    F5,00,32
0214:  DATA    F1,00,00
0216:  DATA    EE,00,31
0218:  DATA    EB,00,00
021A:  DATA    E8,00,30
021C:  DATA    E5,00,00
021E:  DATA    E2,00,2F
0220:  DATA    DF,00,00
0222:  DATA    DC,00,2E
0224:  DATA    D9,00,00
0226:  DATA    D6,00,2D
0228:  DATA    D3,00,00
022A:  DATA    D0,00,2C
022C:  DATA    CD,00,00
022E:  DATA    CA,00,2B
0230:  DATA    C7,00,00
0232:  DATA    C4,00,2A
0234:  DATA    C1,00,00
0236:  DATA    BE,00,29
0238:  DATA    BB,00,00
023A:  DATA    B8,00,28
023C:  DATA    B5,00,00
023E:  DATA    B2,00,27
0240:  DATA    AF,00,00
0242:  DATA    AC,00,26
0244:  DATA    AA,00,00
0246:  DATA    A8,00,25
0248:  DATA    A6,00,00
024A:  DATA    A4,00,24
024C:  DATA    A2,00,00
024E:  DATA    A0,00,23
0250:  DATA    9E,00,00
0252:  DATA    9C,00,22
0254:  DATA    9A,00,00
0256:  DATA    98,00,21
0258:  DATA    96,00,00
025A:  DATA    94,00,21
025C:  DATA    92,00,00
025E:  DATA    90,00,21
0260:  DATA    8E,00,00
0262:  DATA    8C,00,21
0264:  DATA    8A,00,00
0266:  DATA    88,00,21
0268:  DATA    86,00,00
026A:  DATA    84,00,21
026C:  DATA    82,00,00
026E:  DATA    80,00,21
0270:  DATA    7E,00,00
0272:  DATA    7C,00,21
0274:  DATA    7A,00,00
0276:  DATA    78,00,00
0278:  CLR     32
027A:  MOV     #156,W3
027C:  SUB     W0,W3,W3
027E:  BRA     C,288
0280:  MOV     #29A,W3
0282:  ADD     W3,W0,W0
0284:  TBLRDL  [W0],W0
0286:  RETURN  
0288:  MOV     #29A,W0
028A:  BCLR.B  6.0
028C:  ADD     W3,W3,W3
028E:  ADD     W3,W0,W3
0290:  TBLRDH  [W3++],W0
0292:  TBLRDH  [W3],W3
0294:  SL      W3,#8,W3
0296:  IOR      W3,  W0,W0
0298:  RETURN  
029A:  DATA    00,00,B1
029C:  DATA    00,00,00
029E:  DATA    00,00,B2
02A0:  DATA    00,00,00
02A2:  DATA    00,00,B4
02A4:  DATA    00,00,00
02A6:  DATA    00,00,B6
02A8:  DATA    00,00,00
02AA:  DATA    00,00,B8
02AC:  DATA    00,00,00
02AE:  DATA    00,00,BA
02B0:  DATA    00,00,00
02B2:  DATA    00,00,BC
02B4:  DATA    00,00,00
02B6:  DATA    00,00,BF
02B8:  DATA    00,00,00
02BA:  DATA    00,00,C1
02BC:  DATA    00,00,00
02BE:  DATA    00,00,C2
02C0:  DATA    00,00,00
02C2:  DATA    55,00,C3
02C4:  DATA    55,00,00
02C6:  DATA    55,00,C4
02C8:  DATA    56,00,00
02CA:  DATA    56,00,C6
02CC:  DATA    56,00,00
02CE:  DATA    56,00,C7
02D0:  DATA    56,00,00
02D2:  DATA    56,00,C8
02D4:  DATA    57,00,00
02D6:  DATA    57,00,C9
02D8:  DATA    57,00,00
02DA:  DATA    57,00,CB
02DC:  DATA    57,00,00
02DE:  DATA    58,00,CC
02E0:  DATA    58,00,00
02E2:  DATA    58,00,CE
02E4:  DATA    58,00,00
02E6:  DATA    58,00,CF
02E8:  DATA    59,00,00
02EA:  DATA    59,00,D1
02EC:  DATA    59,00,00
02EE:  DATA    59,00,D2
02F0:  DATA    5A,00,00
02F2:  DATA    5A,00,D4
02F4:  DATA    5A,00,00
02F6:  DATA    5A,00,D5
02F8:  DATA    5B,00,00
02FA:  DATA    5B,00,D7
02FC:  DATA    5B,00,00
02FE:  DATA    5B,00,D8
0300:  DATA    5C,00,00
0302:  DATA    5C,00,DA
0304:  DATA    5C,00,00
0306:  DATA    5C,00,DC
0308:  DATA    5D,00,00
030A:  DATA    5D,00,DE
030C:  DATA    5D,00,00
030E:  DATA    5E,00,DF
0310:  DATA    5E,00,00
0312:  DATA    5E,00,E1
0314:  DATA    5F,00,00
0316:  DATA    5F,00,E3
0318:  DATA    5F,00,00
031A:  DATA    5F,00,E5
031C:  DATA    60,00,00
031E:  DATA    60,00,E7
0320:  DATA    60,00,00
0322:  DATA    61,00,E9
0324:  DATA    61,00,00
0326:  DATA    61,00,EB
0328:  DATA    62,00,00
032A:  DATA    62,00,ED
032C:  DATA    62,00,00
032E:  DATA    63,00,F0
0330:  DATA    63,00,00
0332:  DATA    64,00,F2
0334:  DATA    64,00,00
0336:  DATA    65,00,F4
0338:  DATA    65,00,00
033A:  DATA    65,00,F7
033C:  DATA    66,00,00
033E:  DATA    66,00,F9
0340:  DATA    66,00,00
0342:  DATA    67,00,FC
0344:  DATA    67,00,00
0346:  DATA    68,00,FE
0348:  DATA    68,00,00
034A:  DATA    69,00,01
034C:  DATA    69,00,01
034E:  DATA    6A,00,04
0350:  DATA    6A,00,01
0352:  DATA    6A,00,07
0354:  DATA    6B,00,01
0356:  DATA    6B,00,0A
0358:  DATA    6C,00,01
035A:  DATA    6C,00,0D
035C:  DATA    6D,00,01
035E:  DATA    6E,00,10
0360:  DATA    6E,00,01
0362:  DATA    6F,00,13
0364:  DATA    6F,00,01
0366:  DATA    70,00,17
0368:  DATA    70,00,01
036A:  DATA    71,00,1A
036C:  DATA    71,00,01
036E:  DATA    72,00,1E
0370:  DATA    72,00,01
0372:  DATA    73,00,21
0374:  DATA    74,00,01
0376:  DATA    74,00,25
0378:  DATA    75,00,01
037A:  DATA    75,00,29
037C:  DATA    76,00,01
037E:  DATA    77,00,2D
0380:  DATA    78,00,01
0382:  DATA    78,00,32
0384:  DATA    79,00,01
0386:  DATA    7A,00,36
0388:  DATA    7A,00,01
038A:  DATA    7B,00,3B
038C:  DATA    7C,00,01
038E:  DATA    7D,00,40
0390:  DATA    7D,00,01
0392:  DATA    7E,00,45
0394:  DATA    7F,00,01
0396:  DATA    7F,00,4A
0398:  DATA    80,00,01
039A:  DATA    81,00,4F
039C:  DATA    82,00,01
039E:  DATA    82,00,55
03A0:  DATA    83,00,01
03A2:  DATA    84,00,5B
03A4:  DATA    85,00,01
03A6:  DATA    86,00,61
03A8:  DATA    87,00,01
03AA:  DATA    88,00,68
03AC:  DATA    89,00,01
03AE:  DATA    8A,00,6F
03B0:  DATA    8B,00,01
03B2:  DATA    8C,00,76
03B4:  DATA    8D,00,01
03B6:  DATA    8E,00,7D
03B8:  DATA    8F,00,01
03BA:  DATA    90,00,85
03BC:  DATA    91,00,01
03BE:  DATA    92,00,8D
03C0:  DATA    93,00,01
03C2:  DATA    94,00,96
03C4:  DATA    95,00,01
03C6:  DATA    96,00,9F
03C8:  DATA    97,00,01
03CA:  DATA    98,00,A9
03CC:  DATA    99,00,01
03CE:  DATA    9A,00,B4
03D0:  DATA    9B,00,01
03D2:  DATA    9C,00,B4
03D4:  DATA    9D,00,01
03D6:  DATA    9E,00,B4
03D8:  DATA    9F,00,01
03DA:  DATA    A1,00,B4
03DC:  DATA    A2,00,01
03DE:  DATA    A3,00,B4
03E0:  DATA    A4,00,01
03E2:  DATA    A6,00,B4
03E4:  DATA    A7,00,01
03E6:  DATA    A9,00,B4
03E8:  DATA    AA,00,01
03EA:  DATA    AC,00,B4
03EC:  DATA    AD,00,01
03EE:  DATA    AF,00,00
03F0:  CLR     32
03F2:  MOV     #3FC,W3
03F4:  ADD     W3,W0,W0
03F6:  TBLRDL.B[W0],W0L
03F8:  CLR.B   1
03FA:  RETURN  
03FC:  DATA    0A,4D,00
03FE:  DATA    6F,74,00
0400:  DATA    6F,72,00
0402:  DATA    20,43,00
0404:  DATA    6F,6E,00
0406:  DATA    74,72,00
0408:  DATA    6F,6C,00
040A:  DATA    20,55,00
040C:  DATA    6E,69,00
040E:  DATA    74,20,00
0410:  DATA    76,30,00
0412:  DATA    2E,31,00
0414:  DATA    0D,0A,00
0416:  DATA    00,00,00
*
0466:  MOV     W5,[W15++]
0468:  MOV     #C,W5
046A:  REPEAT  #3
046C:  MOV     [W5++],[W15++]
046E:  MUL.UU  W0,W2,W4
0470:  BTSS    W3.F
0472:  BRA     478
0474:  MUL.SS  W0,W3,W6
0476:  BRA     47A
0478:  MUL.UU  W0,W3,W6
047A:  BCLR.B  42.0
047C:  ADD     W6,W5,W5
047E:  ADDC    W7,#0,W8
0480:  BTSS    W1.F
0482:  BRA     488
0484:  MUL.SS  W1,W2,W6
0486:  BRA     48A
0488:  MUL.UU  W1,W2,W6
048A:  ADDC    W6,W5,W5
048C:  ADDC    W7,W8,W8
048E:  ADDC    #0,W9
0490:  MUL.SS  W1,W3,W6
0492:  ADDC    W6,W8,W8
0494:  ADDC    W9,W7,W7
0496:  MOV     W7,W3
0498:  MOV     W8,W2
049A:  MOV     W5,W1
049C:  MOV     W4,W0
049E:  MOV     #12,W5
04A0:  REPEAT  #3
04A2:  MOV     [--W15],[W5--]
04A4:  MOV     [--W15],W5
04A6:  RETURN  
*
06E4:  MOV     W1,[W15++]
06E6:  MOV     968,W1
06E8:  MOV.B   W0L,[W1++]
06EA:  CLR.B   [W1]
06EC:  MOV     [--W15],W1
06EE:  INC     0968
06F0:  RETURN  
*
074A:  MOV     W5,[W15++]
074C:  MOV     #C,W5
074E:  REPEAT  #3
0750:  MOV     [W5++],[W15++]
0752:  MOV     W0,W4
0754:  MOV     W1,W5
0756:  MOV     W2,W6
0758:  MOV     W3,W7
075A:  CLR     W0
075C:  CLR     W1
075E:  CLR     W2
0760:  CLR     W3
0762:  BCLR    W8.0
0764:  BTSS    W7.F
0766:  BRA     778
0768:  BSET    W8.0
076A:  COM     W7,W7
076C:  COM     W6,W6
076E:  COM     W5,W5
0770:  NEG     W4,W4
0772:  ADDC    W5,#0,W5
0774:  ADDC    W6,#0,W6
0776:  ADDC    W7,#0,W7
0778:  IOR      W4,  W5,W9
077A:  BRA     NZ,780
077C:  IOR      W6,  W7,W9
077E:  BRA     Z,7AA
0780:  MOV     #473,W9
0782:  BTSC    W3.4
0784:  BRA     79C
0786:  BCLR.B  42.0
0788:  RLC     W4,W4
078A:  RLC     W5,W5
078C:  RLC     W6,W6
078E:  RLC     W7,W7
0790:  RLC     W0,W0
0792:  RLC     W1,W1
0794:  RLC     W2,W2
0796:  RLC     W3,W3
0798:  DEC     W9,W9
079A:  BRA     NZ,782
079C:  SL      W9,#4,W9
079E:  BCLR.B  42.0
07A0:  BCLR    W9.F
07A2:  BCLR    W3.4
07A4:  XOR     W9,W3,W3
07A6:  BTSC    W8.0
07A8:  BSET    W3.F
07AA:  MOV     #12,W5
07AC:  REPEAT  #3
07AE:  MOV     [--W15],[W5--]
07B0:  MOV     [--W15],W5
07B2:  RETURN  
07B4:  MOV     W8,[W15++]
07B6:  MOV     #12,W8
07B8:  REPEAT  #4
07BA:  MOV     [W8++],[W15++]
07BC:  CLR     W11
07BE:  MUL.UU  W12,#0,W12
07C0:  MOV     W3,W8
07C2:  MOV     W7,W9
07C4:  MOV     #7FF,W10
07C6:  BCLR.B  42.0
07C8:  BCLR.B  42.1
07CA:  ASR     W8,#4,W8
07CC:  AND     W10,W8,W8
07CE:  CP0     W8
07D0:  BRA     Z,8B4
07D2:  BCLR.B  42.0
07D4:  BCLR.B  42.1
07D6:  ASR     W9,#4,W9
07D8:  AND     W10,W9,W9
07DA:  CP0     W9
07DC:  BRA     Z,8B4
07DE:  ADD     W9,W8,W8
07E0:  BTSC    W9.B
07E2:  BRA     7EC
07E4:  SUB     #3FF,W8
07E6:  BRA     Z,8B4
07E8:  BRA     NC,8B4
07EA:  BRA     7F2
07EC:  MOV     #401,W10
07EE:  ADD.B   W10L,W5L,W5L
07F0:  BRA     C,8B4
07F2:  XOR     W3,W7,W13
07F4:  BCLR.B  42.0
07F6:  BCLR.B  42.1
07F8:  AND     #F,W3
07FA:  BSET    W3.4
07FC:  AND     #F,W7
07FE:  BSET    W7.4
0800:  MOV     W8,[W15++]
0802:  MUL.UU  W4,W1,W8
0804:  MUL.UU  W5,W0,W10
0806:  ADD     W8,W10,W10
0808:  ADDC    W9,W11,W11
080A:  ADDC    #0,W12
080C:  MUL.UU  W4,W2,W8
080E:  ADD     W8,W11,W11
0810:  ADDC    W9,W12,W12
0812:  MUL.UU  W5,W1,W8
0814:  CLR     W10
0816:  ADD     W8,W11,W11
0818:  ADDC    W9,W12,W12
081A:  ADDC    #0,W10
081C:  MUL.UU  W6,W0,W8
081E:  ADD     W8,W11,W11
0820:  ADDC    W9,W12,W12
0822:  ADDC    #0,W10
0824:  CLR     W11
0826:  MUL.UU  W4,W3,W8
0828:  ADD     W8,W12,W12
082A:  ADDC    W9,W10,W10
082C:  ADDC    #0,W11
082E:  MUL.UU  W5,W2,W8
0830:  ADD     W8,W12,W12
0832:  ADDC    W9,W10,W10
0834:  ADDC    #0,W11
0836:  MUL.UU  W6,W1,W8
0838:  ADD     W8,W12,W12
083A:  ADDC    W9,W10,W10
083C:  ADDC    #0,W11
083E:  MUL.UU  W7,W0,W8
0840:  ADD     W8,W12,W12
0842:  ADDC    W9,W10,W10
0844:  ADDC    #0,W11
0846:  MOV     W12,W0
0848:  CLR     W12
084A:  MUL.UU  W5,W3,W8
084C:  ADD     W8,W10,W10
084E:  ADDC    W9,W11,W11
0850:  ADDC    #0,W12
0852:  MUL.UU  W6,W2,W8
0854:  ADD     W8,W10,W10
0856:  ADDC    W9,W11,W11
0858:  ADDC    #0,W12
085A:  MUL.UU  W6,W3,W8
085C:  ADD     W8,W11,W11
085E:  ADDC    W9,W12,W12
0860:  MUL.UU  W7,W1,W8
0862:  ADD     W8,W10,W10
0864:  ADDC    W9,W11,W11
0866:  ADDC    #0,W12
0868:  MUL.UU  W7,W2,W8
086A:  ADD     W8,W11,W11
086C:  ADDC    W9,W12,W12
086E:  MUL.UU  W7,W3,W8
0870:  ADD     W8,W12,W12
0872:  MOV     W10,W1
0874:  MOV     W11,W2
0876:  MOV     W12,W3
0878:  MOV     #5,W4
087A:  BCLR.B  42.0
087C:  RRC     W3,W3
087E:  RRC     W2,W2
0880:  RRC     W1,W1
0882:  RRC     W0,W0
0884:  DEC     W4,W4
0886:  BRA     NZ,87A
0888:  MOV     [--W15],W8
088A:  INC     W8,W8
088C:  IOR      W0,  W1,W6
088E:  BRA     Z,892
0890:  BRA     896
0892:  IOR      W2,  W3,W6
0894:  BRA     Z,8A6
0896:  BTSC    W3.4
0898:  BRA     8A6
089A:  BCLR.B  42.0
089C:  RLC     W0,W0
089E:  RLC     W1,W1
08A0:  RLC     W2,W2
08A2:  RLC     W3,W3
08A4:  DEC     W8,W8
08A6:  SL      W8,#4,W8
08A8:  BCLR    W3.F
08AA:  BTSC    W13.F
08AC:  BSET    W3.F
08AE:  BCLR    W3.4
08B0:  XOR     W8,W3,W3
08B2:  BRA     8BA
08B4:  MUL.UU  W0,#0,W0
08B6:  MUL.UU  W0,#0,W2
08B8:  BRA     8BA
08BA:  MOV     #1A,W8
08BC:  REPEAT  #4
08BE:  MOV     [--W15],[W8--]
08C0:  MOV     [--W15],W8
08C2:  RETURN  
08C4:  MOV     W8,[W15++]
08C6:  MOV     #12,W8
08C8:  REPEAT  #4
08CA:  MOV     [W8++],[W15++]
08CC:  XOR     W3,W7,W13
08CE:  MOV     W3,W8
08D0:  MOV     W7,W9
08D2:  MOV     #7FF,W10
08D4:  BCLR.B  42.0
08D6:  BCLR.B  42.1
08D8:  ASR     W8,#4,W8
08DA:  AND     W10,W8,W8
08DC:  CP0     W8
08DE:  BRA     Z,9B8
08E0:  BCLR.B  42.0
08E2:  BCLR.B  42.1
08E4:  ASR     W9,#4,W9
08E6:  AND     W10,W9,W9
08E8:  CP0     W9
08EA:  BRA     Z,9B8
08EC:  CLR     W10
08EE:  SUB     W8,W9,W12
08F0:  BRA     NC,8F8
08F2:  ADD     #3FF,W12
08F4:  BRA     C,9B8
08F6:  BRA     900
08F8:  MOV     #401,W11
08FA:  SUB     W12,W11,W12
08FC:  BRA     NC,9B8
08FE:  BRA     Z,9B8
0900:  CLR     W8
0902:  CLR     W9
0904:  CLR     W10
0906:  CLR     W11
0908:  AND     #1F,W3
090A:  BSET    W3.4
090C:  AND     #1F,W7
090E:  BSET    W7.4
0910:  MOV     W12,[W15++]
0912:  MOV     #36,W12
0914:  SUB     W0,W4,W0
0916:  SUBB    W1,W5,W1
0918:  SUBB    W2,W6,W2
091A:  SUBB    W3,W7,W3
091C:  BRA     N,922
091E:  BRA     C,92C
0920:  BRA     NZ,92E
0922:  ADD     W0,W4,W0
0924:  ADDC    W1,W5,W1
0926:  ADDC    W2,W6,W2
0928:  ADDC    W3,W7,W3
092A:  BRA     92E
092C:  BSET    W8.0
092E:  DEC     W12,W12
0930:  BRA     Z,948
0932:  BCLR.B  42.0
0934:  RLC     W0,W0
0936:  RLC     W1,W1
0938:  RLC     W2,W2
093A:  RLC     W3,W3
093C:  BCLR.B  42.0
093E:  RLC     W8,W8
0940:  RLC     W9,W9
0942:  RLC     W10,W10
0944:  RLC     W11,W11
0946:  BRA     914
0948:  MOV     [--W15],W12
094A:  BTSC    W11.5
094C:  BRA     950
094E:  BRA     95C
0950:  BCLR.B  42.0
0952:  RRC     W11,W11
0954:  RRC     W10,W10
0956:  RRC     W9,W9
0958:  RRC     W8,W8
095A:  BRA     962
095C:  DEC     W12,W12
095E:  BCLR.B  42.0
0960:  BRA     Z,9B8
0962:  BTSC.B  42.0
0964:  BRA     978
0966:  RLC     W0,W0
0968:  RLC     W1,W1
096A:  RLC     W2,W2
096C:  RLC     W3,W3
096E:  SUB     W0,W4,W4
0970:  SUBB    W1,W5,W5
0972:  SUBB    W2,W6,W6
0974:  SUBB    W3,W7,W7
0976:  BRA     NC,9A2
0978:  INC     W8,W8
097A:  BRA     NZ,9A2
097C:  INC     W9,W9
097E:  BRA     NZ,9A2
0980:  INC     W10,W10
0982:  BRA     NZ,9A2
0984:  INC     W11,W11
0986:  BRA     NZ,9A2
0988:  INC     W12,W12
098A:  BRA     Z,9B8
098C:  BRA     9A2
098E:  DEC     W12,W12
0990:  BRA     Z,9B8
0992:  BTSC    W11.4
0994:  BRA     9A2
0996:  BCLR.B  42.0
0998:  RLC     W8,W8
099A:  RLC     W9,W9
099C:  RLC     W10,W10
099E:  RLC     W11,W11
09A0:  BRA     992
09A2:  SL      W12,#4,W12
09A4:  BCLR.B  42.0
09A6:  BCLR    W12.F
09A8:  BTSC    W13.F
09AA:  BSET    W12.F
09AC:  BCLR    W11.4
09AE:  XOR     W12,W11,W3
09B0:  MOV     W10,W2
09B2:  MOV     W9,W1
09B4:  MOV     W8,W0
09B6:  BRA     9C2
09B8:  MOV     #0,W0
09BA:  MOV     #0,W1
09BC:  MOV     #0,W2
09BE:  MOV     #0,W3
09C0:  BRA     9C2
09C2:  MOV     #1A,W8
09C4:  REPEAT  #4
09C6:  MOV     [--W15],[W8--]
09C8:  MOV     [--W15],W8
09CA:  RETURN  
09CC:  MOV     W8,[W15++]
09CE:  MOV     #12,W8
09D0:  REPEAT  #4
09D2:  MOV     [W8++],[W15++]
09D4:  MOV     #8000,W8
09D6:  BTSC.B  43.0
09D8:  XOR     W8,W7,W7
09DA:  CP0     W0
09DC:  BRA     NZ,9EC
09DE:  CP0     W1
09E0:  BRA     NZ,9EC
09E2:  CP0     W2
09E4:  BRA     NZ,9EC
09E6:  MOV     #7FFF,W10
09E8:  AND     W3,W10,W10
09EA:  BTSS.B  42.1
09EC:  MOV     W3,W10
09EE:  XOR     W7,W10,W11
09F0:  MOV     W3,W8
09F2:  MOV     W7,W9
09F4:  MOV     W7,W12
09F6:  MOV     #7FF,W13
09F8:  BCLR.B  42.1
09FA:  BCLR.B  42.0
09FC:  ASR     W8,#4,W8
09FE:  AND     W13,W8,W8
0A00:  CP0     W8
0A02:  BRA     Z,B7C
0A04:  BCLR.B  42.1
0A06:  BCLR.B  42.0
0A08:  ASR     W9,#4,W9
0A0A:  AND     W13,W9,W9
0A0C:  CP0     W9
0A0E:  BRA     Z,B8C
0A10:  CLR     W13
0A12:  BCLR.B  42.1
0A14:  BCLR.B  42.0
0A16:  CP      W9,W8
0A18:  BRA     Z,B8E
0A1A:  BRA     N,B9E
0A1C:  BCLR    W13.0
0A1E:  BSET    W13.1
0A20:  SUB     W9,W8,W8
0A22:  AND     #F,W3
0A24:  BSET    W3.4
0A26:  AND     #F,W7
0A28:  BSET    W7.4
0A2A:  SUB     #34,W8
0A2C:  BRA     NN,A5A
0A2E:  ADD     #34,W8
0A30:  BCLR.B  42.1
0A32:  BCLR.B  42.0
0A34:  RRC     W3,W3
0A36:  RRC     W2,W2
0A38:  RRC     W1,W1
0A3A:  RRC     W0,W0
0A3C:  DEC     W8,W8
0A3E:  BRA     NZ,A30
0A40:  BRA     A6A
0A42:  SUB     #34,W8
0A44:  BRA     NN,A64
0A46:  ADD     #34,W8
0A48:  BCLR.B  42.1
0A4A:  BCLR.B  42.0
0A4C:  RRC     W7,W7
0A4E:  RRC     W6,W6
0A50:  RRC     W5,W5
0A52:  RRC     W4,W4
0A54:  DEC     W8,W8
0A56:  BRA     NZ,A48
0A58:  BRA     A90
0A5A:  MOV     W4,W0
0A5C:  MOV     W5,W1
0A5E:  MOV     W6,W2
0A60:  MOV     W7,W3
0A62:  XOR     W11,W12,W12
0A64:  BTSC    W12.F
0A66:  BTG     W11.F
0A68:  BRA     B5C
0A6A:  BTSS    W11.F
0A6C:  BRA     AAC
0A6E:  BTSC    W13.4
0A70:  MOV     W12,W11
0A72:  COM     W0,W0
0A74:  COM     W1,W1
0A76:  COM     W2,W2
0A78:  COM.B   W3L,W3L
0A7A:  AND.B   #1F,W3L
0A7C:  INC     W0,W0
0A7E:  BRA     NZ,A8A
0A80:  INC     W1,W1
0A82:  BRA     NZ,A8A
0A84:  INC     W2,W2
0A86:  BRA     NZ,A8A
0A88:  INC.B   W3L,W3L
0A8A:  BTSC    W13.4
0A8C:  BRA     AF2
0A8E:  BRA     AAC
0A90:  BTSS    W11.F
0A92:  BRA     AAC
0A94:  COM     W4,W4
0A96:  COM     W5,W5
0A98:  COM     W6,W6
0A9A:  COM.B   W7L,W7L
0A9C:  AND.B   #1F,W7L
0A9E:  INC     W4,W4
0AA0:  BRA     NZ,AAC
0AA2:  INC     W5,W5
0AA4:  BRA     NZ,AAC
0AA6:  INC     W6,W6
0AA8:  BRA     NZ,AAC
0AAA:  INC.B   W7L,W7L
0AAC:  BCLR.B  42.1
0AAE:  BCLR.B  42.0
0AB0:  ADD     W0,W4,W0
0AB2:  ADDC    W1,W5,W1
0AB4:  ADDC    W2,W6,W2
0AB6:  ADDC.B  W3L,W7L,W3L
0AB8:  BTSC    W3.5
0ABA:  BSET    W13.3
0ABC:  BTSC    W13.0
0ABE:  BRA     AD2
0AC0:  BTSC    W13.1
0AC2:  BRA     AC6
0AC4:  BRA     ADC
0AC6:  BTSC    W11.F
0AC8:  BRA     AF2
0ACA:  BTSC    W13.3
0ACC:  BRA     B20
0ACE:  BSET    W13.6
0AD0:  BRA     B14
0AD2:  BTSC    W11.F
0AD4:  BRA     AF2
0AD6:  BTSC    W13.3
0AD8:  BRA     B20
0ADA:  BRA     B14
0ADC:  BTSC    W11.F
0ADE:  BRA     AE8
0AE0:  MOV     W10,W11
0AE2:  BTSC    W13.3
0AE4:  BRA     B20
0AE6:  BRA     B5C
0AE8:  BSET    W13.4
0AEA:  XOR.B   #10,W3L
0AEC:  BTSC    W3.4
0AEE:  BRA     A6E
0AF0:  MOV     W10,W11
0AF2:  AND     #1F,W3
0AF4:  IOR      W3,  W2,W8
0AF6:  BRA     NZ,AFC
0AF8:  IOR      W1,  W0,W8
0AFA:  BRA     Z,B14
0AFC:  BTSC    W3.4
0AFE:  BRA     B14
0B00:  BCLR.B  42.1
0B02:  BCLR.B  42.0
0B04:  RLC     W0,W0
0B06:  RLC     W1,W1
0B08:  RLC     W2,W2
0B0A:  RLC     W3,W3
0B0C:  DEC     W9,W9
0B0E:  BTSC.B  42.1
0B10:  BRA     B76
0B12:  BRA     AFC
0B14:  BTSC    W13.0
0B16:  MOV     W10,W11
0B18:  BTSC    W13.1
0B1A:  MOV     W12,W11
0B1C:  BTSS    W13.5
0B1E:  BRA     B5C
0B20:  BCLR.B  42.0
0B22:  RRC.B   W3L,W3L
0B24:  RRC     W2,W2
0B26:  RRC     W1,W1
0B28:  RRC     W0,W0
0B2A:  BTSC.B  42.0
0B2C:  BSET    W13.5
0B2E:  INC     W9,W9
0B30:  BTSC.B  42.1
0B32:  BRA     B76
0B34:  BTSS    W13.5
0B36:  BRA     B54
0B38:  INC     W0,W0
0B3A:  BRA     NZ,B54
0B3C:  INC     W1,W1
0B3E:  BRA     NZ,B54
0B40:  INC     W2,W2
0B42:  BRA     NZ,B54
0B44:  INC     W3,W3
0B46:  BRA     NZ,B54
0B48:  RRC.B   W3L,W3L
0B4A:  RRC     W2,W2
0B4C:  RRC     W1,W1
0B4E:  RRC     W0,W0
0B50:  INC     W9,W9
0B52:  BRA     Z,B76
0B54:  BTSC    W13.0
0B56:  MOV     W10,W11
0B58:  BTSC    W13.1
0B5A:  MOV     W12,W11
0B5C:  IOR      W0,  W1,W4
0B5E:  BRA     NZ,B64
0B60:  IOR      W2,  W3,W4
0B62:  BRA     Z,BB0
0B64:  BCLR    W3.4
0B66:  BCLR.B  42.1
0B68:  BCLR.B  42.0
0B6A:  SL      W9,#4,W9
0B6C:  XOR     W9,W3,W3
0B6E:  BSET    W3.F
0B70:  BTSS    W11.F
0B72:  BCLR    W3.F
0B74:  BRA     BB0
0B76:  MUL.UU  W0,#0,W0
0B78:  MUL.UU  W2,#0,W2
0B7A:  BRA     BB0
0B7C:  MOV     #8000,W8
0B7E:  BTSC    W10.F
0B80:  XOR     W8,W7,W7
0B82:  MOV     W5,W1
0B84:  MOV     W4,W0
0B86:  MOV     W6,W2
0B88:  MOV     W7,W3
0B8A:  BRA     BB0
0B8C:  BRA     BB0
0B8E:  AND     #F,W7
0B90:  BSET    W7.4
0B92:  AND     #F,W3
0B94:  BSET    W3.4
0B96:  BTSC    W11.F
0B98:  BCLR    W7.4
0B9A:  BSET    W13.2
0B9C:  BRA     A90
0B9E:  AND     #F,W3
0BA0:  BSET    W3.4
0BA2:  AND     #F,W7
0BA4:  BSET    W7.4
0BA6:  SUB     W8,W9,W8
0BA8:  ADD     W8,W9,W9
0BAA:  BCLR    W13.1
0BAC:  BSET    W13.0
0BAE:  BRA     A42
0BB0:  MOV     #1A,W8
0BB2:  REPEAT  #4
0BB4:  MOV     [--W15],[W8--]
0BB6:  MOV     [--W15],W8
0BB8:  RETURN  
0BBA:  MOV     W8,[W15++]
0BBC:  MOV     W9,[W15++]
0BBE:  MOV     W10,[W15++]
0BC0:  XOR     W3,W7,W9
0BC2:  BTSS    W9.F
0BC4:  BRA     BD2
0BC6:  BCLR.B  42.0
0BC8:  BCLR.B  42.1
0BCA:  BTSS    W3.F
0BCC:  BRA     C36
0BCE:  BSET.B  42.0
0BD0:  BRA     C36
0BD2:  MOV     #7FF,W10
0BD4:  MOV     W3,W8
0BD6:  MOV     W7,W9
0BD8:  ASR     W8,#4,W8
0BDA:  AND     W10,W8,W8
0BDC:  ASR     W9,#4,W9
0BDE:  AND     W10,W9,W9
0BE0:  SUB     W9,W8,W10
0BE2:  BRA     Z,BEE
0BE4:  BTSS    W3.F
0BE6:  BRA     C36
0BE8:  MOV     #1,W0
0BEA:  XOR.B   42
0BEC:  BRA     C36
0BEE:  MOV     W3,W8
0BF0:  MOV     W7,W9
0BF2:  AND     #1F,W3
0BF4:  AND     #1F,W7
0BF6:  BCLR    W3.4
0BF8:  BCLR    W7.4
0BFA:  SUB.B   W7L,W3L,W10L
0BFC:  BRA     Z,C08
0BFE:  BTSS    W8.F
0C00:  BRA     C36
0C02:  MOV     #1,W0
0C04:  XOR.B   42
0C06:  BRA     C36
0C08:  SUB     W6,W2,W10
0C0A:  BRA     Z,C16
0C0C:  BTSS    W8.F
0C0E:  BRA     C36
0C10:  MOV     #1,W0
0C12:  XOR.B   42
0C14:  BRA     C36
0C16:  SUB     W5,W1,W10
0C18:  BRA     Z,C24
0C1A:  BTSS    W8.F
0C1C:  BRA     C36
0C1E:  MOV     #1,W0
0C20:  XOR.B   42
0C22:  BRA     C36
0C24:  SUB     W4,W0,W10
0C26:  BRA     Z,C32
0C28:  BTSS    W8.F
0C2A:  BRA     C36
0C2C:  MOV     #1,W0
0C2E:  XOR.B   42
0C30:  BRA     C36
0C32:  BCLR.B  42.0
0C34:  BRA     C36
0C36:  MOV     [--W15],W10
0C38:  MOV     [--W15],W9
0C3A:  MOV     [--W15],W8
0C3C:  RETURN  
0C3E:  MOV     W5,[W15++]
0C40:  MOV     #C,W5
0C42:  REPEAT  #5
0C44:  MOV     [W5++],[W15++]
0C46:  MOV     W3,W8
0C48:  MOV     W2,W7
0C4A:  MOV     W1,W6
0C4C:  MOV     W0,W5
0C4E:  MOV     W3,W9
0C50:  MOV     #473,W11
0C52:  ASR     W3,#4,W3
0C54:  MOV     #7FF,W10
0C56:  AND     W10,W3,W3
0C58:  SUB     W11,W3,W11
0C5A:  AND     #1F,W8
0C5C:  BSET    W8.4
0C5E:  CLR     W0
0C60:  CLR     W1
0C62:  CLR     W2
0C64:  CLR     W3
0C66:  BCLR.B  42.0
0C68:  RRC     W8,W8
0C6A:  RRC     W7,W7
0C6C:  RRC     W6,W6
0C6E:  RRC     W5,W5
0C70:  RRC     W3,W3
0C72:  RRC     W2,W2
0C74:  RRC     W1,W1
0C76:  RRC     W0,W0
0C78:  DEC     W11,W11
0C7A:  BRA     NZ,C66
0C7C:  BTSS    W9.F
0C7E:  BRA     C92
0C80:  COM     W0,W0
0C82:  COM     W1,W1
0C84:  COM     W2,W2
0C86:  COM     W3,W3
0C88:  INC     W0,W0
0C8A:  ADDC    #0,W1
0C8C:  ADDC    #0,W2
0C8E:  ADDC    #0,W3
0C90:  BRA     C92
0C92:  MOV     #16,W5
0C94:  REPEAT  #5
0C96:  MOV     [--W15],[W5--]
0C98:  MOV     [--W15],W5
0C9A:  RETURN  
*
0F80:  MOV     W5,[W15++]
0F82:  MOV     #C,W5
0F84:  REPEAT  #5
0F86:  MOV     [W5++],[W15++]
0F88:  MOV     W3,W8
0F8A:  MOV     W2,W7
0F8C:  MOV     W1,W6
0F8E:  MOV     W0,W5
0F90:  MOV     W3,W9
0F92:  MOV     #473,W11
0F94:  ASR     W3,#4,W3
0F96:  MOV     #7FF,W10
0F98:  AND     W10,W3,W3
0F9A:  SUB     W11,W3,W11
0F9C:  AND     #1F,W8
0F9E:  BSET    W8.4
0FA0:  CLR     W0
0FA2:  CLR     W1
0FA4:  CLR     W2
0FA6:  CLR     W3
0FA8:  BCLR.B  42.0
0FAA:  RRC     W8,W8
0FAC:  RRC     W7,W7
0FAE:  RRC     W6,W6
0FB0:  RRC     W5,W5
0FB2:  RRC     W3,W3
0FB4:  RRC     W2,W2
0FB6:  RRC     W1,W1
0FB8:  RRC     W0,W0
0FBA:  DEC     W11,W11
0FBC:  BRA     NZ,FA8
0FBE:  BTSS    W9.F
0FC0:  BRA     FD4
0FC2:  COM     W0,W0
0FC4:  COM     W1,W1
0FC6:  COM     W2,W2
0FC8:  COM     W3,W3
0FCA:  INC     W0,W0
0FCC:  ADDC    #0,W1
0FCE:  ADDC    #0,W2
0FD0:  ADDC    #0,W3
0FD2:  BRA     FD4
0FD4:  MOV     #16,W5
0FD6:  REPEAT  #5
0FD8:  MOV     [--W15],[W5--]
0FDA:  MOV     [--W15],W5
0FDC:  RETURN  
*
10A6:  MOV     W5,[W15++]
10A8:  MOV     #C,W5
10AA:  REPEAT  #3
10AC:  MOV     [W5++],[W15++]
10AE:  BTSS    W0.F
10B0:  BRA     10D0
10B2:  NEG     W0,W0
10B4:  BSET    W4.8
10B6:  BTSS    W4.F
10B8:  BRA     10D0
10BA:  MOV     W0,[W15++]
10BC:  MOV     #2D,W0
10BE:  MOV     W4,[W15++]
10C0:  MOV     W0,[W15++]
10C2:  MOV     [--W15],W0
10C4:  CALL    6E4
10C8:  MOV     [--W15],W4
10CA:  MOV     [--W15],W0
10CC:  BCLR    W4.8
10CE:  DEC.B   0008
10D0:  CLR     W5
10D2:  MOV     W0,W7
10D4:  MOV     W4,W9
10D6:  BCLR    W4.F
10D8:  CP0.B   W4L
10DA:  BRA     NZ,10E8
10DC:  BTSC    W9.F
10DE:  BRA     10E4
10E0:  MOV     #0,W5
10E2:  BRA     1112
10E4:  MOV     #0,W5
10E6:  BRA     1112
10E8:  BTSS    W9.8
10EA:  SUB.B   W4L,#6,W5L
10EC:  BTSC    W9.8
10EE:  SUB.B   W4L,#7,W5L
10F0:  BRA     NC,1110
10F2:  MOV     #30,W0
10F4:  BTSS    W9.F
10F6:  MOV     #20,W0
10F8:  MOV     W0,[W15++]
10FA:  MOV     W4,[W15++]
10FC:  MOV     W0,[W15++]
10FE:  MOV     [--W15],W0
1100:  CALL    6E4
1104:  MOV     [--W15],W4
1106:  MOV     [--W15],W0
1108:  DEC     W5,W5
110A:  BRA     NN,10F8
110C:  MOV     #5,W5
110E:  BRA     1112
1110:  MOV     W4,W5
1112:  MOV     #6,W4
1114:  BTSC    W5.8
1116:  INC     W4,W4
1118:  BSET    W5.E
111A:  BTSC    W9.F
111C:  BSET    W5.F
111E:  MOV     #2710,W8
1120:  REPEAT  #11
1122:  DIV.U   W7,W8
1124:  CALL    1178
1128:  MOV     W1,W7
112A:  MOV     #3E8,W8
112C:  REPEAT  #11
112E:  DIV.U   W7,W8
1130:  CALL    1178
1134:  MOV     W1,W7
1136:  MOV     #64,W8
1138:  REPEAT  #11
113A:  DIV.U   W7,W8
113C:  CALL    1178
1140:  MOV     W1,W7
1142:  MOV     #A,W8
1144:  REPEAT  #11
1146:  DIV.U   W7,W8
1148:  CALL    1178
114C:  BTSS    W9.8
114E:  BRA     1164
1150:  MOV     #2D,W0
1152:  MOV     W1,[W15++]
1154:  MOV     W4,[W15++]
1156:  MOV     W0,[W15++]
1158:  MOV     [--W15],W0
115A:  CALL    6E4
115E:  MOV     [--W15],W4
1160:  MOV     [--W15],W1
1162:  BCLR    W9.8
1164:  MOV     #30,W0
1166:  ADD.B   W1L,W0L,W0L
1168:  MOV     W0,2A
116A:  MOV     W4,[W15++]
116C:  MOV     W0,[W15++]
116E:  MOV     [--W15],W0
1170:  CALL    6E4
1174:  MOV     [--W15],W4
1176:  BRA     11CC
1178:  MOV     #30,W6
117A:  CP0     W0
117C:  BRA     NZ,119A
117E:  BTSS    W5.E
1180:  BRA     11B8
1182:  DEC     W4,W4
1184:  CP.B    W4L,W5L
1186:  BRA     Z,118C
1188:  BTSC.B  42.0
118A:  RETURN  
118C:  CP0     W0
118E:  BRA     NZ,119A
1190:  BTSS    W5.E
1192:  BRA     11B8
1194:  BTSS    W5.F
1196:  MOV     #20,W6
1198:  BRA     11B8
119A:  BCLR    W5.E
119C:  BTSS    W9.8
119E:  BRA     11B8
11A0:  MOV     W0,W10
11A2:  MOV     #2D,W0
11A4:  MOV     W1,[W15++]
11A6:  MOV     W4,[W15++]
11A8:  MOV     W0,[W15++]
11AA:  MOV     [--W15],W0
11AC:  CALL    6E4
11B0:  MOV     [--W15],W4
11B2:  MOV     [--W15],W1
11B4:  BCLR    W9.8
11B6:  MOV     W10,W0
11B8:  ADD.B   W6L,W0L,W0L
11BA:  MOV     W1,[W15++]
11BC:  MOV     W4,[W15++]
11BE:  MOV     W0,[W15++]
11C0:  MOV     [--W15],W0
11C2:  CALL    6E4
11C6:  MOV     [--W15],W4
11C8:  MOV     [--W15],W1
11CA:  RETURN  
11CC:  MOV     #12,W5
11CE:  REPEAT  #3
11D0:  MOV     [--W15],[W5--]
11D2:  MOV     [--W15],W5
11D4:  RETURN  
.................... 
.................... #list
.................... 
.................... #include <Inc/lookup_tables.h>
.................... const int timer_table[] = { 
.................... 1036,1036,1036,1036,1036,1036,1036,1036,1036,1036,
.................... 1036,1036,1036,1036,1036,1036,1036,1036,1036,1036,
.................... 1036,1021,1006,992,978,964,950,936,923,910,897,884,
.................... 871,859,847,835,823,811,799,788,777,766,755,744,733,
.................... 723,713,703,693,683,673,663,654,645,636,627,618,609,
.................... 600,591,583,575,567,559,551,543,535,527,519,512,505,
.................... 498,491,484,477,470,463,456,449,443,437,431,425,419,
.................... 413,407,401,395,389,383,378,373,368,363,358,353,348,
.................... 343,338,333,328,323,318,313,309,305,301,297,293,289,
.................... 285,281,277,273,269,265,261,257,253,249,245, 241,238,
.................... 235,232,229,226,223,220,217,214,211,208,205,202,199,
.................... 196,193,190,187,184,181,178,175,172,170,168,166,164,
.................... 162,160,158,156,154,152,150,148,146,144,142,140,138,
.................... 136,134,132,130,128,126,124,122,120,118,116,114,112,
.................... 110,108,106,104,102,101,100,99,98,97,96,95,94,93,92,
.................... 91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,
.................... 74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,
.................... 57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,
.................... 40,39,38,37,36,35,34,33,33,33,33,33,33,33,33};
.................... 
.................... const unsigned int16 gain_table[256] = {
.................... 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,85,86,
.................... 86,86,86,86,86,87,87,87,87,87,88,88,88,88,88,89,89,
.................... 89,89,90,90,90,90,91,91,91,91,92,92,92,92,93,93,93,
.................... 94,94,94,95,95,95,95,96,96,96,97,97,97,98,98,98,99,
.................... 99,100,100,101,101,101,102,102,102,103,103,104,104,
.................... 105,105,106,106,106,107,107,108,108,109,110,110,111,
.................... 111,112,112,113,113,114,114,115,116,116,117,117,118,
.................... 119,120,120,121,122,122,123,124,125,125,126,127,127,
.................... 128,129,130,130,131,132,133,134,135,136,137,138,139,
.................... 140,141,142,143,144,145,146,147,148,149,150,151,152,
.................... 153,154,155,156,157,158,159,161,162,163,164,166,167,
.................... 169,170,172,173,175,177,178,180,182,184,186,188,191,
.................... 193,194,195,196,198,199,200,201,203,204,206,207,209,
.................... 210,212,213,215,216,218,220,222,223,225,227,229,231,
.................... 233,235,237,240,242,244,247,249,252,254,257,260,263,
.................... 266,269,272,275,279,282,286,289,293,297,301,306,310,
.................... 315,320,325,330,335,341,347,353,360,367,374,381,389,
.................... 397,406,415,425,436,436,436,436,436,436,436,436
.................... };
.................... 
.................... #DEVICE ADC=10
.................... #device ICSP=1
.................... #use delay(clock=64000000,crystal=8000000)
.................... #use rs232(UART2, baud=9600, stream=UART_PORT2)
.................... 
.................... #FUSES NOWDT                    //No Watch Dog Timer
.................... #FUSES CKSFSM                   //Clock Switching is enabled, fail Safe clock monitor is enabled
.................... #FUSES BORV42                   //Brownout reset at 4.5V
.................... #FUSES WRT                      //Program Memory Write Protected
.................... #FUSES PROTECT                  //Code protected from reads
.................... #include <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
*
0C9C:  MOV     W5,[W15++]
0C9E:  MOV     W6,[W15++]
0CA0:  MOV     W7,[W15++]
0CA2:  MOV     W8,[W15++]
0CA4:  CLR     998
0CA6:  CLR     99A
0CA8:  CLR     99C
0CAA:  MOV     #3FF0,W4
0CAC:  MOV     W4,99E
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
0CAE:  MOV     #FF1F,W4
0CB0:  MOV     W4,9A8
0CB2:  SETM    9AA
0CB4:  SETM    9AC
0CB6:  MOV     #BFDF,W4
0CB8:  MOV     W4,9AE
0CBA:  MOV     #1C35,W4
0CBC:  MOV     W4,9B0
0CBE:  MOV     #5555,W4
0CC0:  MOV     W4,9B2
0CC2:  MOV     #5555,W4
0CC4:  MOV     W4,9B4
0CC6:  MOV     #3FA5,W4
0CC8:  MOV     W4,9B6
0CCA:  MOV     #3F1C,W4
0CCC:  MOV     W4,9B8
0CCE:  MOV     #16A7,W4
0CD0:  MOV     W4,9BA
0CD2:  MOV     #C16C,W4
0CD4:  MOV     W4,9BC
0CD6:  MOV     #BF56,W4
0CD8:  MOV     W4,9BE
0CDA:  MOV     #F3E6,W4
0CDC:  MOV     W4,9C0
0CDE:  MOV     #D65,W4
0CE0:  MOV     W4,9C2
0CE2:  MOV     #1A0,W4
0CE4:  MOV     W4,9C4
0CE6:  MOV     #3EFA,W4
0CE8:  MOV     W4,9C6
0CEA:  MOV     #A3E,W4
0CEC:  MOV     W4,9C8
0CEE:  MOV     #3931,W4
0CF0:  MOV     W4,9CA
0CF2:  MOV     #7E4C,W4
0CF4:  MOV     W4,9CC
0CF6:  MOV     #BE92,W4
0CF8:  MOV     W4,9CE
0CFA:  MOV     #DDFB,W4
0CFC:  MOV     W4,9D0
0CFE:  MOV     #2B77,W4
0D00:  MOV     W4,9D2
0D02:  MOV     #EDB1,W4
0D04:  MOV     W4,9D4
0D06:  MOV     #3E21,W4
0D08:  MOV     W4,9D6
0D0A:  MOV     #6FCC,W4
0D0C:  MOV     W4,9D8
0D0E:  MOV     #8FF7,W4
0D10:  MOV     W4,9DA
0D12:  MOV     #C610,W4
0D14:  MOV     W4,9DC
0D16:  MOV     #BDA8,W4
0D18:  MOV     W4,9DE
0D1A:  MOV     #124C,W4
0D1C:  MOV     W4,9E0
0D1E:  MOV     #8E1C,W4
0D20:  MOV     W4,9E2
0D22:  MOV     #3AF9,W4
0D24:  MOV     W4,9E4
0D26:  MOV     #3CF3,W4
0D28:  MOV     W4,9E6
0D2A:  MOV     #7676,W4
0D2C:  MOV     W4,9E8
0D2E:  MOV     #350F,W4
0D30:  MOV     W4,9EA
0D32:  MOV     #C0DE,W4
0D34:  MOV     W4,9EC
0D36:  MOV     #3CF0,W4
0D38:  MOV     W4,9EE
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
0D3A:  MOV     97E,W0
0D3C:  MOV     980,W1
0D3E:  MOV     982,W2
0D40:  MOV     984,W3
0D42:  MOV     #0,W4
0D44:  MOV     #0,W5
0D46:  MOV     #0,W6
0D48:  MOV     #0,W7
0D4A:  CALL    BBA
0D4E:  BRA     NC,D5A
0D50:  MOV     #97E,W0
0D52:  MOV     #97E,W1
0D54:  REPEAT  #7
0D56:  MOV     [W0++],[W1++]
0D58:  BTG.B   985.7
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
0D5A:  MOV     97E,W0
0D5C:  MOV     980,W1
0D5E:  MOV     982,W2
0D60:  MOV     984,W3
0D62:  MOV     #C884,W4
0D64:  MOV     #6DC9,W5
0D66:  MOV     #5F30,W6
0D68:  MOV     #3FE4,W7
0D6A:  CALL    7B4
0D6E:  CALL    C3E
0D72:  MOV.B   W0L,986
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
0D74:  MOV     97E,W0
0D76:  MOV     980,W1
0D78:  MOV     982,W2
0D7A:  MOV     984,W3
0D7C:  MOV     #C884,W4
0D7E:  MOV     #6DC9,W5
0D80:  MOV     #5F30,W6
0D82:  MOV     #3FE4,W7
0D84:  CALL    7B4
0D88:  MOV     W0,W5
0D8A:  MOV     W1,W6
0D8C:  MOV     W2,W7
0D8E:  MOV     W3,W8
0D90:  MOV     #0,W1
0D92:  MOV     #0,W2
0D94:  MOV     #0,W3
0D96:  MOV.B   986,W0L
0D98:  CLR.B   1
0D9A:  CALL    74A
0D9E:  BSET.B  43.0
0DA0:  MOV     W5,[W15++]
0DA2:  MOV     W6,[W15++]
0DA4:  MOV     W7,[W15++]
0DA6:  MOV     W0,W4
0DA8:  MOV     W5,W0
0DAA:  MOV     W1,W5
0DAC:  MOV     W6,W1
0DAE:  MOV     W2,W6
0DB0:  MOV     W7,W2
0DB2:  MOV     W3,W7
0DB4:  MOV     W8,W3
0DB6:  CALL    9CC
0DBA:  MOV     [--W15],W7
0DBC:  MOV     [--W15],W6
0DBE:  MOV     [--W15],W5
0DC0:  MOV     W0,9A0
0DC2:  MOV     W1,9A2
0DC4:  MOV     W2,9A4
0DC6:  MOV     W3,9A6
....................    quad = quad % 4;                    // quadrant (0 to 3)
0DC8:  MOV.B   986,W0L
0DCA:  AND.B   W0L,#3,W0L
0DCC:  MOV.B   W0L,986
.................... 
....................    if (quad == 0 || quad == 2)
0DCE:  CP0.B   986
0DD0:  BRA     Z,DD8
0DD2:  MOV     986,W4
0DD4:  CP.B    W4L,#2
0DD6:  BRA     NZ,DF6
....................       t = frac * PI_DIV_BY_TWO;
0DD8:  MOV     9A0,W0
0DDA:  MOV     9A2,W1
0DDC:  MOV     9A4,W2
0DDE:  MOV     9A6,W3
0DE0:  MOV     #2D18,W4
0DE2:  MOV     #5444,W5
0DE4:  MOV     #21FB,W6
0DE6:  MOV     #3FF9,W7
0DE8:  CALL    7B4
0DEC:  MOV     W0,990
0DEE:  MOV     W1,992
0DF0:  MOV     W2,994
0DF2:  MOV     W3,996
0DF4:  BRA     E8A
....................    else if (quad == 1)
0DF6:  MOV     986,W4
0DF8:  CP.B    W4L,#1
0DFA:  BRA     NZ,E44
....................       t = (1-frac) * PI_DIV_BY_TWO;
0DFC:  BSET.B  43.0
0DFE:  MOV     #0,W0
0E00:  MOV     #0,W1
0E02:  MOV     #0,W2
0E04:  MOV     #3FF0,W3
0E06:  MOV     9A0,W4
0E08:  MOV     9A2,W5
0E0A:  MOV     9A4,W6
0E0C:  MOV     9A6,W7
0E0E:  CALL    9CC
0E12:  MOV     W0,W5
0E14:  MOV     W1,W6
0E16:  MOV     W2,W7
0E18:  MOV     W3,W8
0E1A:  MOV     W5,[W15++]
0E1C:  MOV     W6,[W15++]
0E1E:  MOV     W7,[W15++]
0E20:  MOV     W5,W0
0E22:  MOV     W6,W1
0E24:  MOV     W7,W2
0E26:  MOV     W8,W3
0E28:  MOV     #2D18,W4
0E2A:  MOV     #5444,W5
0E2C:  MOV     #21FB,W6
0E2E:  MOV     #3FF9,W7
0E30:  CALL    7B4
0E34:  MOV     [--W15],W7
0E36:  MOV     [--W15],W6
0E38:  MOV     [--W15],W5
0E3A:  MOV     W0,990
0E3C:  MOV     W1,992
0E3E:  MOV     W2,994
0E40:  MOV     W3,996
0E42:  BRA     E8A
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
0E44:  BSET.B  43.0
0E46:  MOV     9A0,W0
0E48:  MOV     9A2,W1
0E4A:  MOV     9A4,W2
0E4C:  MOV     9A6,W3
0E4E:  MOV     #0,W4
0E50:  MOV     #0,W5
0E52:  MOV     #0,W6
0E54:  MOV     #3FF0,W7
0E56:  CALL    9CC
0E5A:  MOV     W0,W5
0E5C:  MOV     W1,W6
0E5E:  MOV     W2,W7
0E60:  MOV     W3,W8
0E62:  MOV     W5,[W15++]
0E64:  MOV     W6,[W15++]
0E66:  MOV     W7,[W15++]
0E68:  MOV     W5,W0
0E6A:  MOV     W6,W1
0E6C:  MOV     W7,W2
0E6E:  MOV     W8,W3
0E70:  MOV     #2D18,W4
0E72:  MOV     #5444,W5
0E74:  MOV     #21FB,W6
0E76:  MOV     #3FF9,W7
0E78:  CALL    7B4
0E7C:  MOV     [--W15],W7
0E7E:  MOV     [--W15],W6
0E80:  MOV     [--W15],W5
0E82:  MOV     W0,990
0E84:  MOV     W1,992
0E86:  MOV     W2,994
0E88:  MOV     W3,996
.................... 
....................    y = 1.0;
0E8A:  CLR     988
0E8C:  CLR     98A
0E8E:  CLR     98C
0E90:  MOV     #3FF0,W4
0E92:  MOV     W4,98E
....................    t = t * t;
0E94:  MOV     990,W0
0E96:  MOV     992,W1
0E98:  MOV     994,W2
0E9A:  MOV     996,W3
0E9C:  MOV     990,W4
0E9E:  MOV     992,W5
0EA0:  MOV     994,W6
0EA2:  MOV     996,W7
0EA4:  CALL    7B4
0EA8:  MOV     W0,990
0EAA:  MOV     W1,992
0EAC:  MOV     W2,994
0EAE:  MOV     W3,996
....................    for (i = 0; i <= 8; i++)
0EB0:  CLR.B   987
0EB2:  MOV     986,W4
0EB4:  LSR     W4,#8,W4
0EB6:  CP.B    W4L,#8
0EB8:  BRA     GTU,F1C
....................    {
....................       t2 = t2 * t;
0EBA:  MOV     998,W0
0EBC:  MOV     99A,W1
0EBE:  MOV     99C,W2
0EC0:  MOV     99E,W3
0EC2:  MOV     990,W4
0EC4:  MOV     992,W5
0EC6:  MOV     994,W6
0EC8:  MOV     996,W7
0ECA:  CALL    7B4
0ECE:  MOV     W0,998
0ED0:  MOV     W1,99A
0ED2:  MOV     W2,99C
0ED4:  MOV     W3,99E
....................       y = y + p_64[i] * t2;
0ED6:  MOV.B   987,W0L
0ED8:  CLR.B   1
0EDA:  SL      W0,#3,W0
0EDC:  MOV     #9A8,W4
0EDE:  ADD     W0,W4,W0
0EE0:  MOV     W0,W5
0EE2:  MOV     W5,[W15++]
0EE4:  MOV     [W5],W0
0EE6:  MOV     [++W5],W1
0EE8:  MOV     [++W5],W2
0EEA:  MOV     [++W5],W3
0EEC:  MOV     998,W4
0EEE:  MOV     99A,W5
0EF0:  MOV     99C,W6
0EF2:  MOV     99E,W7
0EF4:  CALL    7B4
0EF8:  MOV     [--W15],W5
0EFA:  BCLR.B  43.0
0EFC:  MOV     W0,W4
0EFE:  MOV     W1,W5
0F00:  MOV     W2,W6
0F02:  MOV     W3,W7
0F04:  MOV     988,W0
0F06:  MOV     98A,W1
0F08:  MOV     98C,W2
0F0A:  MOV     98E,W3
0F0C:  CALL    9CC
0F10:  MOV     W0,988
0F12:  MOV     W1,98A
0F14:  MOV     W2,98C
0F16:  MOV     W3,98E
0F18:  INC.B   0987
0F1A:  BRA     EB2
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
0F1C:  MOV     986,W4
0F1E:  CP.B    W4L,#2
0F20:  BRA     Z,F28
0F22:  MOV     986,W4
0F24:  CP.B    W4L,#1
0F26:  BRA     NZ,F32
....................       y = -y;  // correct sign
0F28:  MOV     #988,W0
0F2A:  MOV     #988,W1
0F2C:  REPEAT  #7
0F2E:  MOV     [W0++],[W1++]
0F30:  BTG.B   98F.7
.................... 
....................    return (y);
0F32:  MOV     988,W0
0F34:  MOV     98A,W1
0F36:  MOV     98C,W2
0F38:  MOV     98E,W3
0F3A:  MOV     [--W15],W8
0F3C:  MOV     [--W15],W7
0F3E:  MOV     [--W15],W6
0F40:  MOV     [--W15],W5
0F42:  RETURN  
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
0F44:  MOV     W5,[W15++]
0F46:  MOV     W6,[W15++]
0F48:  MOV     W7,[W15++]
0F4A:  MOV     W8,[W15++]
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
0F4C:  BSET.B  43.0
0F4E:  MOV     96E,W0
0F50:  MOV     970,W1
0F52:  MOV     972,W2
0F54:  MOV     974,W3
0F56:  MOV     #2D18,W4
0F58:  MOV     #5444,W5
0F5A:  MOV     #21FB,W6
0F5C:  MOV     #3FF9,W7
0F5E:  CALL    9CC
0F62:  MOV     W0,W5
0F64:  MOV     W1,W6
0F66:  MOV     W2,W7
0F68:  MOV     W3,W8
0F6A:  MOV     W5,97E
0F6C:  MOV     W6,980
0F6E:  MOV     W7,982
0F70:  MOV     W8,984
0F72:  CALL    C9C
0F76:  MOV     [--W15],W8
0F78:  MOV     [--W15],W7
0F7A:  MOV     [--W15],W6
0F7C:  MOV     [--W15],W5
0F7E:  RETURN  
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #define P1TCON 0x01C0
.................... #define P1TMR 0x01C2 
.................... #define P1TPER 0x01C4
.................... #define P1SECMP 0x01C6
.................... #define PWM1CON1 0x01C8 
.................... #define PWM1CON2 0x01CA
.................... #define P1DTCON1 0x01CC
.................... #define P1DTCON2 0x01CE  
.................... #define P1FLTACON 0x01D0
.................... #define P1OVDCON 0x01D4   
.................... #define P1DC1 0x01D6   
.................... #define P1DC2 0x01D8
.................... #define P1DC3 0x01DA
.................... #define IPC14 0x00C0  
.................... #define CLKDIV 0x0744 
.................... #define PLLFBD 0x0746
.................... 
.................... 
.................... #define ADC_pin sAN0
.................... #define LED_PIN PIN_B5
.................... 
.................... #define voltage_offset 1000//1248
.................... #define low_duty_limit 50
.................... #define high_duty_limit 1950
.................... #define SLOPE 0
.................... //! #define SLOPE 6.2
.................... #define break_level 5
.................... #define sustain_level 200  
.................... #define break_amplitude 0 
.................... //!#define pedestal_amplitude 85
.................... #define pedestal_amplitude 500
.................... #define peak_amplitude 950
.................... 
.................... 
.................... #define throttle_PIN PIN_B1
.................... #define PWM_tick_pin PIN_B2
.................... #define TIM_tick_pin PIN_B3
.................... 
.................... #define kalman_up 18
.................... #define kalman_diff_down 8
.................... 
.................... #define init_freq 30
.................... 
....................   
....................   
.................... void initMCPWM(void);
.................... void fill_sine_table(void);  
.................... void timer_reload(void);
.................... void voltage_gain(void); 
.................... 
.................... 
.................... unsigned int16 duty[3]={voltage_offset,voltage_offset,voltage_offset},sample=0;
.................... signed int16 peak_voltage =0;//  1184; 
.................... signed int32 reference[3] = {0,0,0};
.................... 
.................... const unsigned max_samples=30.0;
.................... signed int16 sine_table[max_samples];
.................... unsigned int16 sine_index,phase_angle[3] = {0 , 0 , 0};  
.................... double theeta;
.................... 
.................... const unsigned max_freq = 250; //Hz
.................... //!const double per_clock_tick = 0.006405; //ms
.................... //!const double per_clock_tick = 0.007996; //ms
.................... const double per_clock_tick = 0.004; //ms
.................... //!unsigned int16 timer_table[max_freq+1];
.................... 
.................... 
.................... unsigned int16 raw_adc =0 ;
.................... signed int16 throttle_level = 0;
.................... unsigned int16 freq = 1;
.................... unsigned int16 temp = 0;
.................... 
.................... int1 tick = 0;
.................... int1 uart_tick = 0;
.................... int8 tick_count = 0;
.................... unsigned long millis_count = 0;
.................... 
.................... char Serial_OutputBuffer[60];
.................... 
.................... signed int32 kalman_big_1=0, kalman_big_2=0, kalman_diff=0;
.................... 
.................... 
.................... #int_PWM1
.................... void  PWM1_isr(void) 
*
0418:  PUSH    42
041A:  PUSH    36
041C:  PUSH    32
041E:  MOV     W0,[W15++]
0420:  MOV     #2,W0
0422:  REPEAT  #C
0424:  MOV     [W0++],[W15++]
.................... {
.................... 
....................    tick_count++;
0426:  INC.B   091B
....................    if(tick_count >= 8)
0428:  MOV     91A,W4
042A:  LSR     W4,#8,W4
042C:  CP.B    W4L,#8
042E:  BRA     LT,43A
....................    {   
.................... //!      output_bit(PWM_tick_pin , 1);
....................       millis_count++;
0430:  INC     091C
0432:  BTSC.B  42.1
0434:  INC     091E
....................       tick = 1;
0436:  BSET.B  91A.0
....................       tick_count=0;
0438:  CLR.B   91B
....................    
....................    }
....................    if (millis_count >= 500) {
043A:  MOV     91E,W4
043C:  CP      W4,#0
043E:  BRA     NC,454
0440:  BRA     GTU,44A
0442:  MOV     91C,W4
0444:  MOV     #1F4,W3
0446:  CP      W3,W4
0448:  BRA     GTU,454
....................       output_toggle(LED_PIN);
044A:  BCLR.B  2C6.5
044C:  BTG.B   2CA.5
....................       uart_tick = 1;
044E:  BSET.B  91A.1
....................       millis_count = 0;
0450:  CLR     91C
0452:  CLR     91E
....................       
....................    }
.................... 
.................... }
0454:  BCLR.B  88.7
0456:  MOV     #1A,W0
0458:  REPEAT  #C
045A:  MOV     [--W15],[W0--]
045C:  MOV     [--W15],W0
045E:  POP     32
0460:  POP     36
0462:  POP     42
0464:  RETFIE  
.................... #INT_TIMER1
.................... void  timer1_isr(void) 
*
04A8:  PUSH    42
04AA:  PUSH    36
04AC:  PUSH    32
04AE:  MOV     W0,[W15++]
04B0:  MOV     #2,W0
04B2:  REPEAT  #C
04B4:  MOV     [W0++],[W15++]
.................... {
.................... //!    output_bit(TIM_tick_pin , 1);
....................    
.................... //!   delay_us(10);
.................... //!   output_bit(TIM_tick_pin , 0); 
.................... //!   
....................    
....................    sample = (sample+1)%max_samples;
04B6:  MOV     8B6,W4
04B8:  ADD     W4,#1,W5
04BA:  MOV     #1E,W4
04BC:  REPEAT  #11
04BE:  DIV.U   W5,W4
04C0:  MOV     W1,8B6
....................    phase_angle[0] = sample;
04C2:  PUSH    8B6
04C4:  POP     904
....................    phase_angle[1] = (sample+10)%max_samples;
04C6:  MOV     8B6,W4
04C8:  ADD     W4,#A,W5
04CA:  MOV     #1E,W4
04CC:  REPEAT  #11
04CE:  DIV.U   W5,W4
04D0:  MOV     W1,906
....................    phase_angle[2] = (sample+20)%max_samples; 
04D2:  MOV     8B6,W4
04D4:  ADD     W4,#14,W5
04D6:  MOV     #1E,W4
04D8:  REPEAT  #11
04DA:  DIV.U   W5,W4
04DC:  MOV     W1,908
.................... 
....................    for (int i = 0 ; i < 3 ; i++) {
04DE:  CLR     A30
04E0:  MOV     A30,W4
04E2:  CP      W4,#3
04E4:  BRA     GE,67C
....................       
....................       reference[i] = sine_table[phase_angle[i]];
04E6:  MOV     A30,W4
04E8:  MUL.UU  W4,#4,W0
04EA:  MOV     #8BA,W4
04EC:  ADD     W0,W4,W5
04EE:  MOV     A30,W4
04F0:  MUL.UU  W4,#2,W0
04F2:  MOV     #904,W4
04F4:  ADD     W0,W4,W0
04F6:  MOV     [W0],W6
04F8:  SL      W6,#1,W0
04FA:  MOV     #8C6,W4
04FC:  ADD     W0,W4,W0
04FE:  MOV     W0,W4
0500:  MOV     [W4],W0
0502:  CLR     W1
0504:  BTSC    W0.F
0506:  SETM    W1
0508:  MOV     #0,W4
050A:  MOV     [W4++],[W5++]
050C:  MOV     [W4++],[W5++]
....................       reference[i] = reference[i] * peak_voltage; 
050E:  MOV     A30,W4
0510:  MUL.UU  W4,#4,W0
0512:  MOV     #8BA,W4
0514:  ADD     W0,W4,W5
0516:  MOV     A30,W4
0518:  MUL.UU  W4,#4,W0
051A:  MOV     #8BA,W4
051C:  ADD     W0,W4,W0
051E:  MOV     #C,W4
0520:  MOV     [W0++],[W4++]
0522:  MOV     [W0++],[W4++]
0524:  MOV     8B8,W0
0526:  CLR     W1
0528:  BTSC    W0.F
052A:  SETM    W1
052C:  MOV     W0,W2
052E:  MOV     W1,W3
0530:  MOV     W6,W0
0532:  MOV     W7,W1
0534:  CALL    466
0538:  MOV     #0,W4
053A:  MOV     [W4++],[W5++]
053C:  MOV     [W4++],[W5++]
....................       if( reference[i] > 0)
053E:  MOV     A30,W4
0540:  MUL.UU  W4,#4,W0
0542:  MOV     #8BA,W4
0544:  ADD     W0,W4,W0
0546:  MOV     #A,W4
0548:  MOV     [W0++],[W4++]
054A:  MOV     [W0++],[W4++]
054C:  CP      W6,#0
054E:  BRA     LT,57C
0550:  BRA     GT,556
0552:  CP      W5,#0
0554:  BRA     LEU,57C
....................       {
....................          reference[i] = reference[i] >> 8; 
0556:  MOV     A30,W4
0558:  MUL.UU  W4,#4,W0
055A:  MOV     #8BA,W4
055C:  ADD     W0,W4,W5
055E:  MOV     A30,W4
0560:  MUL.UU  W4,#4,W0
0562:  MOV     #8BA,W4
0564:  ADD     W0,W4,W0
0566:  MOV     #C,W4
0568:  MOV     [W0++],[W4++]
056A:  MOV     [W0++],[W4++]
056C:  MOV.B   D,W0L
056E:  MOV.B   W0L,[W5]
0570:  MOV.B   W7L,[W5+#1]
0572:  MOV.B   F,W0L
0574:  MOV.B   W0L,[W5+#2]
0576:  MOV.B   #0,W0L
0578:  MOV.B   W0L,[W5+#3]
....................       }
057A:  BRA     5F8
....................       else if( reference[i] < 0)
057C:  MOV     A30,W4
057E:  MUL.UU  W4,#4,W0
0580:  MOV     #8BA,W4
0582:  ADD     W0,W4,W0
0584:  MOV     #A,W4
0586:  MOV     [W0++],[W4++]
0588:  MOV     [W0++],[W4++]
058A:  CP      W6,#0
058C:  BRA     GT,5F8
058E:  BRA     LT,594
0590:  CP      W5,#0
0592:  BRA     C,5F8
....................       {
....................          reference[i] = 0 - reference[i];
0594:  MOV     A30,W4
0596:  MUL.UU  W4,#4,W0
0598:  MOV     #8BA,W4
059A:  ADD     W0,W4,W5
059C:  MOV     A30,W4
059E:  MUL.UU  W4,#4,W0
05A0:  MOV     #8BA,W4
05A2:  ADD     W0,W4,W0
05A4:  MOV     W0,W4
05A6:  MOV     #0,W3
05A8:  MOV     [W4++],[W3++]
05AA:  MOV     [W4++],[W3++]
05AC:  MOV     #0,W4
05AE:  SUB     W4,W0,[W5]
05B0:  MOV     #0,W4
05B2:  SUBB    W4,W1,[++W5]
....................          reference[i] = reference[i] >> 8;
05B4:  MOV     A30,W4
05B6:  MUL.UU  W4,#4,W0
05B8:  MOV     #8BA,W4
05BA:  ADD     W0,W4,W5
05BC:  MOV     A30,W4
05BE:  MUL.UU  W4,#4,W0
05C0:  MOV     #8BA,W4
05C2:  ADD     W0,W4,W0
05C4:  MOV     #C,W4
05C6:  MOV     [W0++],[W4++]
05C8:  MOV     [W0++],[W4++]
05CA:  MOV.B   D,W0L
05CC:  MOV.B   W0L,[W5]
05CE:  MOV.B   W7L,[W5+#1]
05D0:  MOV.B   F,W0L
05D2:  MOV.B   W0L,[W5+#2]
05D4:  MOV.B   #0,W0L
05D6:  MOV.B   W0L,[W5+#3]
....................          reference[i] = 0 - reference[i];
05D8:  MOV     A30,W4
05DA:  MUL.UU  W4,#4,W0
05DC:  MOV     #8BA,W4
05DE:  ADD     W0,W4,W5
05E0:  MOV     A30,W4
05E2:  MUL.UU  W4,#4,W0
05E4:  MOV     #8BA,W4
05E6:  ADD     W0,W4,W0
05E8:  MOV     W0,W4
05EA:  MOV     #0,W3
05EC:  MOV     [W4++],[W3++]
05EE:  MOV     [W4++],[W3++]
05F0:  MOV     #0,W4
05F2:  SUB     W4,W0,[W5]
05F4:  MOV     #0,W4
05F6:  SUBB    W4,W1,[++W5]
....................       }
....................       
....................       reference[i] = reference[i] + voltage_offset;
05F8:  MOV     A30,W4
05FA:  MUL.UU  W4,#4,W0
05FC:  MOV     #8BA,W4
05FE:  ADD     W0,W4,W5
0600:  MOV     A30,W4
0602:  MUL.UU  W4,#4,W0
0604:  MOV     #8BA,W4
0606:  ADD     W0,W4,W0
0608:  MOV     #C,W4
060A:  MOV     [W0++],[W4++]
060C:  MOV     [W0++],[W4++]
060E:  MOV     #3E8,W4
0610:  ADD     W6,W4,[W5]
0612:  ADDC    W7,#0,[++W5]
....................       if(reference[i] > high_duty_limit )
0614:  MOV     A30,W4
0616:  MUL.UU  W4,#4,W0
0618:  MOV     #8BA,W4
061A:  ADD     W0,W4,W0
061C:  MOV     #A,W4
061E:  MOV     [W0++],[W4++]
0620:  MOV     [W0++],[W4++]
0622:  CP      W6,#0
0624:  BRA     LT,646
0626:  BRA     GT,62E
0628:  MOV     #79E,W4
062A:  CP      W4,W5
062C:  BRA     C,646
....................       { 
....................          reference[i] = high_duty_limit;
062E:  MOV     A30,W4
0630:  MUL.UU  W4,#4,W0
0632:  MOV     #8BA,W4
0634:  ADD     W0,W4,W5
0636:  MOV.B   #9E,W0L
0638:  MOV.B   W0L,[W5]
063A:  MOV.B   #7,W0L
063C:  MOV.B   W0L,[W5+#1]
063E:  MOV.B   #0,W0L
0640:  MOV.B   W0L,[W5+#2]
0642:  MOV.B   #0,W0L
0644:  MOV.B   W0L,[W5+#3]
....................       }
....................       if(reference[i] < low_duty_limit)
0646:  MOV     A30,W4
0648:  MUL.UU  W4,#4,W0
064A:  MOV     #8BA,W4
064C:  ADD     W0,W4,W0
064E:  MOV     #A,W4
0650:  MOV     [W0++],[W4++]
0652:  MOV     [W0++],[W4++]
0654:  CP      W6,#0
0656:  BRA     GT,678
0658:  BRA     LT,660
065A:  MOV     #32,W4
065C:  CP      W4,W5
065E:  BRA     LEU,678
....................       { 
....................          reference[i] = low_duty_limit;
0660:  MOV     A30,W4
0662:  MUL.UU  W4,#4,W0
0664:  MOV     #8BA,W4
0666:  ADD     W0,W4,W5
0668:  MOV.B   #32,W0L
066A:  MOV.B   W0L,[W5]
066C:  MOV.B   #0,W0L
066E:  MOV.B   W0L,[W5+#1]
0670:  MOV.B   #0,W0L
0672:  MOV.B   W0L,[W5+#2]
0674:  MOV.B   #0,W0L
0676:  MOV.B   W0L,[W5+#3]
....................       }
0678:  INC     0A30
067A:  BRA     4E0
....................    }
....................       
....................    *P1DC1 = reference[0];  *(P1DC1+1) = reference[0]>>8;
067C:  MOV.B   8BA,W0L
067E:  MOV.B   W0L,1D6
0680:  MOV.B   8BB,W0L
0682:  MOV.B   W0L,1D7
....................    *P1DC2 = reference[1];  *(P1DC2+1) = reference[1]>>8;
0684:  MOV.B   8BE,W0L
0686:  MOV.B   W0L,1D8
0688:  MOV.B   8BF,W0L
068A:  MOV.B   W0L,1D9
....................    *P1DC3 = reference[2];  *(P1DC3+1) = reference[2]>>8;
068C:  MOV.B   8C2,W0L
068E:  MOV.B   W0L,1DA
0690:  MOV.B   8C3,W0L
0692:  MOV.B   W0L,1DB
....................    
.................... 
....................          
....................    
....................    setup_timer1(TMR_INTERNAL | TMR_DIV_BY_64, timer_table[freq]);
0694:  MOV     916,W0
0696:  SL      W0,#1,W0
0698:  CALL    100
069C:  MOV     W0,W5
069E:  CLR     104
06A0:  MOV     W5,102
06A2:  MOV     #8020,W4
06A4:  MOV     W4,104
....................    
....................   
.................... //!   if(sample < 15)
.................... //!   { 
.................... //!      output_bit(Sync_Out,1);
.................... //!   }
.................... //!   else
.................... //!   {
.................... //!      output_bit(Sync_Out,0);
.................... //!   }
.................... //!      output_bit(TIM_tick_pin , 0);
.................... }
.................... 
06A6:  BCLR.B  84.3
06A8:  MOV     #1A,W0
06AA:  REPEAT  #C
06AC:  MOV     [--W15],[W0--]
06AE:  MOV     [--W15],W0
06B0:  POP     32
06B2:  POP     36
06B4:  POP     42
06B6:  RETFIE  
.................... #INT_TIMER2
.................... void  timer2_isr(void) 
06B8:  PUSH    42
06BA:  PUSH    36
06BC:  PUSH    32
06BE:  MOV     W0,[W15++]
06C0:  MOV     #2,W0
06C2:  REPEAT  #C
06C4:  MOV     [W0++],[W15++]
.................... {
....................    output_bit(TIM_tick_pin , 1);
06C6:  BSET.B  2CA.3
06C8:  BCLR.B  2C6.3
....................    delay_us(10);
06CA:  REPEAT  #9E
06CC:  NOP     
....................    output_bit(TIM_tick_pin , 0);
06CE:  BCLR.B  2CA.3
06D0:  BCLR.B  2C6.3
.................... 
06D2:  BCLR.B  84.6
06D4:  MOV     #1A,W0
06D6:  REPEAT  #C
06D8:  MOV     [--W15],[W0--]
06DA:  MOV     [--W15],W0
06DC:  POP     32
06DE:  POP     36
06E0:  POP     42
06E2:  RETFIE  
.................... }
.................... 
....................    
.................... void main()
*
11D6:  MOV     #F80,W15
11D8:  MOV     #FFF,W0
11DA:  MOV     W0,20
11DC:  NOP     
11DE:  MOV     #4444,W0
11E0:  MOV     W0,94
11E2:  MOV     #4444,W0
11E4:  MOV     W0,A6
11E6:  BSET.B  81.7
11E8:  MOV     #8000,W4
11EA:  MOV     W4,216
11EC:  MOV     #400,W4
11EE:  MOV     W4,218
11F0:  MOV     #67,W4
11F2:  MOV     W4,21E
11F4:  CLR     8B6
11F6:  CLR     8B8
11F8:  CLR     912
11FA:  CLR     914
11FC:  MOV     #1,W4
11FE:  MOV     W4,916
1200:  CLR     918
1202:  BCLR.B  91A.0
1204:  BCLR.B  91A.1
1206:  CLR.B   91B
1208:  CLR     91C
120A:  CLR     91E
120C:  CLR     95C
120E:  CLR     95E
1210:  CLR     960
1212:  CLR     962
1214:  CLR     964
1216:  CLR     966
1218:  CLR     968
121A:  SETM    2A8
121C:  BRA     12BC
121E:  DATA    C0,06,08
1220:  DATA    00,00,00
1222:  DATA    4B,F0,3F
1224:  DATA    5C,0A,58
1226:  DATA    F6,3B,8F
1228:  DATA    00,C0,3C
122A:  DATA    8B,28,AC
122C:  DATA    3C,BE,F6
122E:  DATA    3F,D2,D5
1230:  DATA    44,16,8C
1232:  DATA    15,D7,BF
1234:  DATA    69,00,5A
1236:  DATA    2E,1B,87
1238:  DATA    99,3F,9A
123A:  DATA    5F,AD,4B
123C:  DATA    91,E4,01
123E:  DATA    C0,5D,11
1240:  DATA    2F,92,E4
1242:  DATA    81,FB,3F
1244:  DATA    38,DA,91
1246:  DATA    80,9D,C5
1248:  DATA    E0,BF,6F
124A:  DATA    12,C0,B4
124C:  DATA    C3,09,AB
124E:  DATA    3F,6B,C1
1250:  DATA    03,4E,C1
1252:  DATA    B5,45,BF
1254:  DATA    F7,40,05
1256:  DATA    FF,00,60
1258:  DATA    EF,3F,F3
125A:  DATA    A3,E2,F7
125C:  DATA    D7,FF,01
125E:  DATA    40,C0,B4
1260:  DATA    FF,05,3C
1262:  DATA    58,FC,3F
1264:  DATA    3B,D3,C0
1266:  DATA    B5,BA,8C
1268:  DATA    E2,3F,39
126A:  DATA    D3,C7,3D
126C:  DATA    41,79,B2
126E:  DATA    3F,87,0D
1270:  DATA    3C,50,D0
1272:  DATA    AF,62,3F
1274:  DATA    30,4B,8D
1276:  DATA    A2,82,AA
1278:  DATA    04,40,09
127A:  DATA    A0,40,4A
127C:  DATA    05,76,03
127E:  DATA    40,EC,9E
1280:  DATA    37,88,A6
1282:  DATA    44,F0,3F
1284:  DATA    8F,12,8D
1286:  DATA    29,9A,5B
1288:  DATA    C7,3F,0E
128A:  DATA    E0,80,7C
128C:  DATA    A1,D8,86
128E:  DATA    3F,29,4B
1290:  DATA    FB,95,C2
1292:  DATA    37,1A,3F
1294:  DATA    E8,03,E8
1296:  DATA    03,E8,03
1298:  DATA    C0,0C,08
129A:  DATA    BA,00,C0
129C:  DATA    06,09,04
129E:  DATA    00,00,00
12A0:  INC     W2,W2
12A2:  CP      W2,#1
12A4:  BRA     NZ,12AE
12A6:  TBLRDL  [W1],W3
12A8:  TBLRDH  [W1++],W4
12AA:  MOV.B   6,W0L
12AC:  RETURN  
12AE:  CP      W2,#2
12B0:  BRA     NZ,12B6
12B2:  MOV.B   7,W0L
12B4:  RETURN  
12B6:  MOV.B   8,W0L
12B8:  CLR     W2
12BA:  RETURN  
12BC:  MOV     #0,W6
12BE:  MOV     #0,W0
12C0:  MOV     W0,32
12C2:  MOV     #121E,W0
12C4:  MOV     W0,W1
12C6:  CLR     W2
12C8:  CALL    12A0
12CC:  MOV.B   W0L,B
12CE:  CALL    12A0
12D2:  MOV.B   W0L,A
12D4:  CP0     W5
12D6:  BRA     Z,130A
12D8:  BTSS    W5.F
12DA:  BRA     12EA
12DC:  CALL    12A0
12E0:  MOV.B   W0L,D
12E2:  CALL    12A0
12E6:  MOV.B   W0L,C
12E8:  BCLR    W5.F
12EA:  BTSS    W5.E
12EC:  BRA     12FE
12EE:  BCLR    W5.E
12F0:  DEC     W5,W5
12F2:  CALL    12A0
12F6:  MOV.B   W0L,W7L
12F8:  REPEAT  W5
12FA:  MOV.B   W7L,[W6++]
12FC:  BRA     12C8
12FE:  CALL    12A0
1302:  MOV.B   W0L,[W6++]
1304:  DEC     W5,W5
1306:  BRA     NZ,12FE
1308:  BRA     12C8
.................... { 
....................     sprintf(Serial_OutputBuffer, "\nMotor Control Unit v0.1\r\n");
130A:  MOV     #920,W4
130C:  MOV     W4,968
130E:  MOV     #0,W1
1310:  MOV     W1,W0
1312:  CLR.B   1
1314:  CALL    3F0
1318:  INC     W1,W1
131A:  MOV     W1,[W15++]
131C:  MOV     W0,[W15++]
131E:  MOV     [--W15],W0
1320:  CALL    6E4
1324:  MOV     [--W15],W1
1326:  MOV     #19,W0
1328:  CPSGT   W1,W0
132A:  BRA     1310
....................     printf(Serial_OutputBuffer);
132C:  MOV     #920,W1
132E:  CP0.B   [W1]
1330:  BRA     Z,1340
1332:  BTSC.B  219.1
1334:  BRA     1332
1336:  MOV.B   [W1+#0],W0L
1338:  MOV.B   W0L,21A
133A:  CLR.B   21B
133C:  INC     W1,W1
133E:  BRA     132E
....................  
....................    freq = 1;
1340:  MOV     #1,W4
1342:  MOV     W4,916
....................    
....................    initMCPWM();
1344:  CALL    6F2
....................    fill_sine_table();
1348:  CALL    FDE
.................... //!   timer_reload();
.................... //!   voltage_gain(); 
....................    
....................    output_drive(LED_PIN);
134C:  BCLR.B  2C6.5
....................    output_drive(PWM_tick_pin);
134E:  BCLR.B  2C6.2
....................    output_drive(TIM_tick_pin);   
1350:  BCLR.B  2C6.3
....................    
....................    setup_adc(ADC_CLOCK_DIV_32);
1352:  MOV     #1F1F,W4
1354:  MOV     W4,2A4
1356:  MOV     #80E0,W4
1358:  MOV     W4,2A0
....................    setup_adc_ports(ADC_pin);
135A:  MOV     #FFFE,W4
135C:  MOV     W4,2A8
135E:  CLR     2A2
....................    set_adc_channel(0);
1360:  CLR     2A6
....................    delay_us(10);
1362:  REPEAT  #9E
1364:  NOP     
....................    
.................... 
....................    setup_timer1(TMR_INTERNAL | TMR_DIV_BY_64,timer_table[freq]);            
1366:  MOV     916,W0
1368:  SL      W0,#1,W0
136A:  CALL    100
136E:  MOV     W0,W5
1370:  CLR     104
1372:  MOV     W5,102
1374:  MOV     #8020,W4
1376:  MOV     W4,104
....................    enable_interrupts(INT_TIMER1);  
1378:  BSET.B  8C.3
....................       
....................    enable_interrupts(INT_PWM1);  
137A:  BSET.B  90.7
....................    enable_interrupts(INTR_GLOBAL);
137C:  BCLR.B  81.7
137E:  CLR     42
1380:  BSET.B  81.7
....................    
.................... //!   duty[0] = 50;
.................... //!   duty[1] = 50;    
.................... //!   duty[2] = 50;  
.................... //!   
.................... //!   *(P1DC1+1) = duty[0]>>8;   *P1DC1 = duty[0];
....................    
....................   
....................    
....................     
....................    while(TRUE)         
....................    {
....................       
....................       if (tick) {
1382:  BTSS.B  91A.0
1384:  BRA     1482
....................          raw_adc = read_adc();
1386:  BCLR.B  2A0.0
1388:  BSET.B  2A0.1
138A:  BTSS.B  2A0.0
138C:  BRA     138A
138E:  PUSH    280
1390:  POP     912
....................          if (raw_adc > 1023) 
1392:  MOV     912,W4
1394:  MOV     #3FF,W3
1396:  CP      W3,W4
1398:  BRA     C,139E
....................          {
....................             raw_adc = 1023;
139A:  MOV     #3FF,W4
139C:  MOV     W4,912
....................          }
....................          kalman_big_1 =  raw_adc << kalman_up;
139E:  MOV     #12,W4
13A0:  MOV     912,W0
13A2:  MOV     #0,W1
13A4:  INC     W4,W4
13A6:  DEC     W4,W4
13A8:  BRA     Z,13B0
13AA:  SL      W0,W0
13AC:  RLC     W1,W1
13AE:  BRA     13A6
13B0:  MOV     W0,95C
13B2:  MOV     W1,95E
....................          kalman_diff = kalman_big_1 - kalman_big_2;
13B4:  MOV     95C,W4
13B6:  MOV     960,W3
13B8:  SUB     W4,W3,W0
13BA:  MOV     W0,964
13BC:  MOV     95E,W4
13BE:  MOV     962,W3
13C0:  SUBB    W4,W3,W0
13C2:  MOV     W0,966
....................          if(kalman_diff > 0)
13C4:  MOV     966,W4
13C6:  CP      W4,#0
13C8:  BRA     LT,13F0
13CA:  BRA     GT,13D2
13CC:  MOV     964,W4
13CE:  CP      W4,#0
13D0:  BRA     LEU,13F0
....................          {
....................             kalman_diff = kalman_diff >> kalman_diff_down;
13D2:  MOV.B   965,W0L
13D4:  MOV.B   W0L,964
13D6:  MOV.B   966,W0L
13D8:  MOV.B   W0L,965
13DA:  MOV.B   967,W0L
13DC:  MOV.B   W0L,966
13DE:  CLR.B   967
....................             kalman_big_2 = kalman_big_2 + kalman_diff; 
13E0:  MOV     960,W0
13E2:  ADD     964,W0
13E4:  MOV     W0,960
13E6:  MOV     966,W4
13E8:  MOV     962,W3
13EA:  ADDC    W3,W4,W0
13EC:  MOV     W0,962
....................          }
13EE:  BRA     142C
....................          else if(kalman_diff < 0)
13F0:  MOV     966,W4
13F2:  CP      W4,#0
13F4:  BRA     GT,142C
13F6:  BRA     LT,13FE
13F8:  MOV     964,W4
13FA:  CP      W4,#0
13FC:  BRA     C,142C
....................          {
....................             kalman_diff = 0 - kalman_diff;
13FE:  MOV     #0,W4
1400:  MOV     964,W3
1402:  SUB     W4,W3,W0
1404:  MOV     W0,964
1406:  MOV     #0,W4
1408:  MOV     966,W3
140A:  SUBB    W4,W3,W0
140C:  MOV     W0,966
....................             kalman_diff = kalman_diff >> kalman_diff_down;
140E:  MOV.B   965,W0L
1410:  MOV.B   W0L,964
1412:  MOV.B   966,W0L
1414:  MOV.B   W0L,965
1416:  MOV.B   967,W0L
1418:  MOV.B   W0L,966
141A:  CLR.B   967
....................             kalman_big_2 = kalman_big_2 - kalman_diff;   
141C:  MOV     960,W4
141E:  MOV     964,W3
1420:  SUB     W4,W3,W0
1422:  MOV     W0,960
1424:  MOV     962,W4
1426:  MOV     966,W3
1428:  SUBB    W4,W3,W0
142A:  MOV     W0,962
....................          }
....................          if(kalman_big_2 < 0)
142C:  MOV     962,W4
142E:  CP      W4,#0
1430:  BRA     GT,143E
1432:  BRA     LT,143A
1434:  MOV     960,W4
1436:  CP      W4,#0
1438:  BRA     C,143E
....................          {
....................             kalman_big_2 = 0 ;
143A:  CLR     960
143C:  CLR     962
....................          }
....................          raw_adc = kalman_big_2 >> kalman_up;
143E:  MOV     #12,W4
1440:  MOV     960,W0
1442:  MOV     962,W1
1444:  INC     W4,W4
1446:  DEC     W4,W4
1448:  BRA     Z,1450
144A:  LSR     W1,W1
144C:  RRC     W0,W0
144E:  BRA     1446
1450:  MOV     W0,912
....................          raw_adc = raw_adc >> 2;
1452:  LSR     912
1454:  LSR     912
....................          
....................          
....................          throttle_level = raw_adc;  
1456:  PUSH    912
1458:  POP     914
....................          
....................          if (throttle_level > 255)
145A:  MOV     914,W4
145C:  MOV     #FF,W3
145E:  CP      W3,W4
1460:  BRA     GE,1466
....................          {
....................             throttle_level = 255;
1462:  MOV     #FF,W4
1464:  MOV     W4,914
....................          }
....................          if (throttle_level < 0)   
1466:  MOV     914,W4
1468:  CP      W4,#0
146A:  BRA     GE,146E
....................          {  
....................             throttle_level = 0; 
146C:  CLR     914
....................          }  
....................          
....................          freq = throttle_level;
146E:  PUSH    914
1470:  POP     916
....................        
....................          peak_voltage = gain_table[throttle_level];
1472:  MOV     914,W4
1474:  MUL.UU  W4,#2,W0
1476:  CALL    278
147A:  MOV     W0,8B8
.................... //!         peak_voltage = gain_table[55];  
....................         
....................          output_bit(PWM_tick_pin , 0);
147C:  BCLR.B  2CA.2
147E:  BCLR.B  2C6.2
....................          tick = 0;      
1480:  BCLR.B  91A.0
....................       } 
....................       
....................       if (uart_tick) 
1482:  BTSS.B  91A.1
1484:  BRA     1506
....................       {
.................... //!         sprintf(Serial_OutputBuffer, "CHECKING SERIAL!");
....................          sprintf(Serial_OutputBuffer, "\r\n %d , %d , %d , %d", raw_adc , throttle_level , freq , peak_voltage);
1486:  MOV     #920,W4
1488:  MOV     W4,968
148A:  MOV.B   #D,W0L
148C:  CALL    6E4
1490:  MOV.B   #A,W0L
1492:  CALL    6E4
1496:  MOV.B   #20,W0L
1498:  CALL    6E4
149C:  MOV     912,W0
149E:  MOV     #0,W4
14A0:  CALL    10A6
14A4:  MOV.B   #20,W0L
14A6:  CALL    6E4
14AA:  MOV.B   #2C,W0L
14AC:  CALL    6E4
14B0:  MOV.B   #20,W0L
14B2:  CALL    6E4
14B6:  MOV     914,W0
14B8:  MOV     #0,W4
14BA:  CALL    10A6
14BE:  MOV.B   #20,W0L
14C0:  CALL    6E4
14C4:  MOV.B   #2C,W0L
14C6:  CALL    6E4
14CA:  MOV.B   #20,W0L
14CC:  CALL    6E4
14D0:  MOV     916,W0
14D2:  MOV     #0,W4
14D4:  CALL    10A6
14D8:  MOV.B   #20,W0L
14DA:  CALL    6E4
14DE:  MOV.B   #2C,W0L
14E0:  CALL    6E4
14E4:  MOV.B   #20,W0L
14E6:  CALL    6E4
14EA:  MOV     8B8,W0
14EC:  MOV     #0,W4
14EE:  CALL    10A6
....................          printf(Serial_OutputBuffer);
14F2:  MOV     #920,W1
14F4:  CP0.B   [W1]
14F6:  BRA     Z,1506
14F8:  BTSC.B  219.1
14FA:  BRA     14F8
14FC:  MOV.B   [W1+#0],W0L
14FE:  MOV.B   W0L,21A
1500:  CLR.B   21B
1502:  INC     W1,W1
1504:  BRA     14F4
....................          
....................       
....................       }
1506:  BRA     1382
....................     } 
.................... }    
.................... 
1508:  PWRSAV  #0
.................... 
.................... void initMCPWM(void) 
.................... {    
....................    *(P1TCON+1)=0x80;  *P1TCON=0x02;
*
06F2:  MOV.B   #80,W0L
06F4:  MOV.B   W0L,1C1
06F6:  MOV.B   #2,W0L
06F8:  MOV.B   W0L,1C0
....................    *(P1TPER+1)=0x03;  *P1TPER=0xE7;  
06FA:  MOV.B   #3,W0L
06FC:  MOV.B   W0L,1C5
06FE:  MOV.B   #E7,W0L
0700:  MOV.B   W0L,1C4
....................    *(P1SECMP+1)=0x00;  *P1SECMP=0x01; //
0702:  CLR.B   1C7
0704:  MOV.B   #1,W0L
0706:  MOV.B   W0L,1C6
....................    *(PWM1CON1+1)=0x00;  *PWM1CON1=0x77;  
0708:  CLR.B   1C9
070A:  MOV.B   #77,W0L
070C:  MOV.B   W0L,1C8
....................    *(PWM1CON2+1)=0x00;  *PWM1CON2=0x02;
070E:  CLR.B   1CB
0710:  MOV.B   #2,W0L
0712:  MOV.B   W0L,1CA
....................    *(P1DTCON1+1)=0x00;  *P1DTCON1=0x10; //0x09
0714:  CLR.B   1CD
0716:  MOV.B   #10,W0L
0718:  MOV.B   W0L,1CC
....................    *(P1DTCON2+1)=0x00;  *P1DTCON2=0x00;
071A:  CLR.B   1CF
071C:  CLR.B   1CE
....................    *(P1FLTACON+1)=0x00;  *P1FLTACON=0x00; //0x0000
071E:  CLR.B   1D1
0720:  CLR.B   1D0
....................    *(P1OVDCON+1)=0x3F;  *P1OVDCON=0x0F;
0722:  MOV.B   #3F,W0L
0724:  MOV.B   W0L,1D5
0726:  MOV.B   #F,W0L
0728:  MOV.B   W0L,1D4
....................    *(P1DC1+1) = duty[0]>>8;   *P1DC1 = duty[0]; 
072A:  MOV.B   8B1,W0L
072C:  MOV.B   W0L,1D7
072E:  MOV.B   8B0,W0L
0730:  MOV.B   W0L,1D6
....................    *(P1DC2+1) = duty[1]>>8;   *P1DC2 = duty[1];
0732:  MOV.B   8B3,W0L
0734:  MOV.B   W0L,1D9
0736:  MOV.B   8B2,W0L
0738:  MOV.B   W0L,1D8
....................    *(P1DC3+1) = duty[2]>>8;   *P1DC3 = duty[2];  
073A:  MOV.B   8B5,W0L
073C:  MOV.B   W0L,1DB
073E:  MOV.B   8B4,W0L
0740:  MOV.B   W0L,1DA
....................    *(IPC14+1) =0x00;*(IPC14) =0x70;
0742:  CLR.B   C1
0744:  MOV.B   #70,W0L
0746:  MOV.B   W0L,C0
0748:  RETURN  
....................   }
.................... 
.................... 
....................    
.................... void fill_sine_table(void)
*
0FDE:  MOV     W5,[W15++]
0FE0:  MOV     W6,[W15++]
0FE2:  MOV     W7,[W15++]
0FE4:  MOV     W8,[W15++]
.................... {
....................    for(sine_index=0;sine_index < max_samples;sine_index++)  
0FE6:  CLR     902
0FE8:  MOV     902,W4
0FEA:  CP      W4,#1E
0FEC:  BRA     C,109C
....................    {
....................       theeta=sine_index*2.0*PI/max_samples;
0FEE:  MOV     902,W0
0FF0:  MOV     #0,W1
0FF2:  MOV     #0,W2
0FF4:  MOV     #0,W3
0FF6:  CALL    74A
0FFA:  MOV     #0,W4
0FFC:  MOV     #0,W5
0FFE:  MOV     #0,W6
1000:  MOV     #4000,W7
1002:  CALL    7B4
1006:  MOV     W0,W5
1008:  MOV     W1,W6
100A:  MOV     W2,W7
100C:  MOV     W3,W8
100E:  MOV     W5,[W15++]
1010:  MOV     W6,[W15++]
1012:  MOV     W7,[W15++]
1014:  MOV     W5,W0
1016:  MOV     W6,W1
1018:  MOV     W7,W2
101A:  MOV     W8,W3
101C:  MOV     #2D18,W4
101E:  MOV     #5444,W5
1020:  MOV     #21FB,W6
1022:  MOV     #4009,W7
1024:  CALL    7B4
1028:  MOV     [--W15],W7
102A:  MOV     [--W15],W6
102C:  MOV     [--W15],W5
102E:  MOV     W0,W5
1030:  MOV     W1,W6
1032:  MOV     W2,W7
1034:  MOV     W3,W8
1036:  MOV     W5,[W15++]
1038:  MOV     W6,[W15++]
103A:  MOV     W7,[W15++]
103C:  MOV     W5,W0
103E:  MOV     W6,W1
1040:  MOV     W7,W2
1042:  MOV     W8,W3
1044:  MOV     #0,W4
1046:  MOV     #0,W5
1048:  MOV     #0,W6
104A:  MOV     #403E,W7
104C:  CALL    8C4
1050:  MOV     [--W15],W7
1052:  MOV     [--W15],W6
1054:  MOV     [--W15],W5
1056:  MOV     W0,90A
1058:  MOV     W1,90C
105A:  MOV     W2,90E
105C:  MOV     W3,910
....................       sine_table[sine_index]=255*sin(theeta);
105E:  MOV     902,W0
1060:  SL      W0,#1,W0
1062:  MOV     #8C6,W4
1064:  ADD     W0,W4,W5
1066:  PUSH    90A
1068:  POP     96E
106A:  PUSH    90C
106C:  POP     970
106E:  PUSH    90E
1070:  POP     972
1072:  PUSH    910
1074:  POP     974
1076:  CALL    F44
107A:  MOV     W5,[W15++]
107C:  MOV     W0,W4
107E:  MOV     W1,W5
1080:  MOV     W2,W6
1082:  MOV     W3,W7
1084:  MOV     #0,W0
1086:  MOV     #0,W1
1088:  MOV     #E000,W2
108A:  MOV     #406F,W3
108C:  CALL    7B4
1090:  MOV     [--W15],W5
1092:  CALL    F80
1096:  MOV     W0,[W5]
1098:  INC     0902
109A:  BRA     FE8
....................    }
109C:  MOV     [--W15],W8
109E:  MOV     [--W15],W7
10A0:  MOV     [--W15],W6
10A2:  MOV     [--W15],W5
10A4:  RETURN  
.................... }
.................... 
.................... 
.................... //!void timer_reload(void) 
.................... //!{
.................... //!   double intr_per_sample = 0.0;
.................... //!   
.................... //!   for (int sample = 1 ; sample <= max_freq ; sample++) 
.................... //!   {
.................... //!      intr_per_sample = ((1.0/sample)*1000)/max_samples;
.................... //!      timer_table[sample] = (intr_per_sample/per_clock_tick) - 100;     
.................... //!   }
.................... //!   timer_table[0] = timer_table[1];
.................... //!   
.................... //!   
.................... //!}
.................... 
.................... //!void voltage_gain(void) 
.................... //!{
.................... //!   for (int i = 0 ; i <= break_level ; i++) {
.................... //!            gain_table[i] = 0; 
.................... //!   }
.................... //!   
.................... //!   for (int i = break_level+1 ; i <= sustain_level; i++) 
.................... //!   {
.................... //!       temp = SLOPE * i + pedestal_amplitude;
.................... //!       if(temp > peak_amplitude ) 
.................... //!       {
.................... //!         temp = peak_amplitude;
.................... //!       }
.................... //!       gain_table[i] = temp;
.................... //!   }
.................... //!   for (int i = sustain_level+1 ; i <= 255; i++) {     
.................... //!      gain_table[i] = peak_amplitude;
.................... //!   }
.................... //!
.................... //!}
.................... 
.................... 
.................... 
.................... 

Configuration Fuses:
   Word  1L: 0306   XT_PLL8 PR CKSFSM
          H: 0000  
   Word  2L: 003F   WPSB16 WPSA512 NOWDT
          H: 0000  
   Word  3L: 8793   PUT64 BORV42 BROWNOUT LPOL_HIGH HPOL_HIGH NOPWMPIN MCLR
          H: 0000  
   Word  4L: 310F  
          H: 0000  
   Word  5L: 330F  
          H: 0000  
   Word  6L: 0004   WRT PROTECT
          H: 0000  
   Word  7L: C003   ICSP1 NODEBUG
          H: 0000  
