CCS PCD C Compiler, Version 5.112, 5967               08-May-24 10:48

               Filename:   C:\Users\eelab\Documents\dspic30f4011\main.lst

               ROM used:   5354 bytes (16%)
                           Largest free fragment is 27414
               RAM used:   490 (24%) at main() level
                           697 (34%) worst case
               Stack used: 96 locations (46 in main + 50 for interrupts)
               Stack size: 128

*
0000:  GOTO    11B4
*
0022:  DATA    A8,04,00
*
0062:  DATA    18,04,00
.................... #include <30F4011.h>
.................... //////////// Standard Header file for the DSPIC30F4011 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device DSPIC30F4011
*
0100:  CLR     32
0102:  MOV     #156,W3
0104:  SUB     W0,W3,W3
0106:  BRA     C,110
0108:  MOV     #122,W3
010A:  ADD     W3,W0,W0
010C:  TBLRDL  [W0],W0
010E:  RETURN  
0110:  MOV     #122,W0
0112:  BCLR.B  6.0
0114:  ADD     W3,W3,W3
0116:  ADD     W3,W0,W3
0118:  TBLRDH  [W3++],W0
011A:  TBLRDH  [W3],W3
011C:  SL      W3,#8,W3
011E:  IOR      W3,  W0,W0
0120:  RETURN  
0122:  DATA    2C,FE,50
0124:  DATA    2C,FE,14
0126:  DATA    2C,FE,21
0128:  DATA    2C,FE,14
012A:  DATA    2C,FE,F2
012C:  DATA    2C,FE,13
012E:  DATA    2C,FE,C3
0130:  DATA    2C,FE,13
0132:  DATA    2C,FE,95
0134:  DATA    2C,FE,13
0136:  DATA    2C,FE,68
0138:  DATA    2C,FE,13
013A:  DATA    2C,FE,3B
013C:  DATA    2C,FE,13
013E:  DATA    2C,FE,0E
0140:  DATA    2C,FE,13
0142:  DATA    2C,FE,E1
0144:  DATA    2C,FE,12
0146:  DATA    2C,FE,B5
0148:  DATA    2C,FE,12
014A:  DATA    2C,FE,89
014C:  DATA    22,EF,12
014E:  DATA    C3,E1,5D
0150:  DATA    CD,D5,12
0152:  DATA    09,CB,31
0154:  DATA    4C,C1,12
0156:  DATA    71,B8,06
0158:  DATA    5C,B0,12
015A:  DATA    F3,A8,DC
015C:  DATA    21,A2,11
015E:  DATA    D6,9B,B1
0160:  DATA    02,96,11
0162:  DATA    98,90,87
0164:  DATA    8E,8B,11
0166:  DATA    DA,86,5D
0168:  DATA    73,82,11
016A:  DATA    53,7E,33
016C:  DATA    72,7A,11
016E:  DATA    CC,76,0A
0170:  DATA    5B,73,11
0172:  DATA    1B,70,E1
0174:  DATA    08,6D,10
0176:  DATA    1D,6A,B8
0178:  DATA    5A,67,10
017A:  DATA    B9,64,8F
017C:  DATA    39,62,10
017E:  DATA    D7,5F,67
0180:  DATA    92,5D,10
0182:  DATA    67,5B,3F
0184:  DATA    54,59,10
0186:  DATA    58,57,17
0188:  DATA    72,55,10
018A:  DATA    A0,53,EF
018C:  DATA    E1,51,0F
018E:  DATA    33,50,C8
0190:  DATA    96,4E,0F
0192:  DATA    09,4D,A0
0194:  DATA    8B,4B,0F
0196:  DATA    1B,4A,79
0198:  DATA    B8,48,0F
019A:  DATA    61,47,53
019C:  DATA    17,46,0F
019E:  DATA    D8,44,2C
01A0:  DATA    A3,43,0F
01A2:  DATA    79,42,06
01A4:  DATA    58,41,0F
01A6:  DATA    40,40,E0
01A8:  DATA    31,3F,0E
01AA:  DATA    2B,3E,BA
01AC:  DATA    2C,3D,0E
01AE:  DATA    35,3C,94
01B0:  DATA    45,3B,0E
01B2:  DATA    5C,3A,6F
01B4:  DATA    7A,39,0E
01B6:  DATA    9E,38,4A
01B8:  DATA    C8,37,0E
01BA:  DATA    F8,36,25
01BC:  DATA    2D,36,0E
01BE:  DATA    68,35,00
01C0:  DATA    A8,34,0E
01C2:  DATA    EC,33,DB
01C4:  DATA    36,33,0D
01C6:  DATA    84,32,B7
01C8:  DATA    D6,31,0D
01CA:  DATA    2D,31,93
01CC:  DATA    87,30,0D
01CE:  DATA    E6,2F,6F
01D0:  DATA    48,2F,0D
01D2:  DATA    AE,2E,4B
01D4:  DATA    17,2E,0D
01D6:  DATA    84,2D,28
01D8:  DATA    F4,2C,0D
01DA:  DATA    67,2C,04
01DC:  DATA    DD,2B,0D
01DE:  DATA    56,2B,E1
01E0:  DATA    D2,2A,0C
01E2:  DATA    50,2A,BE
01E4:  DATA    D1,29,0C
01E6:  DATA    55,29,9B
01E8:  DATA    DB,28,0C
01EA:  DATA    64,28,79
01EC:  DATA    EF,27,0C
01EE:  DATA    7C,27,56
01F0:  DATA    0B,27,0C
01F2:  DATA    9C,26,34
01F4:  DATA    30,26,0C
01F6:  DATA    C5,25,12
01F8:  DATA    5C,25,0C
01FA:  DATA    F5,24,F0
01FC:  DATA    90,24,0B
01FE:  DATA    2D,24,CF
0200:  DATA    CB,23,0B
0202:  DATA    6B,23,AD
0204:  DATA    0D,23,0B
0206:  DATA    B0,22,8C
0208:  DATA    55,22,0B
020A:  DATA    FB,21,6B
020C:  DATA    A3,21,0B
020E:  DATA    4B,21,4A
0210:  DATA    F6,20,0B
0212:  DATA    A1,20,2A
0214:  DATA    4E,20,0B
0216:  DATA    FC,1F,09
0218:  DATA    AC,1F,0B
021A:  DATA    5C,1F,E9
021C:  DATA    0E,1F,0A
021E:  DATA    C1,1E,C9
0220:  DATA    74,1E,0A
0222:  DATA    29,1E,A9
0224:  DATA    DF,1D,0A
0226:  DATA    96,1D,89
0228:  DATA    4E,1D,0A
022A:  DATA    07,1D,6A
022C:  DATA    C1,1C,0A
022E:  DATA    7B,1C,4A
0230:  DATA    37,1C,0A
0232:  DATA    F3,1B,2B
0234:  DATA    B1,1B,0A
0236:  DATA    6F,1B,0C
0238:  DATA    2E,1B,0A
023A:  DATA    ED,1A,EE
023C:  DATA    AE,1A,09
023E:  DATA    6F,1A,CF
0240:  DATA    31,1A,09
0242:  DATA    F3,19,B1
0244:  DATA    B6,19,09
0246:  DATA    7A,19,93
0248:  DATA    3F,19,09
024A:  DATA    04,19,75
024C:  DATA    CA,18,09
024E:  DATA    91,18,57
0250:  DATA    58,18,09
0252:  DATA    1F,18,39
0254:  DATA    E8,17,09
0256:  DATA    B0,17,1C
0258:  DATA    7A,17,09
025A:  DATA    43,17,FF
025C:  DATA    0E,17,08
025E:  DATA    D9,16,E2
0260:  DATA    A4,16,08
0262:  DATA    70,16,C5
0264:  DATA    3C,16,08
0266:  DATA    09,16,A9
0268:  DATA    D6,15,08
026A:  DATA    A4,15,8C
026C:  DATA    72,15,08
026E:  DATA    41,15,70
0270:  DATA    10,15,08
0272:  DATA    DF,14,54
0274:  DATA    AF,14,08
0276:  DATA    7F,14,00
0278:  CLR     32
027A:  MOV     #156,W3
027C:  SUB     W0,W3,W3
027E:  BRA     C,288
0280:  MOV     #29A,W3
0282:  ADD     W3,W0,W0
0284:  TBLRDL  [W0],W0
0286:  RETURN  
0288:  MOV     #29A,W0
028A:  BCLR.B  6.0
028C:  ADD     W3,W3,W3
028E:  ADD     W3,W0,W3
0290:  TBLRDH  [W3++],W0
0292:  TBLRDH  [W3],W3
0294:  SL      W3,#8,W3
0296:  IOR      W3,  W0,W0
0298:  RETURN  
029A:  DATA    00,00,B1
029C:  DATA    00,00,00
029E:  DATA    00,00,B2
02A0:  DATA    00,00,00
02A2:  DATA    00,00,B4
02A4:  DATA    00,00,00
02A6:  DATA    00,00,B6
02A8:  DATA    00,00,00
02AA:  DATA    00,00,B8
02AC:  DATA    00,00,00
02AE:  DATA    00,00,BA
02B0:  DATA    00,00,00
02B2:  DATA    00,00,BC
02B4:  DATA    00,00,00
02B6:  DATA    00,00,BF
02B8:  DATA    00,00,00
02BA:  DATA    00,00,C1
02BC:  DATA    00,00,00
02BE:  DATA    00,00,C2
02C0:  DATA    00,00,00
02C2:  DATA    55,00,C3
02C4:  DATA    55,00,00
02C6:  DATA    55,00,C4
02C8:  DATA    56,00,00
02CA:  DATA    56,00,C6
02CC:  DATA    56,00,00
02CE:  DATA    56,00,C7
02D0:  DATA    56,00,00
02D2:  DATA    56,00,C8
02D4:  DATA    57,00,00
02D6:  DATA    57,00,C9
02D8:  DATA    57,00,00
02DA:  DATA    57,00,CB
02DC:  DATA    57,00,00
02DE:  DATA    58,00,CC
02E0:  DATA    58,00,00
02E2:  DATA    58,00,CE
02E4:  DATA    58,00,00
02E6:  DATA    58,00,CF
02E8:  DATA    59,00,00
02EA:  DATA    59,00,D1
02EC:  DATA    59,00,00
02EE:  DATA    59,00,D2
02F0:  DATA    5A,00,00
02F2:  DATA    5A,00,D4
02F4:  DATA    5A,00,00
02F6:  DATA    5A,00,D5
02F8:  DATA    5B,00,00
02FA:  DATA    5B,00,D7
02FC:  DATA    5B,00,00
02FE:  DATA    5B,00,D8
0300:  DATA    5C,00,00
0302:  DATA    5C,00,DA
0304:  DATA    5C,00,00
0306:  DATA    5C,00,DC
0308:  DATA    5D,00,00
030A:  DATA    5D,00,DE
030C:  DATA    5D,00,00
030E:  DATA    5E,00,DF
0310:  DATA    5E,00,00
0312:  DATA    5E,00,E1
0314:  DATA    5F,00,00
0316:  DATA    5F,00,E3
0318:  DATA    5F,00,00
031A:  DATA    5F,00,E5
031C:  DATA    60,00,00
031E:  DATA    60,00,E7
0320:  DATA    60,00,00
0322:  DATA    61,00,E9
0324:  DATA    61,00,00
0326:  DATA    61,00,EB
0328:  DATA    62,00,00
032A:  DATA    62,00,ED
032C:  DATA    62,00,00
032E:  DATA    63,00,F0
0330:  DATA    63,00,00
0332:  DATA    64,00,F2
0334:  DATA    64,00,00
0336:  DATA    65,00,F4
0338:  DATA    65,00,00
033A:  DATA    65,00,F7
033C:  DATA    66,00,00
033E:  DATA    66,00,F9
0340:  DATA    66,00,00
0342:  DATA    67,00,FC
0344:  DATA    67,00,00
0346:  DATA    68,00,FE
0348:  DATA    68,00,00
034A:  DATA    69,00,01
034C:  DATA    69,00,01
034E:  DATA    6A,00,04
0350:  DATA    6A,00,01
0352:  DATA    6A,00,07
0354:  DATA    6B,00,01
0356:  DATA    6B,00,0A
0358:  DATA    6C,00,01
035A:  DATA    6C,00,0D
035C:  DATA    6D,00,01
035E:  DATA    6E,00,10
0360:  DATA    6E,00,01
0362:  DATA    6F,00,13
0364:  DATA    6F,00,01
0366:  DATA    70,00,17
0368:  DATA    70,00,01
036A:  DATA    71,00,1A
036C:  DATA    71,00,01
036E:  DATA    72,00,1E
0370:  DATA    72,00,01
0372:  DATA    73,00,21
0374:  DATA    74,00,01
0376:  DATA    74,00,25
0378:  DATA    75,00,01
037A:  DATA    75,00,29
037C:  DATA    76,00,01
037E:  DATA    77,00,2D
0380:  DATA    78,00,01
0382:  DATA    78,00,32
0384:  DATA    79,00,01
0386:  DATA    7A,00,36
0388:  DATA    7A,00,01
038A:  DATA    7B,00,3B
038C:  DATA    7C,00,01
038E:  DATA    7D,00,40
0390:  DATA    7D,00,01
0392:  DATA    7E,00,45
0394:  DATA    7F,00,01
0396:  DATA    7F,00,4A
0398:  DATA    80,00,01
039A:  DATA    81,00,4F
039C:  DATA    82,00,01
039E:  DATA    82,00,55
03A0:  DATA    83,00,01
03A2:  DATA    84,00,5B
03A4:  DATA    85,00,01
03A6:  DATA    86,00,61
03A8:  DATA    87,00,01
03AA:  DATA    88,00,68
03AC:  DATA    89,00,01
03AE:  DATA    8A,00,6F
03B0:  DATA    8B,00,01
03B2:  DATA    8C,00,76
03B4:  DATA    8D,00,01
03B6:  DATA    8E,00,7D
03B8:  DATA    8F,00,01
03BA:  DATA    90,00,85
03BC:  DATA    91,00,01
03BE:  DATA    92,00,8D
03C0:  DATA    93,00,01
03C2:  DATA    94,00,96
03C4:  DATA    95,00,01
03C6:  DATA    96,00,9F
03C8:  DATA    97,00,01
03CA:  DATA    98,00,A9
03CC:  DATA    99,00,01
03CE:  DATA    9A,00,B4
03D0:  DATA    9B,00,01
03D2:  DATA    9C,00,B4
03D4:  DATA    9D,00,01
03D6:  DATA    9E,00,B4
03D8:  DATA    9F,00,01
03DA:  DATA    A1,00,B4
03DC:  DATA    A2,00,01
03DE:  DATA    A3,00,B4
03E0:  DATA    A4,00,01
03E2:  DATA    A6,00,B4
03E4:  DATA    A7,00,01
03E6:  DATA    A9,00,B4
03E8:  DATA    AA,00,01
03EA:  DATA    AC,00,B4
03EC:  DATA    AD,00,01
03EE:  DATA    AF,00,00
03F0:  CLR     32
03F2:  MOV     #3FC,W3
03F4:  ADD     W3,W0,W0
03F6:  TBLRDL.B[W0],W0L
03F8:  CLR.B   1
03FA:  RETURN  
03FC:  DATA    0A,4D,00
03FE:  DATA    6F,74,00
0400:  DATA    6F,72,00
0402:  DATA    20,43,00
0404:  DATA    6F,6E,00
0406:  DATA    74,72,00
0408:  DATA    6F,6C,00
040A:  DATA    20,55,00
040C:  DATA    6E,69,00
040E:  DATA    74,20,00
0410:  DATA    76,30,00
0412:  DATA    2E,31,00
0414:  DATA    0D,0A,00
0416:  DATA    00,00,00
*
0466:  MOV     W5,[W15++]
0468:  MOV     #C,W5
046A:  REPEAT  #3
046C:  MOV     [W5++],[W15++]
046E:  MUL.UU  W0,W2,W4
0470:  BTSS    W3.F
0472:  BRA     478
0474:  MUL.SS  W0,W3,W6
0476:  BRA     47A
0478:  MUL.UU  W0,W3,W6
047A:  BCLR.B  42.0
047C:  ADD     W6,W5,W5
047E:  ADDC    W7,#0,W8
0480:  BTSS    W1.F
0482:  BRA     488
0484:  MUL.SS  W1,W2,W6
0486:  BRA     48A
0488:  MUL.UU  W1,W2,W6
048A:  ADDC    W6,W5,W5
048C:  ADDC    W7,W8,W8
048E:  ADDC    #0,W9
0490:  MUL.SS  W1,W3,W6
0492:  ADDC    W6,W8,W8
0494:  ADDC    W9,W7,W7
0496:  MOV     W7,W3
0498:  MOV     W8,W2
049A:  MOV     W5,W1
049C:  MOV     W4,W0
049E:  MOV     #12,W5
04A0:  REPEAT  #3
04A2:  MOV     [--W15],[W5--]
04A4:  MOV     [--W15],W5
04A6:  RETURN  
*
06C2:  MOV     W1,[W15++]
06C4:  MOV     968,W1
06C6:  MOV.B   W0L,[W1++]
06C8:  CLR.B   [W1]
06CA:  MOV     [--W15],W1
06CC:  INC     0968
06CE:  RETURN  
*
0728:  MOV     W5,[W15++]
072A:  MOV     #C,W5
072C:  REPEAT  #3
072E:  MOV     [W5++],[W15++]
0730:  MOV     W0,W4
0732:  MOV     W1,W5
0734:  MOV     W2,W6
0736:  MOV     W3,W7
0738:  CLR     W0
073A:  CLR     W1
073C:  CLR     W2
073E:  CLR     W3
0740:  BCLR    W8.0
0742:  BTSS    W7.F
0744:  BRA     756
0746:  BSET    W8.0
0748:  COM     W7,W7
074A:  COM     W6,W6
074C:  COM     W5,W5
074E:  NEG     W4,W4
0750:  ADDC    W5,#0,W5
0752:  ADDC    W6,#0,W6
0754:  ADDC    W7,#0,W7
0756:  IOR      W4,  W5,W9
0758:  BRA     NZ,75E
075A:  IOR      W6,  W7,W9
075C:  BRA     Z,788
075E:  MOV     #473,W9
0760:  BTSC    W3.4
0762:  BRA     77A
0764:  BCLR.B  42.0
0766:  RLC     W4,W4
0768:  RLC     W5,W5
076A:  RLC     W6,W6
076C:  RLC     W7,W7
076E:  RLC     W0,W0
0770:  RLC     W1,W1
0772:  RLC     W2,W2
0774:  RLC     W3,W3
0776:  DEC     W9,W9
0778:  BRA     NZ,760
077A:  SL      W9,#4,W9
077C:  BCLR.B  42.0
077E:  BCLR    W9.F
0780:  BCLR    W3.4
0782:  XOR     W9,W3,W3
0784:  BTSC    W8.0
0786:  BSET    W3.F
0788:  MOV     #12,W5
078A:  REPEAT  #3
078C:  MOV     [--W15],[W5--]
078E:  MOV     [--W15],W5
0790:  RETURN  
0792:  MOV     W8,[W15++]
0794:  MOV     #12,W8
0796:  REPEAT  #4
0798:  MOV     [W8++],[W15++]
079A:  CLR     W11
079C:  MUL.UU  W12,#0,W12
079E:  MOV     W3,W8
07A0:  MOV     W7,W9
07A2:  MOV     #7FF,W10
07A4:  BCLR.B  42.0
07A6:  BCLR.B  42.1
07A8:  ASR     W8,#4,W8
07AA:  AND     W10,W8,W8
07AC:  CP0     W8
07AE:  BRA     Z,892
07B0:  BCLR.B  42.0
07B2:  BCLR.B  42.1
07B4:  ASR     W9,#4,W9
07B6:  AND     W10,W9,W9
07B8:  CP0     W9
07BA:  BRA     Z,892
07BC:  ADD     W9,W8,W8
07BE:  BTSC    W9.B
07C0:  BRA     7CA
07C2:  SUB     #3FF,W8
07C4:  BRA     Z,892
07C6:  BRA     NC,892
07C8:  BRA     7D0
07CA:  MOV     #401,W10
07CC:  ADD.B   W10L,W5L,W5L
07CE:  BRA     C,892
07D0:  XOR     W3,W7,W13
07D2:  BCLR.B  42.0
07D4:  BCLR.B  42.1
07D6:  AND     #F,W3
07D8:  BSET    W3.4
07DA:  AND     #F,W7
07DC:  BSET    W7.4
07DE:  MOV     W8,[W15++]
07E0:  MUL.UU  W4,W1,W8
07E2:  MUL.UU  W5,W0,W10
07E4:  ADD     W8,W10,W10
07E6:  ADDC    W9,W11,W11
07E8:  ADDC    #0,W12
07EA:  MUL.UU  W4,W2,W8
07EC:  ADD     W8,W11,W11
07EE:  ADDC    W9,W12,W12
07F0:  MUL.UU  W5,W1,W8
07F2:  CLR     W10
07F4:  ADD     W8,W11,W11
07F6:  ADDC    W9,W12,W12
07F8:  ADDC    #0,W10
07FA:  MUL.UU  W6,W0,W8
07FC:  ADD     W8,W11,W11
07FE:  ADDC    W9,W12,W12
0800:  ADDC    #0,W10
0802:  CLR     W11
0804:  MUL.UU  W4,W3,W8
0806:  ADD     W8,W12,W12
0808:  ADDC    W9,W10,W10
080A:  ADDC    #0,W11
080C:  MUL.UU  W5,W2,W8
080E:  ADD     W8,W12,W12
0810:  ADDC    W9,W10,W10
0812:  ADDC    #0,W11
0814:  MUL.UU  W6,W1,W8
0816:  ADD     W8,W12,W12
0818:  ADDC    W9,W10,W10
081A:  ADDC    #0,W11
081C:  MUL.UU  W7,W0,W8
081E:  ADD     W8,W12,W12
0820:  ADDC    W9,W10,W10
0822:  ADDC    #0,W11
0824:  MOV     W12,W0
0826:  CLR     W12
0828:  MUL.UU  W5,W3,W8
082A:  ADD     W8,W10,W10
082C:  ADDC    W9,W11,W11
082E:  ADDC    #0,W12
0830:  MUL.UU  W6,W2,W8
0832:  ADD     W8,W10,W10
0834:  ADDC    W9,W11,W11
0836:  ADDC    #0,W12
0838:  MUL.UU  W6,W3,W8
083A:  ADD     W8,W11,W11
083C:  ADDC    W9,W12,W12
083E:  MUL.UU  W7,W1,W8
0840:  ADD     W8,W10,W10
0842:  ADDC    W9,W11,W11
0844:  ADDC    #0,W12
0846:  MUL.UU  W7,W2,W8
0848:  ADD     W8,W11,W11
084A:  ADDC    W9,W12,W12
084C:  MUL.UU  W7,W3,W8
084E:  ADD     W8,W12,W12
0850:  MOV     W10,W1
0852:  MOV     W11,W2
0854:  MOV     W12,W3
0856:  MOV     #5,W4
0858:  BCLR.B  42.0
085A:  RRC     W3,W3
085C:  RRC     W2,W2
085E:  RRC     W1,W1
0860:  RRC     W0,W0
0862:  DEC     W4,W4
0864:  BRA     NZ,858
0866:  MOV     [--W15],W8
0868:  INC     W8,W8
086A:  IOR      W0,  W1,W6
086C:  BRA     Z,870
086E:  BRA     874
0870:  IOR      W2,  W3,W6
0872:  BRA     Z,884
0874:  BTSC    W3.4
0876:  BRA     884
0878:  BCLR.B  42.0
087A:  RLC     W0,W0
087C:  RLC     W1,W1
087E:  RLC     W2,W2
0880:  RLC     W3,W3
0882:  DEC     W8,W8
0884:  SL      W8,#4,W8
0886:  BCLR    W3.F
0888:  BTSC    W13.F
088A:  BSET    W3.F
088C:  BCLR    W3.4
088E:  XOR     W8,W3,W3
0890:  BRA     898
0892:  MUL.UU  W0,#0,W0
0894:  MUL.UU  W0,#0,W2
0896:  BRA     898
0898:  MOV     #1A,W8
089A:  REPEAT  #4
089C:  MOV     [--W15],[W8--]
089E:  MOV     [--W15],W8
08A0:  RETURN  
08A2:  MOV     W8,[W15++]
08A4:  MOV     #12,W8
08A6:  REPEAT  #4
08A8:  MOV     [W8++],[W15++]
08AA:  XOR     W3,W7,W13
08AC:  MOV     W3,W8
08AE:  MOV     W7,W9
08B0:  MOV     #7FF,W10
08B2:  BCLR.B  42.0
08B4:  BCLR.B  42.1
08B6:  ASR     W8,#4,W8
08B8:  AND     W10,W8,W8
08BA:  CP0     W8
08BC:  BRA     Z,996
08BE:  BCLR.B  42.0
08C0:  BCLR.B  42.1
08C2:  ASR     W9,#4,W9
08C4:  AND     W10,W9,W9
08C6:  CP0     W9
08C8:  BRA     Z,996
08CA:  CLR     W10
08CC:  SUB     W8,W9,W12
08CE:  BRA     NC,8D6
08D0:  ADD     #3FF,W12
08D2:  BRA     C,996
08D4:  BRA     8DE
08D6:  MOV     #401,W11
08D8:  SUB     W12,W11,W12
08DA:  BRA     NC,996
08DC:  BRA     Z,996
08DE:  CLR     W8
08E0:  CLR     W9
08E2:  CLR     W10
08E4:  CLR     W11
08E6:  AND     #1F,W3
08E8:  BSET    W3.4
08EA:  AND     #1F,W7
08EC:  BSET    W7.4
08EE:  MOV     W12,[W15++]
08F0:  MOV     #36,W12
08F2:  SUB     W0,W4,W0
08F4:  SUBB    W1,W5,W1
08F6:  SUBB    W2,W6,W2
08F8:  SUBB    W3,W7,W3
08FA:  BRA     N,900
08FC:  BRA     C,90A
08FE:  BRA     NZ,90C
0900:  ADD     W0,W4,W0
0902:  ADDC    W1,W5,W1
0904:  ADDC    W2,W6,W2
0906:  ADDC    W3,W7,W3
0908:  BRA     90C
090A:  BSET    W8.0
090C:  DEC     W12,W12
090E:  BRA     Z,926
0910:  BCLR.B  42.0
0912:  RLC     W0,W0
0914:  RLC     W1,W1
0916:  RLC     W2,W2
0918:  RLC     W3,W3
091A:  BCLR.B  42.0
091C:  RLC     W8,W8
091E:  RLC     W9,W9
0920:  RLC     W10,W10
0922:  RLC     W11,W11
0924:  BRA     8F2
0926:  MOV     [--W15],W12
0928:  BTSC    W11.5
092A:  BRA     92E
092C:  BRA     93A
092E:  BCLR.B  42.0
0930:  RRC     W11,W11
0932:  RRC     W10,W10
0934:  RRC     W9,W9
0936:  RRC     W8,W8
0938:  BRA     940
093A:  DEC     W12,W12
093C:  BCLR.B  42.0
093E:  BRA     Z,996
0940:  BTSC.B  42.0
0942:  BRA     956
0944:  RLC     W0,W0
0946:  RLC     W1,W1
0948:  RLC     W2,W2
094A:  RLC     W3,W3
094C:  SUB     W0,W4,W4
094E:  SUBB    W1,W5,W5
0950:  SUBB    W2,W6,W6
0952:  SUBB    W3,W7,W7
0954:  BRA     NC,980
0956:  INC     W8,W8
0958:  BRA     NZ,980
095A:  INC     W9,W9
095C:  BRA     NZ,980
095E:  INC     W10,W10
0960:  BRA     NZ,980
0962:  INC     W11,W11
0964:  BRA     NZ,980
0966:  INC     W12,W12
0968:  BRA     Z,996
096A:  BRA     980
096C:  DEC     W12,W12
096E:  BRA     Z,996
0970:  BTSC    W11.4
0972:  BRA     980
0974:  BCLR.B  42.0
0976:  RLC     W8,W8
0978:  RLC     W9,W9
097A:  RLC     W10,W10
097C:  RLC     W11,W11
097E:  BRA     970
0980:  SL      W12,#4,W12
0982:  BCLR.B  42.0
0984:  BCLR    W12.F
0986:  BTSC    W13.F
0988:  BSET    W12.F
098A:  BCLR    W11.4
098C:  XOR     W12,W11,W3
098E:  MOV     W10,W2
0990:  MOV     W9,W1
0992:  MOV     W8,W0
0994:  BRA     9A0
0996:  MOV     #0,W0
0998:  MOV     #0,W1
099A:  MOV     #0,W2
099C:  MOV     #0,W3
099E:  BRA     9A0
09A0:  MOV     #1A,W8
09A2:  REPEAT  #4
09A4:  MOV     [--W15],[W8--]
09A6:  MOV     [--W15],W8
09A8:  RETURN  
09AA:  MOV     W8,[W15++]
09AC:  MOV     #12,W8
09AE:  REPEAT  #4
09B0:  MOV     [W8++],[W15++]
09B2:  MOV     #8000,W8
09B4:  BTSC.B  43.0
09B6:  XOR     W8,W7,W7
09B8:  CP0     W0
09BA:  BRA     NZ,9CA
09BC:  CP0     W1
09BE:  BRA     NZ,9CA
09C0:  CP0     W2
09C2:  BRA     NZ,9CA
09C4:  MOV     #7FFF,W10
09C6:  AND     W3,W10,W10
09C8:  BTSS.B  42.1
09CA:  MOV     W3,W10
09CC:  XOR     W7,W10,W11
09CE:  MOV     W3,W8
09D0:  MOV     W7,W9
09D2:  MOV     W7,W12
09D4:  MOV     #7FF,W13
09D6:  BCLR.B  42.1
09D8:  BCLR.B  42.0
09DA:  ASR     W8,#4,W8
09DC:  AND     W13,W8,W8
09DE:  CP0     W8
09E0:  BRA     Z,B5A
09E2:  BCLR.B  42.1
09E4:  BCLR.B  42.0
09E6:  ASR     W9,#4,W9
09E8:  AND     W13,W9,W9
09EA:  CP0     W9
09EC:  BRA     Z,B6A
09EE:  CLR     W13
09F0:  BCLR.B  42.1
09F2:  BCLR.B  42.0
09F4:  CP      W9,W8
09F6:  BRA     Z,B6C
09F8:  BRA     N,B7C
09FA:  BCLR    W13.0
09FC:  BSET    W13.1
09FE:  SUB     W9,W8,W8
0A00:  AND     #F,W3
0A02:  BSET    W3.4
0A04:  AND     #F,W7
0A06:  BSET    W7.4
0A08:  SUB     #34,W8
0A0A:  BRA     NN,A38
0A0C:  ADD     #34,W8
0A0E:  BCLR.B  42.1
0A10:  BCLR.B  42.0
0A12:  RRC     W3,W3
0A14:  RRC     W2,W2
0A16:  RRC     W1,W1
0A18:  RRC     W0,W0
0A1A:  DEC     W8,W8
0A1C:  BRA     NZ,A0E
0A1E:  BRA     A48
0A20:  SUB     #34,W8
0A22:  BRA     NN,A42
0A24:  ADD     #34,W8
0A26:  BCLR.B  42.1
0A28:  BCLR.B  42.0
0A2A:  RRC     W7,W7
0A2C:  RRC     W6,W6
0A2E:  RRC     W5,W5
0A30:  RRC     W4,W4
0A32:  DEC     W8,W8
0A34:  BRA     NZ,A26
0A36:  BRA     A6E
0A38:  MOV     W4,W0
0A3A:  MOV     W5,W1
0A3C:  MOV     W6,W2
0A3E:  MOV     W7,W3
0A40:  XOR     W11,W12,W12
0A42:  BTSC    W12.F
0A44:  BTG     W11.F
0A46:  BRA     B3A
0A48:  BTSS    W11.F
0A4A:  BRA     A8A
0A4C:  BTSC    W13.4
0A4E:  MOV     W12,W11
0A50:  COM     W0,W0
0A52:  COM     W1,W1
0A54:  COM     W2,W2
0A56:  COM.B   W3L,W3L
0A58:  AND.B   #1F,W3L
0A5A:  INC     W0,W0
0A5C:  BRA     NZ,A68
0A5E:  INC     W1,W1
0A60:  BRA     NZ,A68
0A62:  INC     W2,W2
0A64:  BRA     NZ,A68
0A66:  INC.B   W3L,W3L
0A68:  BTSC    W13.4
0A6A:  BRA     AD0
0A6C:  BRA     A8A
0A6E:  BTSS    W11.F
0A70:  BRA     A8A
0A72:  COM     W4,W4
0A74:  COM     W5,W5
0A76:  COM     W6,W6
0A78:  COM.B   W7L,W7L
0A7A:  AND.B   #1F,W7L
0A7C:  INC     W4,W4
0A7E:  BRA     NZ,A8A
0A80:  INC     W5,W5
0A82:  BRA     NZ,A8A
0A84:  INC     W6,W6
0A86:  BRA     NZ,A8A
0A88:  INC.B   W7L,W7L
0A8A:  BCLR.B  42.1
0A8C:  BCLR.B  42.0
0A8E:  ADD     W0,W4,W0
0A90:  ADDC    W1,W5,W1
0A92:  ADDC    W2,W6,W2
0A94:  ADDC.B  W3L,W7L,W3L
0A96:  BTSC    W3.5
0A98:  BSET    W13.3
0A9A:  BTSC    W13.0
0A9C:  BRA     AB0
0A9E:  BTSC    W13.1
0AA0:  BRA     AA4
0AA2:  BRA     ABA
0AA4:  BTSC    W11.F
0AA6:  BRA     AD0
0AA8:  BTSC    W13.3
0AAA:  BRA     AFE
0AAC:  BSET    W13.6
0AAE:  BRA     AF2
0AB0:  BTSC    W11.F
0AB2:  BRA     AD0
0AB4:  BTSC    W13.3
0AB6:  BRA     AFE
0AB8:  BRA     AF2
0ABA:  BTSC    W11.F
0ABC:  BRA     AC6
0ABE:  MOV     W10,W11
0AC0:  BTSC    W13.3
0AC2:  BRA     AFE
0AC4:  BRA     B3A
0AC6:  BSET    W13.4
0AC8:  XOR.B   #10,W3L
0ACA:  BTSC    W3.4
0ACC:  BRA     A4C
0ACE:  MOV     W10,W11
0AD0:  AND     #1F,W3
0AD2:  IOR      W3,  W2,W8
0AD4:  BRA     NZ,ADA
0AD6:  IOR      W1,  W0,W8
0AD8:  BRA     Z,AF2
0ADA:  BTSC    W3.4
0ADC:  BRA     AF2
0ADE:  BCLR.B  42.1
0AE0:  BCLR.B  42.0
0AE2:  RLC     W0,W0
0AE4:  RLC     W1,W1
0AE6:  RLC     W2,W2
0AE8:  RLC     W3,W3
0AEA:  DEC     W9,W9
0AEC:  BTSC.B  42.1
0AEE:  BRA     B54
0AF0:  BRA     ADA
0AF2:  BTSC    W13.0
0AF4:  MOV     W10,W11
0AF6:  BTSC    W13.1
0AF8:  MOV     W12,W11
0AFA:  BTSS    W13.5
0AFC:  BRA     B3A
0AFE:  BCLR.B  42.0
0B00:  RRC.B   W3L,W3L
0B02:  RRC     W2,W2
0B04:  RRC     W1,W1
0B06:  RRC     W0,W0
0B08:  BTSC.B  42.0
0B0A:  BSET    W13.5
0B0C:  INC     W9,W9
0B0E:  BTSC.B  42.1
0B10:  BRA     B54
0B12:  BTSS    W13.5
0B14:  BRA     B32
0B16:  INC     W0,W0
0B18:  BRA     NZ,B32
0B1A:  INC     W1,W1
0B1C:  BRA     NZ,B32
0B1E:  INC     W2,W2
0B20:  BRA     NZ,B32
0B22:  INC     W3,W3
0B24:  BRA     NZ,B32
0B26:  RRC.B   W3L,W3L
0B28:  RRC     W2,W2
0B2A:  RRC     W1,W1
0B2C:  RRC     W0,W0
0B2E:  INC     W9,W9
0B30:  BRA     Z,B54
0B32:  BTSC    W13.0
0B34:  MOV     W10,W11
0B36:  BTSC    W13.1
0B38:  MOV     W12,W11
0B3A:  IOR      W0,  W1,W4
0B3C:  BRA     NZ,B42
0B3E:  IOR      W2,  W3,W4
0B40:  BRA     Z,B8E
0B42:  BCLR    W3.4
0B44:  BCLR.B  42.1
0B46:  BCLR.B  42.0
0B48:  SL      W9,#4,W9
0B4A:  XOR     W9,W3,W3
0B4C:  BSET    W3.F
0B4E:  BTSS    W11.F
0B50:  BCLR    W3.F
0B52:  BRA     B8E
0B54:  MUL.UU  W0,#0,W0
0B56:  MUL.UU  W2,#0,W2
0B58:  BRA     B8E
0B5A:  MOV     #8000,W8
0B5C:  BTSC    W10.F
0B5E:  XOR     W8,W7,W7
0B60:  MOV     W5,W1
0B62:  MOV     W4,W0
0B64:  MOV     W6,W2
0B66:  MOV     W7,W3
0B68:  BRA     B8E
0B6A:  BRA     B8E
0B6C:  AND     #F,W7
0B6E:  BSET    W7.4
0B70:  AND     #F,W3
0B72:  BSET    W3.4
0B74:  BTSC    W11.F
0B76:  BCLR    W7.4
0B78:  BSET    W13.2
0B7A:  BRA     A6E
0B7C:  AND     #F,W3
0B7E:  BSET    W3.4
0B80:  AND     #F,W7
0B82:  BSET    W7.4
0B84:  SUB     W8,W9,W8
0B86:  ADD     W8,W9,W9
0B88:  BCLR    W13.1
0B8A:  BSET    W13.0
0B8C:  BRA     A20
0B8E:  MOV     #1A,W8
0B90:  REPEAT  #4
0B92:  MOV     [--W15],[W8--]
0B94:  MOV     [--W15],W8
0B96:  RETURN  
0B98:  MOV     W8,[W15++]
0B9A:  MOV     W9,[W15++]
0B9C:  MOV     W10,[W15++]
0B9E:  XOR     W3,W7,W9
0BA0:  BTSS    W9.F
0BA2:  BRA     BB0
0BA4:  BCLR.B  42.0
0BA6:  BCLR.B  42.1
0BA8:  BTSS    W3.F
0BAA:  BRA     C14
0BAC:  BSET.B  42.0
0BAE:  BRA     C14
0BB0:  MOV     #7FF,W10
0BB2:  MOV     W3,W8
0BB4:  MOV     W7,W9
0BB6:  ASR     W8,#4,W8
0BB8:  AND     W10,W8,W8
0BBA:  ASR     W9,#4,W9
0BBC:  AND     W10,W9,W9
0BBE:  SUB     W9,W8,W10
0BC0:  BRA     Z,BCC
0BC2:  BTSS    W3.F
0BC4:  BRA     C14
0BC6:  MOV     #1,W0
0BC8:  XOR.B   42
0BCA:  BRA     C14
0BCC:  MOV     W3,W8
0BCE:  MOV     W7,W9
0BD0:  AND     #1F,W3
0BD2:  AND     #1F,W7
0BD4:  BCLR    W3.4
0BD6:  BCLR    W7.4
0BD8:  SUB.B   W7L,W3L,W10L
0BDA:  BRA     Z,BE6
0BDC:  BTSS    W8.F
0BDE:  BRA     C14
0BE0:  MOV     #1,W0
0BE2:  XOR.B   42
0BE4:  BRA     C14
0BE6:  SUB     W6,W2,W10
0BE8:  BRA     Z,BF4
0BEA:  BTSS    W8.F
0BEC:  BRA     C14
0BEE:  MOV     #1,W0
0BF0:  XOR.B   42
0BF2:  BRA     C14
0BF4:  SUB     W5,W1,W10
0BF6:  BRA     Z,C02
0BF8:  BTSS    W8.F
0BFA:  BRA     C14
0BFC:  MOV     #1,W0
0BFE:  XOR.B   42
0C00:  BRA     C14
0C02:  SUB     W4,W0,W10
0C04:  BRA     Z,C10
0C06:  BTSS    W8.F
0C08:  BRA     C14
0C0A:  MOV     #1,W0
0C0C:  XOR.B   42
0C0E:  BRA     C14
0C10:  BCLR.B  42.0
0C12:  BRA     C14
0C14:  MOV     [--W15],W10
0C16:  MOV     [--W15],W9
0C18:  MOV     [--W15],W8
0C1A:  RETURN  
0C1C:  MOV     W5,[W15++]
0C1E:  MOV     #C,W5
0C20:  REPEAT  #5
0C22:  MOV     [W5++],[W15++]
0C24:  MOV     W3,W8
0C26:  MOV     W2,W7
0C28:  MOV     W1,W6
0C2A:  MOV     W0,W5
0C2C:  MOV     W3,W9
0C2E:  MOV     #473,W11
0C30:  ASR     W3,#4,W3
0C32:  MOV     #7FF,W10
0C34:  AND     W10,W3,W3
0C36:  SUB     W11,W3,W11
0C38:  AND     #1F,W8
0C3A:  BSET    W8.4
0C3C:  CLR     W0
0C3E:  CLR     W1
0C40:  CLR     W2
0C42:  CLR     W3
0C44:  BCLR.B  42.0
0C46:  RRC     W8,W8
0C48:  RRC     W7,W7
0C4A:  RRC     W6,W6
0C4C:  RRC     W5,W5
0C4E:  RRC     W3,W3
0C50:  RRC     W2,W2
0C52:  RRC     W1,W1
0C54:  RRC     W0,W0
0C56:  DEC     W11,W11
0C58:  BRA     NZ,C44
0C5A:  BTSS    W9.F
0C5C:  BRA     C70
0C5E:  COM     W0,W0
0C60:  COM     W1,W1
0C62:  COM     W2,W2
0C64:  COM     W3,W3
0C66:  INC     W0,W0
0C68:  ADDC    #0,W1
0C6A:  ADDC    #0,W2
0C6C:  ADDC    #0,W3
0C6E:  BRA     C70
0C70:  MOV     #16,W5
0C72:  REPEAT  #5
0C74:  MOV     [--W15],[W5--]
0C76:  MOV     [--W15],W5
0C78:  RETURN  
*
0F5E:  MOV     W5,[W15++]
0F60:  MOV     #C,W5
0F62:  REPEAT  #5
0F64:  MOV     [W5++],[W15++]
0F66:  MOV     W3,W8
0F68:  MOV     W2,W7
0F6A:  MOV     W1,W6
0F6C:  MOV     W0,W5
0F6E:  MOV     W3,W9
0F70:  MOV     #473,W11
0F72:  ASR     W3,#4,W3
0F74:  MOV     #7FF,W10
0F76:  AND     W10,W3,W3
0F78:  SUB     W11,W3,W11
0F7A:  AND     #1F,W8
0F7C:  BSET    W8.4
0F7E:  CLR     W0
0F80:  CLR     W1
0F82:  CLR     W2
0F84:  CLR     W3
0F86:  BCLR.B  42.0
0F88:  RRC     W8,W8
0F8A:  RRC     W7,W7
0F8C:  RRC     W6,W6
0F8E:  RRC     W5,W5
0F90:  RRC     W3,W3
0F92:  RRC     W2,W2
0F94:  RRC     W1,W1
0F96:  RRC     W0,W0
0F98:  DEC     W11,W11
0F9A:  BRA     NZ,F86
0F9C:  BTSS    W9.F
0F9E:  BRA     FB2
0FA0:  COM     W0,W0
0FA2:  COM     W1,W1
0FA4:  COM     W2,W2
0FA6:  COM     W3,W3
0FA8:  INC     W0,W0
0FAA:  ADDC    #0,W1
0FAC:  ADDC    #0,W2
0FAE:  ADDC    #0,W3
0FB0:  BRA     FB2
0FB2:  MOV     #16,W5
0FB4:  REPEAT  #5
0FB6:  MOV     [--W15],[W5--]
0FB8:  MOV     [--W15],W5
0FBA:  RETURN  
*
1084:  MOV     W5,[W15++]
1086:  MOV     #C,W5
1088:  REPEAT  #3
108A:  MOV     [W5++],[W15++]
108C:  BTSS    W0.F
108E:  BRA     10AE
1090:  NEG     W0,W0
1092:  BSET    W4.8
1094:  BTSS    W4.F
1096:  BRA     10AE
1098:  MOV     W0,[W15++]
109A:  MOV     #2D,W0
109C:  MOV     W4,[W15++]
109E:  MOV     W0,[W15++]
10A0:  MOV     [--W15],W0
10A2:  CALL    6C2
10A6:  MOV     [--W15],W4
10A8:  MOV     [--W15],W0
10AA:  BCLR    W4.8
10AC:  DEC.B   0008
10AE:  CLR     W5
10B0:  MOV     W0,W7
10B2:  MOV     W4,W9
10B4:  BCLR    W4.F
10B6:  CP0.B   W4L
10B8:  BRA     NZ,10C6
10BA:  BTSC    W9.F
10BC:  BRA     10C2
10BE:  MOV     #0,W5
10C0:  BRA     10F0
10C2:  MOV     #0,W5
10C4:  BRA     10F0
10C6:  BTSS    W9.8
10C8:  SUB.B   W4L,#6,W5L
10CA:  BTSC    W9.8
10CC:  SUB.B   W4L,#7,W5L
10CE:  BRA     NC,10EE
10D0:  MOV     #30,W0
10D2:  BTSS    W9.F
10D4:  MOV     #20,W0
10D6:  MOV     W0,[W15++]
10D8:  MOV     W4,[W15++]
10DA:  MOV     W0,[W15++]
10DC:  MOV     [--W15],W0
10DE:  CALL    6C2
10E2:  MOV     [--W15],W4
10E4:  MOV     [--W15],W0
10E6:  DEC     W5,W5
10E8:  BRA     NN,10D6
10EA:  MOV     #5,W5
10EC:  BRA     10F0
10EE:  MOV     W4,W5
10F0:  MOV     #6,W4
10F2:  BTSC    W5.8
10F4:  INC     W4,W4
10F6:  BSET    W5.E
10F8:  BTSC    W9.F
10FA:  BSET    W5.F
10FC:  MOV     #2710,W8
10FE:  REPEAT  #11
1100:  DIV.U   W7,W8
1102:  CALL    1156
1106:  MOV     W1,W7
1108:  MOV     #3E8,W8
110A:  REPEAT  #11
110C:  DIV.U   W7,W8
110E:  CALL    1156
1112:  MOV     W1,W7
1114:  MOV     #64,W8
1116:  REPEAT  #11
1118:  DIV.U   W7,W8
111A:  CALL    1156
111E:  MOV     W1,W7
1120:  MOV     #A,W8
1122:  REPEAT  #11
1124:  DIV.U   W7,W8
1126:  CALL    1156
112A:  BTSS    W9.8
112C:  BRA     1142
112E:  MOV     #2D,W0
1130:  MOV     W1,[W15++]
1132:  MOV     W4,[W15++]
1134:  MOV     W0,[W15++]
1136:  MOV     [--W15],W0
1138:  CALL    6C2
113C:  MOV     [--W15],W4
113E:  MOV     [--W15],W1
1140:  BCLR    W9.8
1142:  MOV     #30,W0
1144:  ADD.B   W1L,W0L,W0L
1146:  MOV     W0,2A
1148:  MOV     W4,[W15++]
114A:  MOV     W0,[W15++]
114C:  MOV     [--W15],W0
114E:  CALL    6C2
1152:  MOV     [--W15],W4
1154:  BRA     11AA
1156:  MOV     #30,W6
1158:  CP0     W0
115A:  BRA     NZ,1178
115C:  BTSS    W5.E
115E:  BRA     1196
1160:  DEC     W4,W4
1162:  CP.B    W4L,W5L
1164:  BRA     Z,116A
1166:  BTSC.B  42.0
1168:  RETURN  
116A:  CP0     W0
116C:  BRA     NZ,1178
116E:  BTSS    W5.E
1170:  BRA     1196
1172:  BTSS    W5.F
1174:  MOV     #20,W6
1176:  BRA     1196
1178:  BCLR    W5.E
117A:  BTSS    W9.8
117C:  BRA     1196
117E:  MOV     W0,W10
1180:  MOV     #2D,W0
1182:  MOV     W1,[W15++]
1184:  MOV     W4,[W15++]
1186:  MOV     W0,[W15++]
1188:  MOV     [--W15],W0
118A:  CALL    6C2
118E:  MOV     [--W15],W4
1190:  MOV     [--W15],W1
1192:  BCLR    W9.8
1194:  MOV     W10,W0
1196:  ADD.B   W6L,W0L,W0L
1198:  MOV     W1,[W15++]
119A:  MOV     W4,[W15++]
119C:  MOV     W0,[W15++]
119E:  MOV     [--W15],W0
11A0:  CALL    6C2
11A4:  MOV     [--W15],W4
11A6:  MOV     [--W15],W1
11A8:  RETURN  
11AA:  MOV     #12,W5
11AC:  REPEAT  #3
11AE:  MOV     [--W15],[W5--]
11B0:  MOV     [--W15],W5
11B2:  RETURN  
.................... 
.................... #list
.................... 
.................... #include <Inc/lookup_tables.h>
.................... // lookup table for 16bit timer
.................... //!const int timer_table[] = {
.................... //!1036,1036,1036,1036,1036,1036,1036,1036,1036,1036,
.................... //!1036,1036,1036,1036,1036,1036,1036,1036,1036,1036,
.................... //!1036,1021,1006,992,978,964,950,936,923,910,897,884,
.................... //!871,859,847,835,823,811,799,788,777,766,755,744,733,
.................... //!723,713,703,693,683,673,663,654,645,636,627,618,609,
.................... //!600,591,583,575,567,559,551,543,535,527,519,512,505,
.................... //!498,491,484,477,470,463,456,449,443,437,431,425,419,
.................... //!413,407,401,395,389,383,378,373,368,363,358,353,348,
.................... //!343,338,333,328,323,318,313,309,305,301,297,293,289,
.................... //!285,281,277,273,269,265,261,257,253,249,245, 241,238,
.................... //!235,232,229,226,223,220,217,214,211,208,205,202,199,
.................... //!196,193,190,187,184,181,178,175,172,170,168,166,164,
.................... //!162,160,158,156,154,152,150,148,146,144,142,140,138,
.................... //!136,134,132,130,128,126,124,122,120,118,116,114,112,
.................... //!110,108,106,104,102,101,100,99,98,97,96,95,94,93,92,
.................... //!91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,
.................... //!74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,
.................... //!57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,
.................... //!40,39,38,37,36,35,34,33,33,33,33,33,33,33,33};
.................... 
.................... const int timer_table[] = {
.................... 65068,65068,65068,65068,65068,65068,65068,65068,65068,65068,65068,65068,65068,65068,65068,65068,
.................... 65068,65068,65068,65068,65068,61218,57795,54733,51977,49484,47217,45148,43251,41505,39894,38402,
.................... 37016,35726,34522,33395,32339,31346,30412,29531,28699,27912,27165,26458,25785,25145,24535,23954,
.................... 23399,22868,22360,21874,21408,20961,20531,20118,19721,19339,18971,18616,18273,17943,17624,17315,
.................... 17017,16728,16448,16177,15915,15660,15413,15173,14940,14714,14494,14280,14072,13869,13672,13480,
.................... 13292,13110,12932,12758,12589,12423,12262,12104,11950,11799,11652,11508,11367,11229,11094,10962,
.................... 10832,10705,10581,10459,10340,10223,10108,9995,9884,9776,9669,9564,9461,9360,9261,9163,9067,8973,
.................... 8880,8789,8699,8611,8523,8438,8353,8270,8188,8108,8028,7950,7873,7796,7721,7647,7574,7502,7431,7361,
.................... 7291,7223,7155,7089,7023,6958,6893,6830,6767,6705,6643,6582,6522,6463,6404,6346,6289,6232,6175,6120,
.................... 6064,6010,5955,5902,5849,5796,5744,5692,5641,5590,5540,5490,5441,5392,5343,5295,5247,5200,5153,5106,
.................... 5059,5013,4968,4923,4878,4833,4789,4745,4701,4657,4614,4572,4529,4487,4445,4403,4362,4321,4280,4239,
.................... 4199,4159,4119,4079,4040,4000,3961,3923,3884,3846,3808,3770,3732,3695,3658,3621,3584,3547,3511,3475,
.................... 3439,3403,3368,3332,3297,3262,3227,3193,3158,3124,3090,3056,3023,2989,2956,2923,2890,2858,2825,2793,
.................... 2761,2729,2697,2666,2634,2603,2572,2542,2511,2481,2451,2421,2391,2361,2332,2303,2274,2245,2217,2188,
.................... 2160,2132};
.................... 
.................... const unsigned int16 gain_table[256] = {
.................... 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,85,86,
.................... 86,86,86,86,86,87,87,87,87,87,88,88,88,88,88,89,89,
.................... 89,89,90,90,90,90,91,91,91,91,92,92,92,92,93,93,93,
.................... 94,94,94,95,95,95,95,96,96,96,97,97,97,98,98,98,99,
.................... 99,100,100,101,101,101,102,102,102,103,103,104,104,
.................... 105,105,106,106,106,107,107,108,108,109,110,110,111,
.................... 111,112,112,113,113,114,114,115,116,116,117,117,118,
.................... 119,120,120,121,122,122,123,124,125,125,126,127,127,
.................... 128,129,130,130,131,132,133,134,135,136,137,138,139,
.................... 140,141,142,143,144,145,146,147,148,149,150,151,152,
.................... 153,154,155,156,157,158,159,161,162,163,164,166,167,
.................... 169,170,172,173,175,177,178,180,182,184,186,188,191,
.................... 193,194,195,196,198,199,200,201,203,204,206,207,209,
.................... 210,212,213,215,216,218,220,222,223,225,227,229,231,
.................... 233,235,237,240,242,244,247,249,252,254,257,260,263,
.................... 266,269,272,275,279,282,286,289,293,297,301,306,310,
.................... 315,320,325,330,335,341,347,353,360,367,374,381,389,
.................... 397,406,415,425,436,436,436,436,436,436,436,436
.................... };
.................... 
.................... #DEVICE ADC=10
.................... #device ICSP=1
.................... #use delay(clock=64000000,crystal=8000000)
.................... #use rs232(UART2, baud=9600, stream=UART_PORT2)
.................... 
.................... #FUSES NOWDT                    //No Watch Dog Timer
.................... #FUSES CKSFSM                   //Clock Switching is enabled, fail Safe clock monitor is enabled
.................... #FUSES BORV42                   //Brownout reset at 4.5V
.................... #FUSES WRT                      //Program Memory Write Protected
.................... #FUSES PROTECT                  //Code protected from reads
.................... #include <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
*
0C7A:  MOV     W5,[W15++]
0C7C:  MOV     W6,[W15++]
0C7E:  MOV     W7,[W15++]
0C80:  MOV     W8,[W15++]
0C82:  CLR     998
0C84:  CLR     99A
0C86:  CLR     99C
0C88:  MOV     #3FF0,W4
0C8A:  MOV     W4,99E
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
0C8C:  MOV     #FF1F,W4
0C8E:  MOV     W4,9A8
0C90:  SETM    9AA
0C92:  SETM    9AC
0C94:  MOV     #BFDF,W4
0C96:  MOV     W4,9AE
0C98:  MOV     #1C35,W4
0C9A:  MOV     W4,9B0
0C9C:  MOV     #5555,W4
0C9E:  MOV     W4,9B2
0CA0:  MOV     #5555,W4
0CA2:  MOV     W4,9B4
0CA4:  MOV     #3FA5,W4
0CA6:  MOV     W4,9B6
0CA8:  MOV     #3F1C,W4
0CAA:  MOV     W4,9B8
0CAC:  MOV     #16A7,W4
0CAE:  MOV     W4,9BA
0CB0:  MOV     #C16C,W4
0CB2:  MOV     W4,9BC
0CB4:  MOV     #BF56,W4
0CB6:  MOV     W4,9BE
0CB8:  MOV     #F3E6,W4
0CBA:  MOV     W4,9C0
0CBC:  MOV     #D65,W4
0CBE:  MOV     W4,9C2
0CC0:  MOV     #1A0,W4
0CC2:  MOV     W4,9C4
0CC4:  MOV     #3EFA,W4
0CC6:  MOV     W4,9C6
0CC8:  MOV     #A3E,W4
0CCA:  MOV     W4,9C8
0CCC:  MOV     #3931,W4
0CCE:  MOV     W4,9CA
0CD0:  MOV     #7E4C,W4
0CD2:  MOV     W4,9CC
0CD4:  MOV     #BE92,W4
0CD6:  MOV     W4,9CE
0CD8:  MOV     #DDFB,W4
0CDA:  MOV     W4,9D0
0CDC:  MOV     #2B77,W4
0CDE:  MOV     W4,9D2
0CE0:  MOV     #EDB1,W4
0CE2:  MOV     W4,9D4
0CE4:  MOV     #3E21,W4
0CE6:  MOV     W4,9D6
0CE8:  MOV     #6FCC,W4
0CEA:  MOV     W4,9D8
0CEC:  MOV     #8FF7,W4
0CEE:  MOV     W4,9DA
0CF0:  MOV     #C610,W4
0CF2:  MOV     W4,9DC
0CF4:  MOV     #BDA8,W4
0CF6:  MOV     W4,9DE
0CF8:  MOV     #124C,W4
0CFA:  MOV     W4,9E0
0CFC:  MOV     #8E1C,W4
0CFE:  MOV     W4,9E2
0D00:  MOV     #3AF9,W4
0D02:  MOV     W4,9E4
0D04:  MOV     #3CF3,W4
0D06:  MOV     W4,9E6
0D08:  MOV     #7676,W4
0D0A:  MOV     W4,9E8
0D0C:  MOV     #350F,W4
0D0E:  MOV     W4,9EA
0D10:  MOV     #C0DE,W4
0D12:  MOV     W4,9EC
0D14:  MOV     #3CF0,W4
0D16:  MOV     W4,9EE
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
0D18:  MOV     97E,W0
0D1A:  MOV     980,W1
0D1C:  MOV     982,W2
0D1E:  MOV     984,W3
0D20:  MOV     #0,W4
0D22:  MOV     #0,W5
0D24:  MOV     #0,W6
0D26:  MOV     #0,W7
0D28:  CALL    B98
0D2C:  BRA     NC,D38
0D2E:  MOV     #97E,W0
0D30:  MOV     #97E,W1
0D32:  REPEAT  #7
0D34:  MOV     [W0++],[W1++]
0D36:  BTG.B   985.7
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
0D38:  MOV     97E,W0
0D3A:  MOV     980,W1
0D3C:  MOV     982,W2
0D3E:  MOV     984,W3
0D40:  MOV     #C884,W4
0D42:  MOV     #6DC9,W5
0D44:  MOV     #5F30,W6
0D46:  MOV     #3FE4,W7
0D48:  CALL    792
0D4C:  CALL    C1C
0D50:  MOV.B   W0L,986
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
0D52:  MOV     97E,W0
0D54:  MOV     980,W1
0D56:  MOV     982,W2
0D58:  MOV     984,W3
0D5A:  MOV     #C884,W4
0D5C:  MOV     #6DC9,W5
0D5E:  MOV     #5F30,W6
0D60:  MOV     #3FE4,W7
0D62:  CALL    792
0D66:  MOV     W0,W5
0D68:  MOV     W1,W6
0D6A:  MOV     W2,W7
0D6C:  MOV     W3,W8
0D6E:  MOV     #0,W1
0D70:  MOV     #0,W2
0D72:  MOV     #0,W3
0D74:  MOV.B   986,W0L
0D76:  CLR.B   1
0D78:  CALL    728
0D7C:  BSET.B  43.0
0D7E:  MOV     W5,[W15++]
0D80:  MOV     W6,[W15++]
0D82:  MOV     W7,[W15++]
0D84:  MOV     W0,W4
0D86:  MOV     W5,W0
0D88:  MOV     W1,W5
0D8A:  MOV     W6,W1
0D8C:  MOV     W2,W6
0D8E:  MOV     W7,W2
0D90:  MOV     W3,W7
0D92:  MOV     W8,W3
0D94:  CALL    9AA
0D98:  MOV     [--W15],W7
0D9A:  MOV     [--W15],W6
0D9C:  MOV     [--W15],W5
0D9E:  MOV     W0,9A0
0DA0:  MOV     W1,9A2
0DA2:  MOV     W2,9A4
0DA4:  MOV     W3,9A6
....................    quad = quad % 4;                    // quadrant (0 to 3)
0DA6:  MOV.B   986,W0L
0DA8:  AND.B   W0L,#3,W0L
0DAA:  MOV.B   W0L,986
.................... 
....................    if (quad == 0 || quad == 2)
0DAC:  CP0.B   986
0DAE:  BRA     Z,DB6
0DB0:  MOV     986,W4
0DB2:  CP.B    W4L,#2
0DB4:  BRA     NZ,DD4
....................       t = frac * PI_DIV_BY_TWO;
0DB6:  MOV     9A0,W0
0DB8:  MOV     9A2,W1
0DBA:  MOV     9A4,W2
0DBC:  MOV     9A6,W3
0DBE:  MOV     #2D18,W4
0DC0:  MOV     #5444,W5
0DC2:  MOV     #21FB,W6
0DC4:  MOV     #3FF9,W7
0DC6:  CALL    792
0DCA:  MOV     W0,990
0DCC:  MOV     W1,992
0DCE:  MOV     W2,994
0DD0:  MOV     W3,996
0DD2:  BRA     E68
....................    else if (quad == 1)
0DD4:  MOV     986,W4
0DD6:  CP.B    W4L,#1
0DD8:  BRA     NZ,E22
....................       t = (1-frac) * PI_DIV_BY_TWO;
0DDA:  BSET.B  43.0
0DDC:  MOV     #0,W0
0DDE:  MOV     #0,W1
0DE0:  MOV     #0,W2
0DE2:  MOV     #3FF0,W3
0DE4:  MOV     9A0,W4
0DE6:  MOV     9A2,W5
0DE8:  MOV     9A4,W6
0DEA:  MOV     9A6,W7
0DEC:  CALL    9AA
0DF0:  MOV     W0,W5
0DF2:  MOV     W1,W6
0DF4:  MOV     W2,W7
0DF6:  MOV     W3,W8
0DF8:  MOV     W5,[W15++]
0DFA:  MOV     W6,[W15++]
0DFC:  MOV     W7,[W15++]
0DFE:  MOV     W5,W0
0E00:  MOV     W6,W1
0E02:  MOV     W7,W2
0E04:  MOV     W8,W3
0E06:  MOV     #2D18,W4
0E08:  MOV     #5444,W5
0E0A:  MOV     #21FB,W6
0E0C:  MOV     #3FF9,W7
0E0E:  CALL    792
0E12:  MOV     [--W15],W7
0E14:  MOV     [--W15],W6
0E16:  MOV     [--W15],W5
0E18:  MOV     W0,990
0E1A:  MOV     W1,992
0E1C:  MOV     W2,994
0E1E:  MOV     W3,996
0E20:  BRA     E68
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
0E22:  BSET.B  43.0
0E24:  MOV     9A0,W0
0E26:  MOV     9A2,W1
0E28:  MOV     9A4,W2
0E2A:  MOV     9A6,W3
0E2C:  MOV     #0,W4
0E2E:  MOV     #0,W5
0E30:  MOV     #0,W6
0E32:  MOV     #3FF0,W7
0E34:  CALL    9AA
0E38:  MOV     W0,W5
0E3A:  MOV     W1,W6
0E3C:  MOV     W2,W7
0E3E:  MOV     W3,W8
0E40:  MOV     W5,[W15++]
0E42:  MOV     W6,[W15++]
0E44:  MOV     W7,[W15++]
0E46:  MOV     W5,W0
0E48:  MOV     W6,W1
0E4A:  MOV     W7,W2
0E4C:  MOV     W8,W3
0E4E:  MOV     #2D18,W4
0E50:  MOV     #5444,W5
0E52:  MOV     #21FB,W6
0E54:  MOV     #3FF9,W7
0E56:  CALL    792
0E5A:  MOV     [--W15],W7
0E5C:  MOV     [--W15],W6
0E5E:  MOV     [--W15],W5
0E60:  MOV     W0,990
0E62:  MOV     W1,992
0E64:  MOV     W2,994
0E66:  MOV     W3,996
.................... 
....................    y = 1.0;
0E68:  CLR     988
0E6A:  CLR     98A
0E6C:  CLR     98C
0E6E:  MOV     #3FF0,W4
0E70:  MOV     W4,98E
....................    t = t * t;
0E72:  MOV     990,W0
0E74:  MOV     992,W1
0E76:  MOV     994,W2
0E78:  MOV     996,W3
0E7A:  MOV     990,W4
0E7C:  MOV     992,W5
0E7E:  MOV     994,W6
0E80:  MOV     996,W7
0E82:  CALL    792
0E86:  MOV     W0,990
0E88:  MOV     W1,992
0E8A:  MOV     W2,994
0E8C:  MOV     W3,996
....................    for (i = 0; i <= 8; i++)
0E8E:  CLR.B   987
0E90:  MOV     986,W4
0E92:  LSR     W4,#8,W4
0E94:  CP.B    W4L,#8
0E96:  BRA     GTU,EFA
....................    {
....................       t2 = t2 * t;
0E98:  MOV     998,W0
0E9A:  MOV     99A,W1
0E9C:  MOV     99C,W2
0E9E:  MOV     99E,W3
0EA0:  MOV     990,W4
0EA2:  MOV     992,W5
0EA4:  MOV     994,W6
0EA6:  MOV     996,W7
0EA8:  CALL    792
0EAC:  MOV     W0,998
0EAE:  MOV     W1,99A
0EB0:  MOV     W2,99C
0EB2:  MOV     W3,99E
....................       y = y + p_64[i] * t2;
0EB4:  MOV.B   987,W0L
0EB6:  CLR.B   1
0EB8:  SL      W0,#3,W0
0EBA:  MOV     #9A8,W4
0EBC:  ADD     W0,W4,W0
0EBE:  MOV     W0,W5
0EC0:  MOV     W5,[W15++]
0EC2:  MOV     [W5],W0
0EC4:  MOV     [++W5],W1
0EC6:  MOV     [++W5],W2
0EC8:  MOV     [++W5],W3
0ECA:  MOV     998,W4
0ECC:  MOV     99A,W5
0ECE:  MOV     99C,W6
0ED0:  MOV     99E,W7
0ED2:  CALL    792
0ED6:  MOV     [--W15],W5
0ED8:  BCLR.B  43.0
0EDA:  MOV     W0,W4
0EDC:  MOV     W1,W5
0EDE:  MOV     W2,W6
0EE0:  MOV     W3,W7
0EE2:  MOV     988,W0
0EE4:  MOV     98A,W1
0EE6:  MOV     98C,W2
0EE8:  MOV     98E,W3
0EEA:  CALL    9AA
0EEE:  MOV     W0,988
0EF0:  MOV     W1,98A
0EF2:  MOV     W2,98C
0EF4:  MOV     W3,98E
0EF6:  INC.B   0987
0EF8:  BRA     E90
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
0EFA:  MOV     986,W4
0EFC:  CP.B    W4L,#2
0EFE:  BRA     Z,F06
0F00:  MOV     986,W4
0F02:  CP.B    W4L,#1
0F04:  BRA     NZ,F10
....................       y = -y;  // correct sign
0F06:  MOV     #988,W0
0F08:  MOV     #988,W1
0F0A:  REPEAT  #7
0F0C:  MOV     [W0++],[W1++]
0F0E:  BTG.B   98F.7
.................... 
....................    return (y);
0F10:  MOV     988,W0
0F12:  MOV     98A,W1
0F14:  MOV     98C,W2
0F16:  MOV     98E,W3
0F18:  MOV     [--W15],W8
0F1A:  MOV     [--W15],W7
0F1C:  MOV     [--W15],W6
0F1E:  MOV     [--W15],W5
0F20:  RETURN  
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
0F22:  MOV     W5,[W15++]
0F24:  MOV     W6,[W15++]
0F26:  MOV     W7,[W15++]
0F28:  MOV     W8,[W15++]
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
0F2A:  BSET.B  43.0
0F2C:  MOV     96E,W0
0F2E:  MOV     970,W1
0F30:  MOV     972,W2
0F32:  MOV     974,W3
0F34:  MOV     #2D18,W4
0F36:  MOV     #5444,W5
0F38:  MOV     #21FB,W6
0F3A:  MOV     #3FF9,W7
0F3C:  CALL    9AA
0F40:  MOV     W0,W5
0F42:  MOV     W1,W6
0F44:  MOV     W2,W7
0F46:  MOV     W3,W8
0F48:  MOV     W5,97E
0F4A:  MOV     W6,980
0F4C:  MOV     W7,982
0F4E:  MOV     W8,984
0F50:  CALL    C7A
0F54:  MOV     [--W15],W8
0F56:  MOV     [--W15],W7
0F58:  MOV     [--W15],W6
0F5A:  MOV     [--W15],W5
0F5C:  RETURN  
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... 
.................... #define P1TCON    0x01C0
.................... #define P1TMR     0x01C2 
.................... #define P1TPER    0x01C4
.................... #define P1SECMP   0x01C6
.................... #define PWM1CON1  0x01C8 
.................... #define PWM1CON2  0x01CA
.................... #define P1DTCON1  0x01CC
.................... #define P1DTCON2  0x01CE  
.................... #define P1FLTACON 0x01D0
.................... #define P1OVDCON  0x01D4   
.................... #define P1DC1     0x01D6   
.................... #define P1DC2     0x01D8
.................... #define P1DC3     0x01DA
.................... #define IPC14     0x00C0  
.................... #define CLKDIV    0x0744 
.................... #define PLLFBD    0x0746
.................... 
.................... 
.................... #define ADC_pin sAN0
.................... #define LED_PIN PIN_B5
.................... 
.................... #define voltage_offset 1000//1248
.................... #define low_duty_limit 50
.................... #define high_duty_limit 1950
.................... #define SLOPE 0
.................... 
.................... #define break_level 5
.................... #define sustain_level 200  
.................... #define break_amplitude 0 
.................... 
.................... #define pedestal_amplitude 500
.................... #define peak_amplitude 950
.................... 
.................... 
.................... #define throttle_PIN PIN_B1
.................... #define PWM_tick_pin PIN_B2
.................... #define TIM_tick_pin PIN_B3
.................... 
.................... #define kalman_up 18
.................... #define kalman_diff_down 8
.................... 
.................... #define init_freq 30
.................... 
....................   
....................   
.................... void initMCPWM(void);
.................... void fill_sine_table(void);  
.................... 
.................... unsigned int16 duty[3]={voltage_offset,voltage_offset,voltage_offset},sample=0;
.................... signed int16 peak_voltage =0;//  1184; 
.................... signed int32 reference[3] = {0,0,0};
.................... 
.................... const unsigned max_samples=30.0;
.................... signed int16 sine_table[max_samples];
.................... unsigned int16 sine_index,phase_angle[3] = {0 , 0 , 0};  
.................... double theeta;
.................... 
.................... const unsigned max_freq = 250; //Hz
.................... 
.................... unsigned int16 raw_adc =0 ;
.................... signed int16 throttle_level = 0;
.................... unsigned int16 freq = 1;
.................... unsigned int16 temp = 0;
.................... 
.................... int1 tick = 0;
.................... int1 uart_tick = 0;
.................... int8 tick_count = 0;
.................... unsigned long millis_count = 0;
.................... 
.................... char Serial_OutputBuffer[60];
.................... 
.................... signed int32 kalman_big_1=0, kalman_big_2=0, kalman_diff=0;
.................... 
.................... 
.................... #int_PWM1
.................... void  PWM1_isr(void) 
*
0418:  PUSH    42
041A:  PUSH    36
041C:  PUSH    32
041E:  MOV     W0,[W15++]
0420:  MOV     #2,W0
0422:  REPEAT  #C
0424:  MOV     [W0++],[W15++]
.................... {
.................... 
....................    tick_count++;
0426:  INC.B   091B
....................    if(tick_count >= 8)
0428:  MOV     91A,W4
042A:  LSR     W4,#8,W4
042C:  CP.B    W4L,#8
042E:  BRA     LT,43A
....................    {   
....................       millis_count++;
0430:  INC     091C
0432:  BTSC.B  42.1
0434:  INC     091E
....................       tick = 1;
0436:  BSET.B  91A.0
....................       tick_count=0;
0438:  CLR.B   91B
....................    
....................    }
....................    if (millis_count >= 500) {
043A:  MOV     91E,W4
043C:  CP      W4,#0
043E:  BRA     NC,454
0440:  BRA     GTU,44A
0442:  MOV     91C,W4
0444:  MOV     #1F4,W3
0446:  CP      W3,W4
0448:  BRA     GTU,454
....................       output_toggle(LED_PIN);
044A:  BCLR.B  2C6.5
044C:  BTG.B   2CA.5
....................       uart_tick = 1;
044E:  BSET.B  91A.1
....................       millis_count = 0;
0450:  CLR     91C
0452:  CLR     91E
....................       
....................    }
.................... 
.................... }
.................... 
0454:  BCLR.B  88.7
0456:  MOV     #1A,W0
0458:  REPEAT  #C
045A:  MOV     [--W15],[W0--]
045C:  MOV     [--W15],W0
045E:  POP     32
0460:  POP     36
0462:  POP     42
0464:  RETFIE  
.................... #INT_TIMER3
.................... void  timer3_isr(void) 
*
04A8:  PUSH    42
04AA:  PUSH    36
04AC:  PUSH    32
04AE:  MOV     W0,[W15++]
04B0:  MOV     #2,W0
04B2:  REPEAT  #C
04B4:  MOV     [W0++],[W15++]
.................... {
.................... 
....................    output_bit(TIM_tick_pin , 1);
04B6:  BSET.B  2CA.3
04B8:  BCLR.B  2C6.3
....................    
....................    sample = (sample+1)%max_samples;
04BA:  MOV     8B6,W4
04BC:  ADD     W4,#1,W5
04BE:  MOV     #1E,W4
04C0:  REPEAT  #11
04C2:  DIV.U   W5,W4
04C4:  MOV     W1,8B6
....................    phase_angle[0] = sample;
04C6:  PUSH    8B6
04C8:  POP     904
....................    phase_angle[1] = (sample+10)%max_samples;
04CA:  MOV     8B6,W4
04CC:  ADD     W4,#A,W5
04CE:  MOV     #1E,W4
04D0:  REPEAT  #11
04D2:  DIV.U   W5,W4
04D4:  MOV     W1,906
....................    phase_angle[2] = (sample+20)%max_samples; 
04D6:  MOV     8B6,W4
04D8:  ADD     W4,#14,W5
04DA:  MOV     #1E,W4
04DC:  REPEAT  #11
04DE:  DIV.U   W5,W4
04E0:  MOV     W1,908
.................... 
....................    for (int i = 0 ; i < 3 ; i++) {
04E2:  CLR     A30
04E4:  MOV     A30,W4
04E6:  CP      W4,#3
04E8:  BRA     GE,680
....................       
....................       reference[i] = sine_table[phase_angle[i]];
04EA:  MOV     A30,W4
04EC:  MUL.UU  W4,#4,W0
04EE:  MOV     #8BA,W4
04F0:  ADD     W0,W4,W5
04F2:  MOV     A30,W4
04F4:  MUL.UU  W4,#2,W0
04F6:  MOV     #904,W4
04F8:  ADD     W0,W4,W0
04FA:  MOV     [W0],W6
04FC:  SL      W6,#1,W0
04FE:  MOV     #8C6,W4
0500:  ADD     W0,W4,W0
0502:  MOV     W0,W4
0504:  MOV     [W4],W0
0506:  CLR     W1
0508:  BTSC    W0.F
050A:  SETM    W1
050C:  MOV     #0,W4
050E:  MOV     [W4++],[W5++]
0510:  MOV     [W4++],[W5++]
....................       reference[i] = reference[i] * peak_voltage; 
0512:  MOV     A30,W4
0514:  MUL.UU  W4,#4,W0
0516:  MOV     #8BA,W4
0518:  ADD     W0,W4,W5
051A:  MOV     A30,W4
051C:  MUL.UU  W4,#4,W0
051E:  MOV     #8BA,W4
0520:  ADD     W0,W4,W0
0522:  MOV     #C,W4
0524:  MOV     [W0++],[W4++]
0526:  MOV     [W0++],[W4++]
0528:  MOV     8B8,W0
052A:  CLR     W1
052C:  BTSC    W0.F
052E:  SETM    W1
0530:  MOV     W0,W2
0532:  MOV     W1,W3
0534:  MOV     W6,W0
0536:  MOV     W7,W1
0538:  CALL    466
053C:  MOV     #0,W4
053E:  MOV     [W4++],[W5++]
0540:  MOV     [W4++],[W5++]
....................       if( reference[i] > 0)
0542:  MOV     A30,W4
0544:  MUL.UU  W4,#4,W0
0546:  MOV     #8BA,W4
0548:  ADD     W0,W4,W0
054A:  MOV     #A,W4
054C:  MOV     [W0++],[W4++]
054E:  MOV     [W0++],[W4++]
0550:  CP      W6,#0
0552:  BRA     LT,580
0554:  BRA     GT,55A
0556:  CP      W5,#0
0558:  BRA     LEU,580
....................       {
....................          reference[i] = reference[i] >> 8; 
055A:  MOV     A30,W4
055C:  MUL.UU  W4,#4,W0
055E:  MOV     #8BA,W4
0560:  ADD     W0,W4,W5
0562:  MOV     A30,W4
0564:  MUL.UU  W4,#4,W0
0566:  MOV     #8BA,W4
0568:  ADD     W0,W4,W0
056A:  MOV     #C,W4
056C:  MOV     [W0++],[W4++]
056E:  MOV     [W0++],[W4++]
0570:  MOV.B   D,W0L
0572:  MOV.B   W0L,[W5]
0574:  MOV.B   W7L,[W5+#1]
0576:  MOV.B   F,W0L
0578:  MOV.B   W0L,[W5+#2]
057A:  MOV.B   #0,W0L
057C:  MOV.B   W0L,[W5+#3]
....................       }
057E:  BRA     5FC
....................       else if( reference[i] < 0)
0580:  MOV     A30,W4
0582:  MUL.UU  W4,#4,W0
0584:  MOV     #8BA,W4
0586:  ADD     W0,W4,W0
0588:  MOV     #A,W4
058A:  MOV     [W0++],[W4++]
058C:  MOV     [W0++],[W4++]
058E:  CP      W6,#0
0590:  BRA     GT,5FC
0592:  BRA     LT,598
0594:  CP      W5,#0
0596:  BRA     C,5FC
....................       {
....................          reference[i] = 0 - reference[i];
0598:  MOV     A30,W4
059A:  MUL.UU  W4,#4,W0
059C:  MOV     #8BA,W4
059E:  ADD     W0,W4,W5
05A0:  MOV     A30,W4
05A2:  MUL.UU  W4,#4,W0
05A4:  MOV     #8BA,W4
05A6:  ADD     W0,W4,W0
05A8:  MOV     W0,W4
05AA:  MOV     #0,W3
05AC:  MOV     [W4++],[W3++]
05AE:  MOV     [W4++],[W3++]
05B0:  MOV     #0,W4
05B2:  SUB     W4,W0,[W5]
05B4:  MOV     #0,W4
05B6:  SUBB    W4,W1,[++W5]
....................          reference[i] = reference[i] >> 8;
05B8:  MOV     A30,W4
05BA:  MUL.UU  W4,#4,W0
05BC:  MOV     #8BA,W4
05BE:  ADD     W0,W4,W5
05C0:  MOV     A30,W4
05C2:  MUL.UU  W4,#4,W0
05C4:  MOV     #8BA,W4
05C6:  ADD     W0,W4,W0
05C8:  MOV     #C,W4
05CA:  MOV     [W0++],[W4++]
05CC:  MOV     [W0++],[W4++]
05CE:  MOV.B   D,W0L
05D0:  MOV.B   W0L,[W5]
05D2:  MOV.B   W7L,[W5+#1]
05D4:  MOV.B   F,W0L
05D6:  MOV.B   W0L,[W5+#2]
05D8:  MOV.B   #0,W0L
05DA:  MOV.B   W0L,[W5+#3]
....................          reference[i] = 0 - reference[i];
05DC:  MOV     A30,W4
05DE:  MUL.UU  W4,#4,W0
05E0:  MOV     #8BA,W4
05E2:  ADD     W0,W4,W5
05E4:  MOV     A30,W4
05E6:  MUL.UU  W4,#4,W0
05E8:  MOV     #8BA,W4
05EA:  ADD     W0,W4,W0
05EC:  MOV     W0,W4
05EE:  MOV     #0,W3
05F0:  MOV     [W4++],[W3++]
05F2:  MOV     [W4++],[W3++]
05F4:  MOV     #0,W4
05F6:  SUB     W4,W0,[W5]
05F8:  MOV     #0,W4
05FA:  SUBB    W4,W1,[++W5]
....................       }
....................       
....................       reference[i] = reference[i] + voltage_offset;
05FC:  MOV     A30,W4
05FE:  MUL.UU  W4,#4,W0
0600:  MOV     #8BA,W4
0602:  ADD     W0,W4,W5
0604:  MOV     A30,W4
0606:  MUL.UU  W4,#4,W0
0608:  MOV     #8BA,W4
060A:  ADD     W0,W4,W0
060C:  MOV     #C,W4
060E:  MOV     [W0++],[W4++]
0610:  MOV     [W0++],[W4++]
0612:  MOV     #3E8,W4
0614:  ADD     W6,W4,[W5]
0616:  ADDC    W7,#0,[++W5]
....................       if(reference[i] > high_duty_limit )
0618:  MOV     A30,W4
061A:  MUL.UU  W4,#4,W0
061C:  MOV     #8BA,W4
061E:  ADD     W0,W4,W0
0620:  MOV     #A,W4
0622:  MOV     [W0++],[W4++]
0624:  MOV     [W0++],[W4++]
0626:  CP      W6,#0
0628:  BRA     LT,64A
062A:  BRA     GT,632
062C:  MOV     #79E,W4
062E:  CP      W4,W5
0630:  BRA     C,64A
....................       { 
....................          reference[i] = high_duty_limit;
0632:  MOV     A30,W4
0634:  MUL.UU  W4,#4,W0
0636:  MOV     #8BA,W4
0638:  ADD     W0,W4,W5
063A:  MOV.B   #9E,W0L
063C:  MOV.B   W0L,[W5]
063E:  MOV.B   #7,W0L
0640:  MOV.B   W0L,[W5+#1]
0642:  MOV.B   #0,W0L
0644:  MOV.B   W0L,[W5+#2]
0646:  MOV.B   #0,W0L
0648:  MOV.B   W0L,[W5+#3]
....................       }
....................       if(reference[i] < low_duty_limit)
064A:  MOV     A30,W4
064C:  MUL.UU  W4,#4,W0
064E:  MOV     #8BA,W4
0650:  ADD     W0,W4,W0
0652:  MOV     #A,W4
0654:  MOV     [W0++],[W4++]
0656:  MOV     [W0++],[W4++]
0658:  CP      W6,#0
065A:  BRA     GT,67C
065C:  BRA     LT,664
065E:  MOV     #32,W4
0660:  CP      W4,W5
0662:  BRA     LEU,67C
....................       { 
....................          reference[i] = low_duty_limit;
0664:  MOV     A30,W4
0666:  MUL.UU  W4,#4,W0
0668:  MOV     #8BA,W4
066A:  ADD     W0,W4,W5
066C:  MOV.B   #32,W0L
066E:  MOV.B   W0L,[W5]
0670:  MOV.B   #0,W0L
0672:  MOV.B   W0L,[W5+#1]
0674:  MOV.B   #0,W0L
0676:  MOV.B   W0L,[W5+#2]
0678:  MOV.B   #0,W0L
067A:  MOV.B   W0L,[W5+#3]
....................       }
067C:  INC     0A30
067E:  BRA     4E4
....................    }
....................       
....................    *P1DC1 = reference[0];  *(P1DC1+1) = reference[0]>>8;
0680:  MOV.B   8BA,W0L
0682:  MOV.B   W0L,1D6
0684:  MOV.B   8BB,W0L
0686:  MOV.B   W0L,1D7
....................    *P1DC2 = reference[1];  *(P1DC2+1) = reference[1]>>8;
0688:  MOV.B   8BE,W0L
068A:  MOV.B   W0L,1D8
068C:  MOV.B   8BF,W0L
068E:  MOV.B   W0L,1D9
....................    *P1DC3 = reference[2];  *(P1DC3+1) = reference[2]>>8;
0690:  MOV.B   8C2,W0L
0692:  MOV.B   W0L,1DA
0694:  MOV.B   8C3,W0L
0696:  MOV.B   W0L,1DB
.................... 
....................    
....................    setup_timer2(TMR_INTERNAL | TMR_DIV_BY_1 | TMR_32_BIT , timer_table[freq]);
0698:  MOV     916,W0
069A:  SL      W0,#1,W0
069C:  CALL    100
06A0:  MOV     W0,W5
06A2:  CLR     110
06A4:  MOV     W5,10C
06A6:  MOV     W6,10E
06A8:  MOV     #8008,W4
06AA:  MOV     W4,110
....................    output_bit(TIM_tick_pin , 0);
06AC:  BCLR.B  2CA.3
06AE:  BCLR.B  2C6.3
....................    
06B0:  BCLR.B  84.7
06B2:  MOV     #1A,W0
06B4:  REPEAT  #C
06B6:  MOV     [--W15],[W0--]
06B8:  MOV     [--W15],W0
06BA:  POP     32
06BC:  POP     36
06BE:  POP     42
06C0:  RETFIE  
.................... }
.................... 
.................... 
....................    
.................... void main()
*
11B4:  MOV     #F80,W15
11B6:  MOV     #FFF,W0
11B8:  MOV     W0,20
11BA:  NOP     
11BC:  MOV     #4444,W0
11BE:  MOV     W0,96
11C0:  MOV     #4444,W0
11C2:  MOV     W0,A6
11C4:  BSET.B  81.7
11C6:  MOV     #8000,W4
11C8:  MOV     W4,216
11CA:  MOV     #400,W4
11CC:  MOV     W4,218
11CE:  MOV     #67,W4
11D0:  MOV     W4,21E
11D2:  CLR     8B6
11D4:  CLR     8B8
11D6:  CLR     912
11D8:  CLR     914
11DA:  MOV     #1,W4
11DC:  MOV     W4,916
11DE:  CLR     918
11E0:  BCLR.B  91A.0
11E2:  BCLR.B  91A.1
11E4:  CLR.B   91B
11E6:  CLR     91C
11E8:  CLR     91E
11EA:  CLR     95C
11EC:  CLR     95E
11EE:  CLR     960
11F0:  CLR     962
11F2:  CLR     964
11F4:  CLR     966
11F6:  CLR     968
11F8:  SETM    2A8
11FA:  BRA     129A
11FC:  DATA    C0,06,08
11FE:  DATA    00,00,00
1200:  DATA    4B,F0,3F
1202:  DATA    5C,0A,58
1204:  DATA    F6,3B,8F
1206:  DATA    00,C0,3C
1208:  DATA    8B,28,AC
120A:  DATA    3C,BE,F6
120C:  DATA    3F,D2,D5
120E:  DATA    44,16,8C
1210:  DATA    15,D7,BF
1212:  DATA    69,00,5A
1214:  DATA    2E,1B,87
1216:  DATA    99,3F,9A
1218:  DATA    5F,AD,4B
121A:  DATA    91,E4,01
121C:  DATA    C0,5D,11
121E:  DATA    2F,92,E4
1220:  DATA    81,FB,3F
1222:  DATA    38,DA,91
1224:  DATA    80,9D,C5
1226:  DATA    E0,BF,6F
1228:  DATA    12,C0,B4
122A:  DATA    C3,09,AB
122C:  DATA    3F,6B,C1
122E:  DATA    03,4E,C1
1230:  DATA    B5,45,BF
1232:  DATA    F7,40,05
1234:  DATA    FF,00,60
1236:  DATA    EF,3F,F3
1238:  DATA    A3,E2,F7
123A:  DATA    D7,FF,01
123C:  DATA    40,C0,B4
123E:  DATA    FF,05,3C
1240:  DATA    58,FC,3F
1242:  DATA    3B,D3,C0
1244:  DATA    B5,BA,8C
1246:  DATA    E2,3F,39
1248:  DATA    D3,C7,3D
124A:  DATA    41,79,B2
124C:  DATA    3F,87,0D
124E:  DATA    3C,50,D0
1250:  DATA    AF,62,3F
1252:  DATA    30,4B,8D
1254:  DATA    A2,82,AA
1256:  DATA    04,40,09
1258:  DATA    A0,40,4A
125A:  DATA    05,76,03
125C:  DATA    40,EC,9E
125E:  DATA    37,88,A6
1260:  DATA    44,F0,3F
1262:  DATA    8F,12,8D
1264:  DATA    29,9A,5B
1266:  DATA    C7,3F,0E
1268:  DATA    E0,80,7C
126A:  DATA    A1,D8,86
126C:  DATA    3F,29,4B
126E:  DATA    FB,95,C2
1270:  DATA    37,1A,3F
1272:  DATA    E8,03,E8
1274:  DATA    03,E8,03
1276:  DATA    C0,0C,08
1278:  DATA    BA,00,C0
127A:  DATA    06,09,04
127C:  DATA    00,00,00
127E:  INC     W2,W2
1280:  CP      W2,#1
1282:  BRA     NZ,128C
1284:  TBLRDL  [W1],W3
1286:  TBLRDH  [W1++],W4
1288:  MOV.B   6,W0L
128A:  RETURN  
128C:  CP      W2,#2
128E:  BRA     NZ,1294
1290:  MOV.B   7,W0L
1292:  RETURN  
1294:  MOV.B   8,W0L
1296:  CLR     W2
1298:  RETURN  
129A:  MOV     #0,W6
129C:  MOV     #0,W0
129E:  MOV     W0,32
12A0:  MOV     #11FC,W0
12A2:  MOV     W0,W1
12A4:  CLR     W2
12A6:  CALL    127E
12AA:  MOV.B   W0L,B
12AC:  CALL    127E
12B0:  MOV.B   W0L,A
12B2:  CP0     W5
12B4:  BRA     Z,12E8
12B6:  BTSS    W5.F
12B8:  BRA     12C8
12BA:  CALL    127E
12BE:  MOV.B   W0L,D
12C0:  CALL    127E
12C4:  MOV.B   W0L,C
12C6:  BCLR    W5.F
12C8:  BTSS    W5.E
12CA:  BRA     12DC
12CC:  BCLR    W5.E
12CE:  DEC     W5,W5
12D0:  CALL    127E
12D4:  MOV.B   W0L,W7L
12D6:  REPEAT  W5
12D8:  MOV.B   W7L,[W6++]
12DA:  BRA     12A6
12DC:  CALL    127E
12E0:  MOV.B   W0L,[W6++]
12E2:  DEC     W5,W5
12E4:  BRA     NZ,12DC
12E6:  BRA     12A6
.................... { 
....................     sprintf(Serial_OutputBuffer, "\nMotor Control Unit v0.1\r\n");
12E8:  MOV     #920,W4
12EA:  MOV     W4,968
12EC:  MOV     #0,W1
12EE:  MOV     W1,W0
12F0:  CLR.B   1
12F2:  CALL    3F0
12F6:  INC     W1,W1
12F8:  MOV     W1,[W15++]
12FA:  MOV     W0,[W15++]
12FC:  MOV     [--W15],W0
12FE:  CALL    6C2
1302:  MOV     [--W15],W1
1304:  MOV     #19,W0
1306:  CPSGT   W1,W0
1308:  BRA     12EE
....................     printf(Serial_OutputBuffer);
130A:  MOV     #920,W1
130C:  CP0.B   [W1]
130E:  BRA     Z,131E
1310:  BTSC.B  219.1
1312:  BRA     1310
1314:  MOV.B   [W1+#0],W0L
1316:  MOV.B   W0L,21A
1318:  CLR.B   21B
131A:  INC     W1,W1
131C:  BRA     130C
....................  
....................    freq = 1;
131E:  MOV     #1,W4
1320:  MOV     W4,916
....................    
....................    initMCPWM();
1322:  CALL    6D0
....................    fill_sine_table();
1326:  CALL    FBC
.................... 
....................    output_drive(LED_PIN);
132A:  BCLR.B  2C6.5
....................    output_drive(PWM_tick_pin);
132C:  BCLR.B  2C6.2
....................    output_drive(TIM_tick_pin);   
132E:  BCLR.B  2C6.3
....................    
....................    setup_adc(ADC_CLOCK_DIV_32);
1330:  MOV     #1F1F,W4
1332:  MOV     W4,2A4
1334:  MOV     #80E0,W4
1336:  MOV     W4,2A0
....................    setup_adc_ports(ADC_pin);
1338:  MOV     #FFFE,W4
133A:  MOV     W4,2A8
133C:  CLR     2A2
....................    set_adc_channel(0);
133E:  CLR     2A6
....................    delay_us(10);
1340:  REPEAT  #9E
1342:  NOP     
....................    
....................    setup_timer2(TMR_INTERNAL | TMR_DIV_BY_1 | TMR_32_BIT , timer_table[freq]);
1344:  MOV     916,W0
1346:  SL      W0,#1,W0
1348:  CALL    100
134C:  MOV     W0,W5
134E:  CLR     110
1350:  MOV     W5,10C
1352:  MOV     W6,10E
1354:  MOV     #8008,W4
1356:  MOV     W4,110
....................    enable_interrupts(INT_TIMER3);   // enable interrupt in timer3 register (in case of 32bit mode) 
1358:  BSET.B  8C.7
.................... 
....................    enable_interrupts(INT_PWM1);  
135A:  BSET.B  90.7
....................    enable_interrupts(INTR_GLOBAL);
135C:  BCLR.B  81.7
135E:  CLR     42
1360:  BSET.B  81.7
....................    
.................... 
....................    while(TRUE)         
....................    {
....................       
....................       if (tick) {
1362:  BTSS.B  91A.0
1364:  BRA     1462
....................          raw_adc = read_adc();
1366:  BCLR.B  2A0.0
1368:  BSET.B  2A0.1
136A:  BTSS.B  2A0.0
136C:  BRA     136A
136E:  PUSH    280
1370:  POP     912
....................          if (raw_adc > 1023) 
1372:  MOV     912,W4
1374:  MOV     #3FF,W3
1376:  CP      W3,W4
1378:  BRA     C,137E
....................          {
....................             raw_adc = 1023;
137A:  MOV     #3FF,W4
137C:  MOV     W4,912
....................          }
....................          
.................... //------------- KALMAN FILTER IMPLEMENTATION---------------//
....................          kalman_big_1 =  raw_adc << kalman_up;
137E:  MOV     #12,W4
1380:  MOV     912,W0
1382:  MOV     #0,W1
1384:  INC     W4,W4
1386:  DEC     W4,W4
1388:  BRA     Z,1390
138A:  SL      W0,W0
138C:  RLC     W1,W1
138E:  BRA     1386
1390:  MOV     W0,95C
1392:  MOV     W1,95E
....................          kalman_diff = kalman_big_1 - kalman_big_2;
1394:  MOV     95C,W4
1396:  MOV     960,W3
1398:  SUB     W4,W3,W0
139A:  MOV     W0,964
139C:  MOV     95E,W4
139E:  MOV     962,W3
13A0:  SUBB    W4,W3,W0
13A2:  MOV     W0,966
....................          if(kalman_diff > 0)
13A4:  MOV     966,W4
13A6:  CP      W4,#0
13A8:  BRA     LT,13D0
13AA:  BRA     GT,13B2
13AC:  MOV     964,W4
13AE:  CP      W4,#0
13B0:  BRA     LEU,13D0
....................          {
....................             kalman_diff = kalman_diff >> kalman_diff_down;
13B2:  MOV.B   965,W0L
13B4:  MOV.B   W0L,964
13B6:  MOV.B   966,W0L
13B8:  MOV.B   W0L,965
13BA:  MOV.B   967,W0L
13BC:  MOV.B   W0L,966
13BE:  CLR.B   967
....................             kalman_big_2 = kalman_big_2 + kalman_diff; 
13C0:  MOV     960,W0
13C2:  ADD     964,W0
13C4:  MOV     W0,960
13C6:  MOV     966,W4
13C8:  MOV     962,W3
13CA:  ADDC    W3,W4,W0
13CC:  MOV     W0,962
....................          }
13CE:  BRA     140C
....................          else if(kalman_diff < 0)
13D0:  MOV     966,W4
13D2:  CP      W4,#0
13D4:  BRA     GT,140C
13D6:  BRA     LT,13DE
13D8:  MOV     964,W4
13DA:  CP      W4,#0
13DC:  BRA     C,140C
....................          {
....................             kalman_diff = 0 - kalman_diff;
13DE:  MOV     #0,W4
13E0:  MOV     964,W3
13E2:  SUB     W4,W3,W0
13E4:  MOV     W0,964
13E6:  MOV     #0,W4
13E8:  MOV     966,W3
13EA:  SUBB    W4,W3,W0
13EC:  MOV     W0,966
....................             kalman_diff = kalman_diff >> kalman_diff_down;
13EE:  MOV.B   965,W0L
13F0:  MOV.B   W0L,964
13F2:  MOV.B   966,W0L
13F4:  MOV.B   W0L,965
13F6:  MOV.B   967,W0L
13F8:  MOV.B   W0L,966
13FA:  CLR.B   967
....................             kalman_big_2 = kalman_big_2 - kalman_diff;   
13FC:  MOV     960,W4
13FE:  MOV     964,W3
1400:  SUB     W4,W3,W0
1402:  MOV     W0,960
1404:  MOV     962,W4
1406:  MOV     966,W3
1408:  SUBB    W4,W3,W0
140A:  MOV     W0,962
....................          }
....................          if(kalman_big_2 < 0)
140C:  MOV     962,W4
140E:  CP      W4,#0
1410:  BRA     GT,141E
1412:  BRA     LT,141A
1414:  MOV     960,W4
1416:  CP      W4,#0
1418:  BRA     C,141E
....................          {
....................             kalman_big_2 = 0 ;
141A:  CLR     960
141C:  CLR     962
....................          }
....................          raw_adc = kalman_big_2 >> kalman_up;
141E:  MOV     #12,W4
1420:  MOV     960,W0
1422:  MOV     962,W1
1424:  INC     W4,W4
1426:  DEC     W4,W4
1428:  BRA     Z,1430
142A:  LSR     W1,W1
142C:  RRC     W0,W0
142E:  BRA     1426
1430:  MOV     W0,912
.................... //------------- KALMAN FILTER IMPLEMENTATION---------------//
.................... 
.................... 
....................          raw_adc = raw_adc >> 2;
1432:  LSR     912
1434:  LSR     912
....................          throttle_level = raw_adc;  
1436:  PUSH    912
1438:  POP     914
....................          
....................          if (throttle_level > 255)
143A:  MOV     914,W4
143C:  MOV     #FF,W3
143E:  CP      W3,W4
1440:  BRA     GE,1446
....................          {
....................             throttle_level = 255;
1442:  MOV     #FF,W4
1444:  MOV     W4,914
....................          }
....................          if (throttle_level < 0)   
1446:  MOV     914,W4
1448:  CP      W4,#0
144A:  BRA     GE,144E
....................          {  
....................             throttle_level = 0; 
144C:  CLR     914
....................          }  
....................          
....................          freq = throttle_level;
144E:  PUSH    914
1450:  POP     916
....................        
....................          peak_voltage = gain_table[throttle_level]; 
1452:  MOV     914,W4
1454:  MUL.UU  W4,#2,W0
1456:  CALL    278
145A:  MOV     W0,8B8
....................         
....................          output_bit(PWM_tick_pin , 0);
145C:  BCLR.B  2CA.2
145E:  BCLR.B  2C6.2
....................          tick = 0;      
1460:  BCLR.B  91A.0
....................       } 
....................       
....................       if (uart_tick) 
1462:  BTSS.B  91A.1
1464:  BRA     14E6
....................       {
....................          sprintf(Serial_OutputBuffer, "\r\n %d , %d , %d , %d", raw_adc , throttle_level , freq , peak_voltage);
1466:  MOV     #920,W4
1468:  MOV     W4,968
146A:  MOV.B   #D,W0L
146C:  CALL    6C2
1470:  MOV.B   #A,W0L
1472:  CALL    6C2
1476:  MOV.B   #20,W0L
1478:  CALL    6C2
147C:  MOV     912,W0
147E:  MOV     #0,W4
1480:  CALL    1084
1484:  MOV.B   #20,W0L
1486:  CALL    6C2
148A:  MOV.B   #2C,W0L
148C:  CALL    6C2
1490:  MOV.B   #20,W0L
1492:  CALL    6C2
1496:  MOV     914,W0
1498:  MOV     #0,W4
149A:  CALL    1084
149E:  MOV.B   #20,W0L
14A0:  CALL    6C2
14A4:  MOV.B   #2C,W0L
14A6:  CALL    6C2
14AA:  MOV.B   #20,W0L
14AC:  CALL    6C2
14B0:  MOV     916,W0
14B2:  MOV     #0,W4
14B4:  CALL    1084
14B8:  MOV.B   #20,W0L
14BA:  CALL    6C2
14BE:  MOV.B   #2C,W0L
14C0:  CALL    6C2
14C4:  MOV.B   #20,W0L
14C6:  CALL    6C2
14CA:  MOV     8B8,W0
14CC:  MOV     #0,W4
14CE:  CALL    1084
....................          printf(Serial_OutputBuffer);
14D2:  MOV     #920,W1
14D4:  CP0.B   [W1]
14D6:  BRA     Z,14E6
14D8:  BTSC.B  219.1
14DA:  BRA     14D8
14DC:  MOV.B   [W1+#0],W0L
14DE:  MOV.B   W0L,21A
14E0:  CLR.B   21B
14E2:  INC     W1,W1
14E4:  BRA     14D4
....................          
....................       
....................       }
14E6:  BRA     1362
....................     } 
.................... }    
.................... 
14E8:  PWRSAV  #0
.................... 
.................... void initMCPWM(void) 
.................... {    
....................    *(P1TCON+1)  =  0x80;  *P1TCON =  0x02;
*
06D0:  MOV.B   #80,W0L
06D2:  MOV.B   W0L,1C1
06D4:  MOV.B   #2,W0L
06D6:  MOV.B   W0L,1C0
....................    *(P1TPER+1)  =  0x03;  *P1TPER =  0xE7;  
06D8:  MOV.B   #3,W0L
06DA:  MOV.B   W0L,1C5
06DC:  MOV.B   #E7,W0L
06DE:  MOV.B   W0L,1C4
....................    *(P1SECMP+1) =  0x00;  *P1SECMP=  0x01; //
06E0:  CLR.B   1C7
06E2:  MOV.B   #1,W0L
06E4:  MOV.B   W0L,1C6
....................    *(PWM1CON1+1)=  0x00;  *PWM1CON1= 0x77;  
06E6:  CLR.B   1C9
06E8:  MOV.B   #77,W0L
06EA:  MOV.B   W0L,1C8
....................    *(PWM1CON2+1)=  0x00;  *PWM1CON2= 0x02;
06EC:  CLR.B   1CB
06EE:  MOV.B   #2,W0L
06F0:  MOV.B   W0L,1CA
....................    *(P1DTCON1+1)=  0x00;  *P1DTCON1= 0x10; //0x09
06F2:  CLR.B   1CD
06F4:  MOV.B   #10,W0L
06F6:  MOV.B   W0L,1CC
....................    *(P1DTCON2+1)=  0x00;  *P1DTCON2= 0x00;
06F8:  CLR.B   1CF
06FA:  CLR.B   1CE
....................    *(P1FLTACON+1)= 0x00;  *P1FLTACON=0x00; //0x0000
06FC:  CLR.B   1D1
06FE:  CLR.B   1D0
....................    *(P1OVDCON+1)=  0x3F;  *P1OVDCON= 0x0F;
0700:  MOV.B   #3F,W0L
0702:  MOV.B   W0L,1D5
0704:  MOV.B   #F,W0L
0706:  MOV.B   W0L,1D4
....................    
....................    *(P1DC1+1) = duty[0]>>8;   *P1DC1 = duty[0]; 
0708:  MOV.B   8B1,W0L
070A:  MOV.B   W0L,1D7
070C:  MOV.B   8B0,W0L
070E:  MOV.B   W0L,1D6
....................    *(P1DC2+1) = duty[1]>>8;   *P1DC2 = duty[1];
0710:  MOV.B   8B3,W0L
0712:  MOV.B   W0L,1D9
0714:  MOV.B   8B2,W0L
0716:  MOV.B   W0L,1D8
....................    *(P1DC3+1) = duty[2]>>8;   *P1DC3 = duty[2];  
0718:  MOV.B   8B5,W0L
071A:  MOV.B   W0L,1DB
071C:  MOV.B   8B4,W0L
071E:  MOV.B   W0L,1DA
....................    *(IPC14+1) =0x00;*(IPC14) =0x70;
0720:  CLR.B   C1
0722:  MOV.B   #70,W0L
0724:  MOV.B   W0L,C0
0726:  RETURN  
.................... }
.................... 
.................... 
....................    
.................... void fill_sine_table(void)
*
0FBC:  MOV     W5,[W15++]
0FBE:  MOV     W6,[W15++]
0FC0:  MOV     W7,[W15++]
0FC2:  MOV     W8,[W15++]
.................... {
....................    for(sine_index=0;sine_index < max_samples;sine_index++)  
0FC4:  CLR     902
0FC6:  MOV     902,W4
0FC8:  CP      W4,#1E
0FCA:  BRA     C,107A
....................    {
....................       theeta=sine_index*2.0*PI/max_samples;
0FCC:  MOV     902,W0
0FCE:  MOV     #0,W1
0FD0:  MOV     #0,W2
0FD2:  MOV     #0,W3
0FD4:  CALL    728
0FD8:  MOV     #0,W4
0FDA:  MOV     #0,W5
0FDC:  MOV     #0,W6
0FDE:  MOV     #4000,W7
0FE0:  CALL    792
0FE4:  MOV     W0,W5
0FE6:  MOV     W1,W6
0FE8:  MOV     W2,W7
0FEA:  MOV     W3,W8
0FEC:  MOV     W5,[W15++]
0FEE:  MOV     W6,[W15++]
0FF0:  MOV     W7,[W15++]
0FF2:  MOV     W5,W0
0FF4:  MOV     W6,W1
0FF6:  MOV     W7,W2
0FF8:  MOV     W8,W3
0FFA:  MOV     #2D18,W4
0FFC:  MOV     #5444,W5
0FFE:  MOV     #21FB,W6
1000:  MOV     #4009,W7
1002:  CALL    792
1006:  MOV     [--W15],W7
1008:  MOV     [--W15],W6
100A:  MOV     [--W15],W5
100C:  MOV     W0,W5
100E:  MOV     W1,W6
1010:  MOV     W2,W7
1012:  MOV     W3,W8
1014:  MOV     W5,[W15++]
1016:  MOV     W6,[W15++]
1018:  MOV     W7,[W15++]
101A:  MOV     W5,W0
101C:  MOV     W6,W1
101E:  MOV     W7,W2
1020:  MOV     W8,W3
1022:  MOV     #0,W4
1024:  MOV     #0,W5
1026:  MOV     #0,W6
1028:  MOV     #403E,W7
102A:  CALL    8A2
102E:  MOV     [--W15],W7
1030:  MOV     [--W15],W6
1032:  MOV     [--W15],W5
1034:  MOV     W0,90A
1036:  MOV     W1,90C
1038:  MOV     W2,90E
103A:  MOV     W3,910
....................       sine_table[sine_index]=255*sin(theeta);
103C:  MOV     902,W0
103E:  SL      W0,#1,W0
1040:  MOV     #8C6,W4
1042:  ADD     W0,W4,W5
1044:  PUSH    90A
1046:  POP     96E
1048:  PUSH    90C
104A:  POP     970
104C:  PUSH    90E
104E:  POP     972
1050:  PUSH    910
1052:  POP     974
1054:  CALL    F22
1058:  MOV     W5,[W15++]
105A:  MOV     W0,W4
105C:  MOV     W1,W5
105E:  MOV     W2,W6
1060:  MOV     W3,W7
1062:  MOV     #0,W0
1064:  MOV     #0,W1
1066:  MOV     #E000,W2
1068:  MOV     #406F,W3
106A:  CALL    792
106E:  MOV     [--W15],W5
1070:  CALL    F5E
1074:  MOV     W0,[W5]
1076:  INC     0902
1078:  BRA     FC6
....................    }
107A:  MOV     [--W15],W8
107C:  MOV     [--W15],W7
107E:  MOV     [--W15],W6
1080:  MOV     [--W15],W5
1082:  RETURN  
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 

Configuration Fuses:
   Word  1L: 0306   XT_PLL8 PR CKSFSM
          H: 0000  
   Word  2L: 003F   WPSB16 WPSA512 NOWDT
          H: 0000  
   Word  3L: 8793   PUT64 BORV42 BROWNOUT LPOL_HIGH HPOL_HIGH NOPWMPIN MCLR
          H: 0000  
   Word  4L: 310F  
          H: 0000  
   Word  5L: 330F  
          H: 0000  
   Word  6L: 0004   WRT PROTECT
          H: 0000  
   Word  7L: C003   ICSP1 NODEBUG
          H: 0000  
