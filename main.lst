CCS PCD C Compiler, Version 5.112, 5967               26-Apr-24 12:25

               Filename:   C:\Users\eelab\Documents\dspic30f4011\main.lst

               ROM used:   4374 bytes (13%)
                           Largest free fragment is 28394
               RAM used:   1430 (70%) at main() level
                           1637 (80%) worst case
               Stack used: 96 locations (46 in main + 50 for interrupts)
               Stack size: 128

*
0000:  GOTO    F50
*
001A:  DATA    92,01,00
*
0062:  DATA    00,01,00
.................... #include <30F4011.h>
.................... //////////// Standard Header file for the DSPIC30F4011 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device DSPIC30F4011
*
0150:  MOV     W5,[W15++]
0152:  MOV     #C,W5
0154:  REPEAT  #3
0156:  MOV     [W5++],[W15++]
0158:  MUL.UU  W0,W2,W4
015A:  BTSS    W3.F
015C:  BRA     162
015E:  MUL.SS  W0,W3,W6
0160:  BRA     164
0162:  MUL.UU  W0,W3,W6
0164:  BCLR.B  42.0
0166:  ADD     W6,W5,W5
0168:  ADDC    W7,#0,W8
016A:  BTSS    W1.F
016C:  BRA     172
016E:  MUL.SS  W1,W2,W6
0170:  BRA     174
0172:  MUL.UU  W1,W2,W6
0174:  ADDC    W6,W5,W5
0176:  ADDC    W7,W8,W8
0178:  ADDC    #0,W9
017A:  MUL.SS  W1,W3,W6
017C:  ADDC    W6,W8,W8
017E:  ADDC    W9,W7,W7
0180:  MOV     W7,W3
0182:  MOV     W8,W2
0184:  MOV     W5,W1
0186:  MOV     W4,W0
0188:  MOV     #12,W5
018A:  REPEAT  #3
018C:  MOV     [--W15],[W5--]
018E:  MOV     [--W15],W5
0190:  RETURN  
*
03F2:  MOV     W5,[W15++]
03F4:  MOV     #C,W5
03F6:  REPEAT  #3
03F8:  MOV     [W5++],[W15++]
03FA:  MOV     W0,W4
03FC:  MOV     W1,W5
03FE:  MOV     W2,W6
0400:  MOV     W3,W7
0402:  CLR     W0
0404:  CLR     W1
0406:  CLR     W2
0408:  CLR     W3
040A:  BCLR    W8.0
040C:  BTSS    W7.F
040E:  BRA     420
0410:  BSET    W8.0
0412:  COM     W7,W7
0414:  COM     W6,W6
0416:  COM     W5,W5
0418:  NEG     W4,W4
041A:  ADDC    W5,#0,W5
041C:  ADDC    W6,#0,W6
041E:  ADDC    W7,#0,W7
0420:  IOR      W4,  W5,W9
0422:  BRA     NZ,428
0424:  IOR      W6,  W7,W9
0426:  BRA     Z,452
0428:  MOV     #473,W9
042A:  BTSC    W3.4
042C:  BRA     444
042E:  BCLR.B  42.0
0430:  RLC     W4,W4
0432:  RLC     W5,W5
0434:  RLC     W6,W6
0436:  RLC     W7,W7
0438:  RLC     W0,W0
043A:  RLC     W1,W1
043C:  RLC     W2,W2
043E:  RLC     W3,W3
0440:  DEC     W9,W9
0442:  BRA     NZ,42A
0444:  SL      W9,#4,W9
0446:  BCLR.B  42.0
0448:  BCLR    W9.F
044A:  BCLR    W3.4
044C:  XOR     W9,W3,W3
044E:  BTSC    W8.0
0450:  BSET    W3.F
0452:  MOV     #12,W5
0454:  REPEAT  #3
0456:  MOV     [--W15],[W5--]
0458:  MOV     [--W15],W5
045A:  RETURN  
045C:  MOV     W8,[W15++]
045E:  MOV     #12,W8
0460:  REPEAT  #4
0462:  MOV     [W8++],[W15++]
0464:  CLR     W11
0466:  MUL.UU  W12,#0,W12
0468:  MOV     W3,W8
046A:  MOV     W7,W9
046C:  MOV     #7FF,W10
046E:  BCLR.B  42.0
0470:  BCLR.B  42.1
0472:  ASR     W8,#4,W8
0474:  AND     W10,W8,W8
0476:  CP0     W8
0478:  BRA     Z,55C
047A:  BCLR.B  42.0
047C:  BCLR.B  42.1
047E:  ASR     W9,#4,W9
0480:  AND     W10,W9,W9
0482:  CP0     W9
0484:  BRA     Z,55C
0486:  ADD     W9,W8,W8
0488:  BTSC    W9.B
048A:  BRA     494
048C:  SUB     #3FF,W8
048E:  BRA     Z,55C
0490:  BRA     NC,55C
0492:  BRA     49A
0494:  MOV     #401,W10
0496:  ADD.B   W10L,W5L,W5L
0498:  BRA     C,55C
049A:  XOR     W3,W7,W13
049C:  BCLR.B  42.0
049E:  BCLR.B  42.1
04A0:  AND     #F,W3
04A2:  BSET    W3.4
04A4:  AND     #F,W7
04A6:  BSET    W7.4
04A8:  MOV     W8,[W15++]
04AA:  MUL.UU  W4,W1,W8
04AC:  MUL.UU  W5,W0,W10
04AE:  ADD     W8,W10,W10
04B0:  ADDC    W9,W11,W11
04B2:  ADDC    #0,W12
04B4:  MUL.UU  W4,W2,W8
04B6:  ADD     W8,W11,W11
04B8:  ADDC    W9,W12,W12
04BA:  MUL.UU  W5,W1,W8
04BC:  CLR     W10
04BE:  ADD     W8,W11,W11
04C0:  ADDC    W9,W12,W12
04C2:  ADDC    #0,W10
04C4:  MUL.UU  W6,W0,W8
04C6:  ADD     W8,W11,W11
04C8:  ADDC    W9,W12,W12
04CA:  ADDC    #0,W10
04CC:  CLR     W11
04CE:  MUL.UU  W4,W3,W8
04D0:  ADD     W8,W12,W12
04D2:  ADDC    W9,W10,W10
04D4:  ADDC    #0,W11
04D6:  MUL.UU  W5,W2,W8
04D8:  ADD     W8,W12,W12
04DA:  ADDC    W9,W10,W10
04DC:  ADDC    #0,W11
04DE:  MUL.UU  W6,W1,W8
04E0:  ADD     W8,W12,W12
04E2:  ADDC    W9,W10,W10
04E4:  ADDC    #0,W11
04E6:  MUL.UU  W7,W0,W8
04E8:  ADD     W8,W12,W12
04EA:  ADDC    W9,W10,W10
04EC:  ADDC    #0,W11
04EE:  MOV     W12,W0
04F0:  CLR     W12
04F2:  MUL.UU  W5,W3,W8
04F4:  ADD     W8,W10,W10
04F6:  ADDC    W9,W11,W11
04F8:  ADDC    #0,W12
04FA:  MUL.UU  W6,W2,W8
04FC:  ADD     W8,W10,W10
04FE:  ADDC    W9,W11,W11
0500:  ADDC    #0,W12
0502:  MUL.UU  W6,W3,W8
0504:  ADD     W8,W11,W11
0506:  ADDC    W9,W12,W12
0508:  MUL.UU  W7,W1,W8
050A:  ADD     W8,W10,W10
050C:  ADDC    W9,W11,W11
050E:  ADDC    #0,W12
0510:  MUL.UU  W7,W2,W8
0512:  ADD     W8,W11,W11
0514:  ADDC    W9,W12,W12
0516:  MUL.UU  W7,W3,W8
0518:  ADD     W8,W12,W12
051A:  MOV     W10,W1
051C:  MOV     W11,W2
051E:  MOV     W12,W3
0520:  MOV     #5,W4
0522:  BCLR.B  42.0
0524:  RRC     W3,W3
0526:  RRC     W2,W2
0528:  RRC     W1,W1
052A:  RRC     W0,W0
052C:  DEC     W4,W4
052E:  BRA     NZ,522
0530:  MOV     [--W15],W8
0532:  INC     W8,W8
0534:  IOR      W0,  W1,W6
0536:  BRA     Z,53A
0538:  BRA     53E
053A:  IOR      W2,  W3,W6
053C:  BRA     Z,54E
053E:  BTSC    W3.4
0540:  BRA     54E
0542:  BCLR.B  42.0
0544:  RLC     W0,W0
0546:  RLC     W1,W1
0548:  RLC     W2,W2
054A:  RLC     W3,W3
054C:  DEC     W8,W8
054E:  SL      W8,#4,W8
0550:  BCLR    W3.F
0552:  BTSC    W13.F
0554:  BSET    W3.F
0556:  BCLR    W3.4
0558:  XOR     W8,W3,W3
055A:  BRA     562
055C:  MUL.UU  W0,#0,W0
055E:  MUL.UU  W0,#0,W2
0560:  BRA     562
0562:  MOV     #1A,W8
0564:  REPEAT  #4
0566:  MOV     [--W15],[W8--]
0568:  MOV     [--W15],W8
056A:  RETURN  
056C:  MOV     W8,[W15++]
056E:  MOV     #12,W8
0570:  REPEAT  #4
0572:  MOV     [W8++],[W15++]
0574:  XOR     W3,W7,W13
0576:  MOV     W3,W8
0578:  MOV     W7,W9
057A:  MOV     #7FF,W10
057C:  BCLR.B  42.0
057E:  BCLR.B  42.1
0580:  ASR     W8,#4,W8
0582:  AND     W10,W8,W8
0584:  CP0     W8
0586:  BRA     Z,660
0588:  BCLR.B  42.0
058A:  BCLR.B  42.1
058C:  ASR     W9,#4,W9
058E:  AND     W10,W9,W9
0590:  CP0     W9
0592:  BRA     Z,660
0594:  CLR     W10
0596:  SUB     W8,W9,W12
0598:  BRA     NC,5A0
059A:  ADD     #3FF,W12
059C:  BRA     C,660
059E:  BRA     5A8
05A0:  MOV     #401,W11
05A2:  SUB     W12,W11,W12
05A4:  BRA     NC,660
05A6:  BRA     Z,660
05A8:  CLR     W8
05AA:  CLR     W9
05AC:  CLR     W10
05AE:  CLR     W11
05B0:  AND     #1F,W3
05B2:  BSET    W3.4
05B4:  AND     #1F,W7
05B6:  BSET    W7.4
05B8:  MOV     W12,[W15++]
05BA:  MOV     #36,W12
05BC:  SUB     W0,W4,W0
05BE:  SUBB    W1,W5,W1
05C0:  SUBB    W2,W6,W2
05C2:  SUBB    W3,W7,W3
05C4:  BRA     N,5CA
05C6:  BRA     C,5D4
05C8:  BRA     NZ,5D6
05CA:  ADD     W0,W4,W0
05CC:  ADDC    W1,W5,W1
05CE:  ADDC    W2,W6,W2
05D0:  ADDC    W3,W7,W3
05D2:  BRA     5D6
05D4:  BSET    W8.0
05D6:  DEC     W12,W12
05D8:  BRA     Z,5F0
05DA:  BCLR.B  42.0
05DC:  RLC     W0,W0
05DE:  RLC     W1,W1
05E0:  RLC     W2,W2
05E2:  RLC     W3,W3
05E4:  BCLR.B  42.0
05E6:  RLC     W8,W8
05E8:  RLC     W9,W9
05EA:  RLC     W10,W10
05EC:  RLC     W11,W11
05EE:  BRA     5BC
05F0:  MOV     [--W15],W12
05F2:  BTSC    W11.5
05F4:  BRA     5F8
05F6:  BRA     604
05F8:  BCLR.B  42.0
05FA:  RRC     W11,W11
05FC:  RRC     W10,W10
05FE:  RRC     W9,W9
0600:  RRC     W8,W8
0602:  BRA     60A
0604:  DEC     W12,W12
0606:  BCLR.B  42.0
0608:  BRA     Z,660
060A:  BTSC.B  42.0
060C:  BRA     620
060E:  RLC     W0,W0
0610:  RLC     W1,W1
0612:  RLC     W2,W2
0614:  RLC     W3,W3
0616:  SUB     W0,W4,W4
0618:  SUBB    W1,W5,W5
061A:  SUBB    W2,W6,W6
061C:  SUBB    W3,W7,W7
061E:  BRA     NC,64A
0620:  INC     W8,W8
0622:  BRA     NZ,64A
0624:  INC     W9,W9
0626:  BRA     NZ,64A
0628:  INC     W10,W10
062A:  BRA     NZ,64A
062C:  INC     W11,W11
062E:  BRA     NZ,64A
0630:  INC     W12,W12
0632:  BRA     Z,660
0634:  BRA     64A
0636:  DEC     W12,W12
0638:  BRA     Z,660
063A:  BTSC    W11.4
063C:  BRA     64A
063E:  BCLR.B  42.0
0640:  RLC     W8,W8
0642:  RLC     W9,W9
0644:  RLC     W10,W10
0646:  RLC     W11,W11
0648:  BRA     63A
064A:  SL      W12,#4,W12
064C:  BCLR.B  42.0
064E:  BCLR    W12.F
0650:  BTSC    W13.F
0652:  BSET    W12.F
0654:  BCLR    W11.4
0656:  XOR     W12,W11,W3
0658:  MOV     W10,W2
065A:  MOV     W9,W1
065C:  MOV     W8,W0
065E:  BRA     66A
0660:  MOV     #0,W0
0662:  MOV     #0,W1
0664:  MOV     #0,W2
0666:  MOV     #0,W3
0668:  BRA     66A
066A:  MOV     #1A,W8
066C:  REPEAT  #4
066E:  MOV     [--W15],[W8--]
0670:  MOV     [--W15],W8
0672:  RETURN  
0674:  MOV     W8,[W15++]
0676:  MOV     #12,W8
0678:  REPEAT  #4
067A:  MOV     [W8++],[W15++]
067C:  MOV     #8000,W8
067E:  BTSC.B  43.0
0680:  XOR     W8,W7,W7
0682:  CP0     W0
0684:  BRA     NZ,694
0686:  CP0     W1
0688:  BRA     NZ,694
068A:  CP0     W2
068C:  BRA     NZ,694
068E:  MOV     #7FFF,W10
0690:  AND     W3,W10,W10
0692:  BTSS.B  42.1
0694:  MOV     W3,W10
0696:  XOR     W7,W10,W11
0698:  MOV     W3,W8
069A:  MOV     W7,W9
069C:  MOV     W7,W12
069E:  MOV     #7FF,W13
06A0:  BCLR.B  42.1
06A2:  BCLR.B  42.0
06A4:  ASR     W8,#4,W8
06A6:  AND     W13,W8,W8
06A8:  CP0     W8
06AA:  BRA     Z,824
06AC:  BCLR.B  42.1
06AE:  BCLR.B  42.0
06B0:  ASR     W9,#4,W9
06B2:  AND     W13,W9,W9
06B4:  CP0     W9
06B6:  BRA     Z,834
06B8:  CLR     W13
06BA:  BCLR.B  42.1
06BC:  BCLR.B  42.0
06BE:  CP      W9,W8
06C0:  BRA     Z,836
06C2:  BRA     N,846
06C4:  BCLR    W13.0
06C6:  BSET    W13.1
06C8:  SUB     W9,W8,W8
06CA:  AND     #F,W3
06CC:  BSET    W3.4
06CE:  AND     #F,W7
06D0:  BSET    W7.4
06D2:  SUB     #34,W8
06D4:  BRA     NN,702
06D6:  ADD     #34,W8
06D8:  BCLR.B  42.1
06DA:  BCLR.B  42.0
06DC:  RRC     W3,W3
06DE:  RRC     W2,W2
06E0:  RRC     W1,W1
06E2:  RRC     W0,W0
06E4:  DEC     W8,W8
06E6:  BRA     NZ,6D8
06E8:  BRA     712
06EA:  SUB     #34,W8
06EC:  BRA     NN,70C
06EE:  ADD     #34,W8
06F0:  BCLR.B  42.1
06F2:  BCLR.B  42.0
06F4:  RRC     W7,W7
06F6:  RRC     W6,W6
06F8:  RRC     W5,W5
06FA:  RRC     W4,W4
06FC:  DEC     W8,W8
06FE:  BRA     NZ,6F0
0700:  BRA     738
0702:  MOV     W4,W0
0704:  MOV     W5,W1
0706:  MOV     W6,W2
0708:  MOV     W7,W3
070A:  XOR     W11,W12,W12
070C:  BTSC    W12.F
070E:  BTG     W11.F
0710:  BRA     804
0712:  BTSS    W11.F
0714:  BRA     754
0716:  BTSC    W13.4
0718:  MOV     W12,W11
071A:  COM     W0,W0
071C:  COM     W1,W1
071E:  COM     W2,W2
0720:  COM.B   W3L,W3L
0722:  AND.B   #1F,W3L
0724:  INC     W0,W0
0726:  BRA     NZ,732
0728:  INC     W1,W1
072A:  BRA     NZ,732
072C:  INC     W2,W2
072E:  BRA     NZ,732
0730:  INC.B   W3L,W3L
0732:  BTSC    W13.4
0734:  BRA     79A
0736:  BRA     754
0738:  BTSS    W11.F
073A:  BRA     754
073C:  COM     W4,W4
073E:  COM     W5,W5
0740:  COM     W6,W6
0742:  COM.B   W7L,W7L
0744:  AND.B   #1F,W7L
0746:  INC     W4,W4
0748:  BRA     NZ,754
074A:  INC     W5,W5
074C:  BRA     NZ,754
074E:  INC     W6,W6
0750:  BRA     NZ,754
0752:  INC.B   W7L,W7L
0754:  BCLR.B  42.1
0756:  BCLR.B  42.0
0758:  ADD     W0,W4,W0
075A:  ADDC    W1,W5,W1
075C:  ADDC    W2,W6,W2
075E:  ADDC.B  W3L,W7L,W3L
0760:  BTSC    W3.5
0762:  BSET    W13.3
0764:  BTSC    W13.0
0766:  BRA     77A
0768:  BTSC    W13.1
076A:  BRA     76E
076C:  BRA     784
076E:  BTSC    W11.F
0770:  BRA     79A
0772:  BTSC    W13.3
0774:  BRA     7C8
0776:  BSET    W13.6
0778:  BRA     7BC
077A:  BTSC    W11.F
077C:  BRA     79A
077E:  BTSC    W13.3
0780:  BRA     7C8
0782:  BRA     7BC
0784:  BTSC    W11.F
0786:  BRA     790
0788:  MOV     W10,W11
078A:  BTSC    W13.3
078C:  BRA     7C8
078E:  BRA     804
0790:  BSET    W13.4
0792:  XOR.B   #10,W3L
0794:  BTSC    W3.4
0796:  BRA     716
0798:  MOV     W10,W11
079A:  AND     #1F,W3
079C:  IOR      W3,  W2,W8
079E:  BRA     NZ,7A4
07A0:  IOR      W1,  W0,W8
07A2:  BRA     Z,7BC
07A4:  BTSC    W3.4
07A6:  BRA     7BC
07A8:  BCLR.B  42.1
07AA:  BCLR.B  42.0
07AC:  RLC     W0,W0
07AE:  RLC     W1,W1
07B0:  RLC     W2,W2
07B2:  RLC     W3,W3
07B4:  DEC     W9,W9
07B6:  BTSC.B  42.1
07B8:  BRA     81E
07BA:  BRA     7A4
07BC:  BTSC    W13.0
07BE:  MOV     W10,W11
07C0:  BTSC    W13.1
07C2:  MOV     W12,W11
07C4:  BTSS    W13.5
07C6:  BRA     804
07C8:  BCLR.B  42.0
07CA:  RRC.B   W3L,W3L
07CC:  RRC     W2,W2
07CE:  RRC     W1,W1
07D0:  RRC     W0,W0
07D2:  BTSC.B  42.0
07D4:  BSET    W13.5
07D6:  INC     W9,W9
07D8:  BTSC.B  42.1
07DA:  BRA     81E
07DC:  BTSS    W13.5
07DE:  BRA     7FC
07E0:  INC     W0,W0
07E2:  BRA     NZ,7FC
07E4:  INC     W1,W1
07E6:  BRA     NZ,7FC
07E8:  INC     W2,W2
07EA:  BRA     NZ,7FC
07EC:  INC     W3,W3
07EE:  BRA     NZ,7FC
07F0:  RRC.B   W3L,W3L
07F2:  RRC     W2,W2
07F4:  RRC     W1,W1
07F6:  RRC     W0,W0
07F8:  INC     W9,W9
07FA:  BRA     Z,81E
07FC:  BTSC    W13.0
07FE:  MOV     W10,W11
0800:  BTSC    W13.1
0802:  MOV     W12,W11
0804:  IOR      W0,  W1,W4
0806:  BRA     NZ,80C
0808:  IOR      W2,  W3,W4
080A:  BRA     Z,858
080C:  BCLR    W3.4
080E:  BCLR.B  42.1
0810:  BCLR.B  42.0
0812:  SL      W9,#4,W9
0814:  XOR     W9,W3,W3
0816:  BSET    W3.F
0818:  BTSS    W11.F
081A:  BCLR    W3.F
081C:  BRA     858
081E:  MUL.UU  W0,#0,W0
0820:  MUL.UU  W2,#0,W2
0822:  BRA     858
0824:  MOV     #8000,W8
0826:  BTSC    W10.F
0828:  XOR     W8,W7,W7
082A:  MOV     W5,W1
082C:  MOV     W4,W0
082E:  MOV     W6,W2
0830:  MOV     W7,W3
0832:  BRA     858
0834:  BRA     858
0836:  AND     #F,W7
0838:  BSET    W7.4
083A:  AND     #F,W3
083C:  BSET    W3.4
083E:  BTSC    W11.F
0840:  BCLR    W7.4
0842:  BSET    W13.2
0844:  BRA     738
0846:  AND     #F,W3
0848:  BSET    W3.4
084A:  AND     #F,W7
084C:  BSET    W7.4
084E:  SUB     W8,W9,W8
0850:  ADD     W8,W9,W9
0852:  BCLR    W13.1
0854:  BSET    W13.0
0856:  BRA     6EA
0858:  MOV     #1A,W8
085A:  REPEAT  #4
085C:  MOV     [--W15],[W8--]
085E:  MOV     [--W15],W8
0860:  RETURN  
0862:  MOV     W8,[W15++]
0864:  MOV     W9,[W15++]
0866:  MOV     W10,[W15++]
0868:  XOR     W3,W7,W9
086A:  BTSS    W9.F
086C:  BRA     87A
086E:  BCLR.B  42.0
0870:  BCLR.B  42.1
0872:  BTSS    W3.F
0874:  BRA     8DE
0876:  BSET.B  42.0
0878:  BRA     8DE
087A:  MOV     #7FF,W10
087C:  MOV     W3,W8
087E:  MOV     W7,W9
0880:  ASR     W8,#4,W8
0882:  AND     W10,W8,W8
0884:  ASR     W9,#4,W9
0886:  AND     W10,W9,W9
0888:  SUB     W9,W8,W10
088A:  BRA     Z,896
088C:  BTSS    W3.F
088E:  BRA     8DE
0890:  MOV     #1,W0
0892:  XOR.B   42
0894:  BRA     8DE
0896:  MOV     W3,W8
0898:  MOV     W7,W9
089A:  AND     #1F,W3
089C:  AND     #1F,W7
089E:  BCLR    W3.4
08A0:  BCLR    W7.4
08A2:  SUB.B   W7L,W3L,W10L
08A4:  BRA     Z,8B0
08A6:  BTSS    W8.F
08A8:  BRA     8DE
08AA:  MOV     #1,W0
08AC:  XOR.B   42
08AE:  BRA     8DE
08B0:  SUB     W6,W2,W10
08B2:  BRA     Z,8BE
08B4:  BTSS    W8.F
08B6:  BRA     8DE
08B8:  MOV     #1,W0
08BA:  XOR.B   42
08BC:  BRA     8DE
08BE:  SUB     W5,W1,W10
08C0:  BRA     Z,8CC
08C2:  BTSS    W8.F
08C4:  BRA     8DE
08C6:  MOV     #1,W0
08C8:  XOR.B   42
08CA:  BRA     8DE
08CC:  SUB     W4,W0,W10
08CE:  BRA     Z,8DA
08D0:  BTSS    W8.F
08D2:  BRA     8DE
08D4:  MOV     #1,W0
08D6:  XOR.B   42
08D8:  BRA     8DE
08DA:  BCLR.B  42.0
08DC:  BRA     8DE
08DE:  MOV     [--W15],W10
08E0:  MOV     [--W15],W9
08E2:  MOV     [--W15],W8
08E4:  RETURN  
08E6:  MOV     W5,[W15++]
08E8:  MOV     #C,W5
08EA:  REPEAT  #5
08EC:  MOV     [W5++],[W15++]
08EE:  MOV     W3,W8
08F0:  MOV     W2,W7
08F2:  MOV     W1,W6
08F4:  MOV     W0,W5
08F6:  MOV     W3,W9
08F8:  MOV     #473,W11
08FA:  ASR     W3,#4,W3
08FC:  MOV     #7FF,W10
08FE:  AND     W10,W3,W3
0900:  SUB     W11,W3,W11
0902:  AND     #1F,W8
0904:  BSET    W8.4
0906:  CLR     W0
0908:  CLR     W1
090A:  CLR     W2
090C:  CLR     W3
090E:  BCLR.B  42.0
0910:  RRC     W8,W8
0912:  RRC     W7,W7
0914:  RRC     W6,W6
0916:  RRC     W5,W5
0918:  RRC     W3,W3
091A:  RRC     W2,W2
091C:  RRC     W1,W1
091E:  RRC     W0,W0
0920:  DEC     W11,W11
0922:  BRA     NZ,90E
0924:  BTSS    W9.F
0926:  BRA     93A
0928:  COM     W0,W0
092A:  COM     W1,W1
092C:  COM     W2,W2
092E:  COM     W3,W3
0930:  INC     W0,W0
0932:  ADDC    #0,W1
0934:  ADDC    #0,W2
0936:  ADDC    #0,W3
0938:  BRA     93A
093A:  MOV     #16,W5
093C:  REPEAT  #5
093E:  MOV     [--W15],[W5--]
0940:  MOV     [--W15],W5
0942:  RETURN  
*
0C28:  MOV     W5,[W15++]
0C2A:  MOV     #C,W5
0C2C:  REPEAT  #5
0C2E:  MOV     [W5++],[W15++]
0C30:  MOV     W3,W8
0C32:  MOV     W2,W7
0C34:  MOV     W1,W6
0C36:  MOV     W0,W5
0C38:  MOV     W3,W9
0C3A:  MOV     #473,W11
0C3C:  ASR     W3,#4,W3
0C3E:  MOV     #7FF,W10
0C40:  AND     W10,W3,W3
0C42:  SUB     W11,W3,W11
0C44:  AND     #1F,W8
0C46:  BSET    W8.4
0C48:  CLR     W0
0C4A:  CLR     W1
0C4C:  CLR     W2
0C4E:  CLR     W3
0C50:  BCLR.B  42.0
0C52:  RRC     W8,W8
0C54:  RRC     W7,W7
0C56:  RRC     W6,W6
0C58:  RRC     W5,W5
0C5A:  RRC     W3,W3
0C5C:  RRC     W2,W2
0C5E:  RRC     W1,W1
0C60:  RRC     W0,W0
0C62:  DEC     W11,W11
0C64:  BRA     NZ,C50
0C66:  BTSS    W9.F
0C68:  BRA     C7C
0C6A:  COM     W0,W0
0C6C:  COM     W1,W1
0C6E:  COM     W2,W2
0C70:  COM     W3,W3
0C72:  INC     W0,W0
0C74:  ADDC    #0,W1
0C76:  ADDC    #0,W2
0C78:  ADDC    #0,W3
0C7A:  BRA     C7C
0C7C:  MOV     #16,W5
0C7E:  REPEAT  #5
0C80:  MOV     [--W15],[W5--]
0C82:  MOV     [--W15],W5
0C84:  RETURN  
*
0D4E:  MOV     W5,[W15++]
0D50:  MOV     #C,W5
0D52:  REPEAT  #3
0D54:  MOV     [W5++],[W15++]
0D56:  MOV     W0,W4
0D58:  MOV     W1,W5
0D5A:  MOV     W2,W6
0D5C:  MOV     W3,W7
0D5E:  CLR     W0
0D60:  CLR     W1
0D62:  CLR     W2
0D64:  CLR     W3
0D66:  BCLR    W8.0
0D68:  BTSS    W7.F
0D6A:  BRA     D7C
0D6C:  BSET    W8.0
0D6E:  COM     W7,W7
0D70:  COM     W6,W6
0D72:  COM     W5,W5
0D74:  NEG     W4,W4
0D76:  ADDC    W5,#0,W5
0D78:  ADDC    W6,#0,W6
0D7A:  ADDC    W7,#0,W7
0D7C:  IOR      W4,  W5,W9
0D7E:  BRA     NZ,D84
0D80:  IOR      W6,  W7,W9
0D82:  BRA     Z,DAE
0D84:  MOV     #473,W9
0D86:  BTSC    W3.4
0D88:  BRA     DA0
0D8A:  BCLR.B  42.0
0D8C:  RLC     W4,W4
0D8E:  RLC     W5,W5
0D90:  RLC     W6,W6
0D92:  RLC     W7,W7
0D94:  RLC     W0,W0
0D96:  RLC     W1,W1
0D98:  RLC     W2,W2
0D9A:  RLC     W3,W3
0D9C:  DEC     W9,W9
0D9E:  BRA     NZ,D86
0DA0:  SL      W9,#4,W9
0DA2:  BCLR.B  42.0
0DA4:  BCLR    W9.F
0DA6:  BCLR    W3.4
0DA8:  XOR     W9,W3,W3
0DAA:  BTSC    W8.0
0DAC:  BSET    W3.F
0DAE:  MOV     #12,W5
0DB0:  REPEAT  #3
0DB2:  MOV     [--W15],[W5--]
0DB4:  MOV     [--W15],W5
0DB6:  RETURN  
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #device ICSP=1
.................... #use delay(clock=64000000,crystal=8000000)  
.................... 
.................... //!#use delay(clock=40000000, Aux: crystal=8000000)
.................... 
.................... #FUSES NOWDT                    //No Watch Dog Timer
.................... #FUSES CKSFSM                   //Clock Switching is enabled, fail Safe clock monitor is enabled
.................... #FUSES LPOL_LOW                 //Low-Side Transistors Polarity is Active-Low (PWM 0,2,4 and 6)
.................... #FUSES PWMPIN   
.................... 
.................... #include <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
*
0944:  MOV     W5,[W15++]
0946:  MOV     W6,[W15++]
0948:  MOV     W7,[W15++]
094A:  MOV     W8,[W15++]
094C:  CLR     D44
094E:  CLR     D46
0950:  CLR     D48
0952:  MOV     #3FF0,W4
0954:  MOV     W4,D4A
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
0956:  MOV     #FF1F,W4
0958:  MOV     W4,D54
095A:  SETM    D56
095C:  SETM    D58
095E:  MOV     #BFDF,W4
0960:  MOV     W4,D5A
0962:  MOV     #1C35,W4
0964:  MOV     W4,D5C
0966:  MOV     #5555,W4
0968:  MOV     W4,D5E
096A:  MOV     #5555,W4
096C:  MOV     W4,D60
096E:  MOV     #3FA5,W4
0970:  MOV     W4,D62
0972:  MOV     #3F1C,W4
0974:  MOV     W4,D64
0976:  MOV     #16A7,W4
0978:  MOV     W4,D66
097A:  MOV     #C16C,W4
097C:  MOV     W4,D68
097E:  MOV     #BF56,W4
0980:  MOV     W4,D6A
0982:  MOV     #F3E6,W4
0984:  MOV     W4,D6C
0986:  MOV     #D65,W4
0988:  MOV     W4,D6E
098A:  MOV     #1A0,W4
098C:  MOV     W4,D70
098E:  MOV     #3EFA,W4
0990:  MOV     W4,D72
0992:  MOV     #A3E,W4
0994:  MOV     W4,D74
0996:  MOV     #3931,W4
0998:  MOV     W4,D76
099A:  MOV     #7E4C,W4
099C:  MOV     W4,D78
099E:  MOV     #BE92,W4
09A0:  MOV     W4,D7A
09A2:  MOV     #DDFB,W4
09A4:  MOV     W4,D7C
09A6:  MOV     #2B77,W4
09A8:  MOV     W4,D7E
09AA:  MOV     #EDB1,W4
09AC:  MOV     W4,D80
09AE:  MOV     #3E21,W4
09B0:  MOV     W4,D82
09B2:  MOV     #6FCC,W4
09B4:  MOV     W4,D84
09B6:  MOV     #8FF7,W4
09B8:  MOV     W4,D86
09BA:  MOV     #C610,W4
09BC:  MOV     W4,D88
09BE:  MOV     #BDA8,W4
09C0:  MOV     W4,D8A
09C2:  MOV     #124C,W4
09C4:  MOV     W4,D8C
09C6:  MOV     #8E1C,W4
09C8:  MOV     W4,D8E
09CA:  MOV     #3AF9,W4
09CC:  MOV     W4,D90
09CE:  MOV     #3CF3,W4
09D0:  MOV     W4,D92
09D2:  MOV     #7676,W4
09D4:  MOV     W4,D94
09D6:  MOV     #350F,W4
09D8:  MOV     W4,D96
09DA:  MOV     #C0DE,W4
09DC:  MOV     W4,D98
09DE:  MOV     #3CF0,W4
09E0:  MOV     W4,D9A
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
09E2:  MOV     D2A,W0
09E4:  MOV     D2C,W1
09E6:  MOV     D2E,W2
09E8:  MOV     D30,W3
09EA:  MOV     #0,W4
09EC:  MOV     #0,W5
09EE:  MOV     #0,W6
09F0:  MOV     #0,W7
09F2:  CALL    862
09F6:  BRA     NC,A02
09F8:  MOV     #D2A,W0
09FA:  MOV     #D2A,W1
09FC:  REPEAT  #7
09FE:  MOV     [W0++],[W1++]
0A00:  BTG.B   D31.7
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
0A02:  MOV     D2A,W0
0A04:  MOV     D2C,W1
0A06:  MOV     D2E,W2
0A08:  MOV     D30,W3
0A0A:  MOV     #C884,W4
0A0C:  MOV     #6DC9,W5
0A0E:  MOV     #5F30,W6
0A10:  MOV     #3FE4,W7
0A12:  CALL    45C
0A16:  CALL    8E6
0A1A:  MOV.B   W0L,D32
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
0A1C:  MOV     D2A,W0
0A1E:  MOV     D2C,W1
0A20:  MOV     D2E,W2
0A22:  MOV     D30,W3
0A24:  MOV     #C884,W4
0A26:  MOV     #6DC9,W5
0A28:  MOV     #5F30,W6
0A2A:  MOV     #3FE4,W7
0A2C:  CALL    45C
0A30:  MOV     W0,W5
0A32:  MOV     W1,W6
0A34:  MOV     W2,W7
0A36:  MOV     W3,W8
0A38:  MOV     #0,W1
0A3A:  MOV     #0,W2
0A3C:  MOV     #0,W3
0A3E:  MOV.B   D32,W0L
0A40:  CLR.B   1
0A42:  CALL    3F2
0A46:  BSET.B  43.0
0A48:  MOV     W5,[W15++]
0A4A:  MOV     W6,[W15++]
0A4C:  MOV     W7,[W15++]
0A4E:  MOV     W0,W4
0A50:  MOV     W5,W0
0A52:  MOV     W1,W5
0A54:  MOV     W6,W1
0A56:  MOV     W2,W6
0A58:  MOV     W7,W2
0A5A:  MOV     W3,W7
0A5C:  MOV     W8,W3
0A5E:  CALL    674
0A62:  MOV     [--W15],W7
0A64:  MOV     [--W15],W6
0A66:  MOV     [--W15],W5
0A68:  MOV     W0,D4C
0A6A:  MOV     W1,D4E
0A6C:  MOV     W2,D50
0A6E:  MOV     W3,D52
....................    quad = quad % 4;                    // quadrant (0 to 3)
0A70:  MOV.B   D32,W0L
0A72:  AND.B   W0L,#3,W0L
0A74:  MOV.B   W0L,D32
.................... 
....................    if (quad == 0 || quad == 2)
0A76:  CP0.B   D32
0A78:  BRA     Z,A80
0A7A:  MOV     D32,W4
0A7C:  CP.B    W4L,#2
0A7E:  BRA     NZ,A9E
....................       t = frac * PI_DIV_BY_TWO;
0A80:  MOV     D4C,W0
0A82:  MOV     D4E,W1
0A84:  MOV     D50,W2
0A86:  MOV     D52,W3
0A88:  MOV     #2D18,W4
0A8A:  MOV     #5444,W5
0A8C:  MOV     #21FB,W6
0A8E:  MOV     #3FF9,W7
0A90:  CALL    45C
0A94:  MOV     W0,D3C
0A96:  MOV     W1,D3E
0A98:  MOV     W2,D40
0A9A:  MOV     W3,D42
0A9C:  BRA     B32
....................    else if (quad == 1)
0A9E:  MOV     D32,W4
0AA0:  CP.B    W4L,#1
0AA2:  BRA     NZ,AEC
....................       t = (1-frac) * PI_DIV_BY_TWO;
0AA4:  BSET.B  43.0
0AA6:  MOV     #0,W0
0AA8:  MOV     #0,W1
0AAA:  MOV     #0,W2
0AAC:  MOV     #3FF0,W3
0AAE:  MOV     D4C,W4
0AB0:  MOV     D4E,W5
0AB2:  MOV     D50,W6
0AB4:  MOV     D52,W7
0AB6:  CALL    674
0ABA:  MOV     W0,W5
0ABC:  MOV     W1,W6
0ABE:  MOV     W2,W7
0AC0:  MOV     W3,W8
0AC2:  MOV     W5,[W15++]
0AC4:  MOV     W6,[W15++]
0AC6:  MOV     W7,[W15++]
0AC8:  MOV     W5,W0
0ACA:  MOV     W6,W1
0ACC:  MOV     W7,W2
0ACE:  MOV     W8,W3
0AD0:  MOV     #2D18,W4
0AD2:  MOV     #5444,W5
0AD4:  MOV     #21FB,W6
0AD6:  MOV     #3FF9,W7
0AD8:  CALL    45C
0ADC:  MOV     [--W15],W7
0ADE:  MOV     [--W15],W6
0AE0:  MOV     [--W15],W5
0AE2:  MOV     W0,D3C
0AE4:  MOV     W1,D3E
0AE6:  MOV     W2,D40
0AE8:  MOV     W3,D42
0AEA:  BRA     B32
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
0AEC:  BSET.B  43.0
0AEE:  MOV     D4C,W0
0AF0:  MOV     D4E,W1
0AF2:  MOV     D50,W2
0AF4:  MOV     D52,W3
0AF6:  MOV     #0,W4
0AF8:  MOV     #0,W5
0AFA:  MOV     #0,W6
0AFC:  MOV     #3FF0,W7
0AFE:  CALL    674
0B02:  MOV     W0,W5
0B04:  MOV     W1,W6
0B06:  MOV     W2,W7
0B08:  MOV     W3,W8
0B0A:  MOV     W5,[W15++]
0B0C:  MOV     W6,[W15++]
0B0E:  MOV     W7,[W15++]
0B10:  MOV     W5,W0
0B12:  MOV     W6,W1
0B14:  MOV     W7,W2
0B16:  MOV     W8,W3
0B18:  MOV     #2D18,W4
0B1A:  MOV     #5444,W5
0B1C:  MOV     #21FB,W6
0B1E:  MOV     #3FF9,W7
0B20:  CALL    45C
0B24:  MOV     [--W15],W7
0B26:  MOV     [--W15],W6
0B28:  MOV     [--W15],W5
0B2A:  MOV     W0,D3C
0B2C:  MOV     W1,D3E
0B2E:  MOV     W2,D40
0B30:  MOV     W3,D42
.................... 
....................    y = 1.0;
0B32:  CLR     D34
0B34:  CLR     D36
0B36:  CLR     D38
0B38:  MOV     #3FF0,W4
0B3A:  MOV     W4,D3A
....................    t = t * t;
0B3C:  MOV     D3C,W0
0B3E:  MOV     D3E,W1
0B40:  MOV     D40,W2
0B42:  MOV     D42,W3
0B44:  MOV     D3C,W4
0B46:  MOV     D3E,W5
0B48:  MOV     D40,W6
0B4A:  MOV     D42,W7
0B4C:  CALL    45C
0B50:  MOV     W0,D3C
0B52:  MOV     W1,D3E
0B54:  MOV     W2,D40
0B56:  MOV     W3,D42
....................    for (i = 0; i <= 8; i++)
0B58:  CLR.B   D33
0B5A:  MOV     D32,W4
0B5C:  LSR     W4,#8,W4
0B5E:  CP.B    W4L,#8
0B60:  BRA     GTU,BC4
....................    {
....................       t2 = t2 * t;
0B62:  MOV     D44,W0
0B64:  MOV     D46,W1
0B66:  MOV     D48,W2
0B68:  MOV     D4A,W3
0B6A:  MOV     D3C,W4
0B6C:  MOV     D3E,W5
0B6E:  MOV     D40,W6
0B70:  MOV     D42,W7
0B72:  CALL    45C
0B76:  MOV     W0,D44
0B78:  MOV     W1,D46
0B7A:  MOV     W2,D48
0B7C:  MOV     W3,D4A
....................       y = y + p_64[i] * t2;
0B7E:  MOV.B   D33,W0L
0B80:  CLR.B   1
0B82:  SL      W0,#3,W0
0B84:  MOV     #D54,W4
0B86:  ADD     W0,W4,W0
0B88:  MOV     W0,W5
0B8A:  MOV     W5,[W15++]
0B8C:  MOV     [W5],W0
0B8E:  MOV     [++W5],W1
0B90:  MOV     [++W5],W2
0B92:  MOV     [++W5],W3
0B94:  MOV     D44,W4
0B96:  MOV     D46,W5
0B98:  MOV     D48,W6
0B9A:  MOV     D4A,W7
0B9C:  CALL    45C
0BA0:  MOV     [--W15],W5
0BA2:  BCLR.B  43.0
0BA4:  MOV     W0,W4
0BA6:  MOV     W1,W5
0BA8:  MOV     W2,W6
0BAA:  MOV     W3,W7
0BAC:  MOV     D34,W0
0BAE:  MOV     D36,W1
0BB0:  MOV     D38,W2
0BB2:  MOV     D3A,W3
0BB4:  CALL    674
0BB8:  MOV     W0,D34
0BBA:  MOV     W1,D36
0BBC:  MOV     W2,D38
0BBE:  MOV     W3,D3A
0BC0:  INC.B   0D33
0BC2:  BRA     B5A
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
0BC4:  MOV     D32,W4
0BC6:  CP.B    W4L,#2
0BC8:  BRA     Z,BD0
0BCA:  MOV     D32,W4
0BCC:  CP.B    W4L,#1
0BCE:  BRA     NZ,BDA
....................       y = -y;  // correct sign
0BD0:  MOV     #D34,W0
0BD2:  MOV     #D34,W1
0BD4:  REPEAT  #7
0BD6:  MOV     [W0++],[W1++]
0BD8:  BTG.B   D3B.7
.................... 
....................    return (y);
0BDA:  MOV     D34,W0
0BDC:  MOV     D36,W1
0BDE:  MOV     D38,W2
0BE0:  MOV     D3A,W3
0BE2:  MOV     [--W15],W8
0BE4:  MOV     [--W15],W7
0BE6:  MOV     [--W15],W6
0BE8:  MOV     [--W15],W5
0BEA:  RETURN  
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
0BEC:  MOV     W5,[W15++]
0BEE:  MOV     W6,[W15++]
0BF0:  MOV     W7,[W15++]
0BF2:  MOV     W8,[W15++]
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
0BF4:  BSET.B  43.0
0BF6:  MOV     D1A,W0
0BF8:  MOV     D1C,W1
0BFA:  MOV     D1E,W2
0BFC:  MOV     D20,W3
0BFE:  MOV     #2D18,W4
0C00:  MOV     #5444,W5
0C02:  MOV     #21FB,W6
0C04:  MOV     #3FF9,W7
0C06:  CALL    674
0C0A:  MOV     W0,W5
0C0C:  MOV     W1,W6
0C0E:  MOV     W2,W7
0C10:  MOV     W3,W8
0C12:  MOV     W5,D2A
0C14:  MOV     W6,D2C
0C16:  MOV     W7,D2E
0C18:  MOV     W8,D30
0C1A:  CALL    944
0C1E:  MOV     [--W15],W8
0C20:  MOV     [--W15],W7
0C22:  MOV     [--W15],W6
0C24:  MOV     [--W15],W5
0C26:  RETURN  
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #define P1TCON 0x01C0
.................... #define P1TMR 0x01C2 
.................... #define P1TPER 0x01C4
.................... #define P1SECMP 0x01C6
.................... #define PWM1CON1 0x01C8 
.................... #define PWM1CON2 0x01CA
.................... #define P1DTCON1 0x01CC
.................... #define P1DTCON2 0x01CE  
.................... #define P1FLTACON 0x01D0
.................... #define P1OVDCON 0x01D4   
.................... #define P1DC1 0x01D6   
.................... #define P1DC2 0x01D8
.................... #define P1DC3 0x01DA
.................... #define IPC14 0x00C0  
.................... #define CLKDIV 0x0744 
.................... #define PLLFBD 0x0746
.................... 
.................... 
.................... #define ADC_pin sAN0
.................... #define LED_PIN PIN_B5
.................... 
.................... #define voltage_offset 1000//1248
.................... #define low_duty_limit 50
.................... #define high_duty_limit 1950
.................... #define SLOPE 2.7
....................  
.................... #define break_level 5
.................... #define sustain_level 200  
.................... #define break_amplitude 0 
.................... #define pedestal_amplitude 10
.................... #define peak_amplitude 950
.................... 
.................... 
.................... #define throttle_PIN PIN_B1
.................... #define PWM_tick_pin PIN_B2
.................... #define TIM_tick_pin PIN_B3
.................... 
.................... 
.................... 
.................... void initMCPWM(void);
.................... void fill_sine_table(void);
.................... void timer_reload(void);
.................... void voltage_gain(void); 
.................... 
.................... 
.................... unsigned int16 duty[3]={0,0,0},sample=0;
.................... signed int16 peak_voltage =0;//  1184; 
.................... signed int32 reference[3] = {0,0,0};
.................... 
.................... const unsigned max_samples=30.0;
.................... signed int16 sine_table[max_samples];
.................... unsigned int16 sine_index,phase_angle[3] = {0 , 0 , 0};
.................... double theeta;
.................... 
.................... const unsigned max_freq = 250; //Hz
.................... //!const double per_clock_tick = 0.006405; //ms
.................... const double per_clock_tick = 0.007996; //ms
.................... unsigned int16 timer_table[max_freq+1];
.................... 
.................... unsigned int16 gain_table[256];
.................... unsigned int16 raw_adc =0 ;
.................... signed int16 throttle_level = 0;
.................... unsigned int16 freq = 1;
.................... unsigned int16 temp = 0;
.................... 
.................... int1 tick = 0;
.................... int8 tick_count = 0;
.................... unsigned long millis_count = 0;
.................... 
.................... 
.................... #int_PWM1
.................... void  PWM1_isr(void) 
*
0100:  PUSH    42
0102:  PUSH    36
0104:  PUSH    32
0106:  MOV     W0,[W15++]
0108:  MOV     #2,W0
010A:  REPEAT  #C
010C:  MOV     [W0++],[W15++]
.................... {
.................... 
....................    tick_count++;
010E:  INC.B   0D11
....................    if(tick_count >= 8)
0110:  MOV     D10,W4
0112:  LSR     W4,#8,W4
0114:  CP.B    W4L,#8
0116:  BRA     LT,126
....................    {   
....................       output_bit(PWM_tick_pin , 1);
0118:  BSET.B  2CA.2
011A:  BCLR.B  2C6.2
....................       millis_count++;
011C:  INC     0D12
011E:  BTSC.B  42.1
0120:  INC     0D14
....................       tick = 1;
0122:  BSET.B  D10.0
....................       tick_count=0;
0124:  CLR.B   D11
....................    
....................    }
....................    if (millis_count >= 500) {
0126:  MOV     D14,W4
0128:  CP      W4,#0
012A:  BRA     NC,13E
012C:  BRA     GTU,136
012E:  MOV     D12,W4
0130:  MOV     #1F4,W3
0132:  CP      W3,W4
0134:  BRA     GTU,13E
....................       output_toggle(LED_PIN);
0136:  BCLR.B  2C6.5
0138:  BTG.B   2CA.5
....................       millis_count = 0;
013A:  CLR     D12
013C:  CLR     D14
....................    }
.................... 
.................... }
013E:  BCLR.B  88.7
0140:  MOV     #1A,W0
0142:  REPEAT  #C
0144:  MOV     [--W15],[W0--]
0146:  MOV     [--W15],W0
0148:  POP     32
014A:  POP     36
014C:  POP     42
014E:  RETFIE  
.................... #INT_TIMER1
.................... void  timer1_isr(void) 
*
0192:  PUSH    42
0194:  PUSH    36
0196:  PUSH    32
0198:  MOV     W0,[W15++]
019A:  MOV     #2,W0
019C:  REPEAT  #C
019E:  MOV     [W0++],[W15++]
.................... {
....................    output_bit(TIM_tick_pin , 1);
01A0:  BSET.B  2CA.3
01A2:  BCLR.B  2C6.3
.................... //!   delay_us(10);
.................... //!   output_bit(TIM_tick_pin , 0); 
.................... //!   
....................    
....................    sample = (sample+1)%max_samples;
01A4:  MOV     8B6,W4
01A6:  ADD     W4,#1,W5
01A8:  MOV     #1E,W4
01AA:  REPEAT  #11
01AC:  DIV.U   W5,W4
01AE:  MOV     W1,8B6
....................    phase_angle[0] = sample;
01B0:  PUSH    8B6
01B2:  POP     904
....................    phase_angle[1] = (sample+10)%max_samples;
01B4:  MOV     8B6,W4
01B6:  ADD     W4,#A,W5
01B8:  MOV     #1E,W4
01BA:  REPEAT  #11
01BC:  DIV.U   W5,W4
01BE:  MOV     W1,906
....................    phase_angle[2] = (sample+20)%max_samples; 
01C0:  MOV     8B6,W4
01C2:  ADD     W4,#14,W5
01C4:  MOV     #1E,W4
01C6:  REPEAT  #11
01C8:  DIV.U   W5,W4
01CA:  MOV     W1,908
.................... 
....................    for (int i = 0 ; i < 3 ; i++) {
01CC:  CLR     DDC
01CE:  MOV     DDC,W4
01D0:  CP      W4,#3
01D2:  BRA     GE,36A
....................       
....................       reference[i] = sine_table[phase_angle[i]];
01D4:  MOV     DDC,W4
01D6:  MUL.UU  W4,#4,W0
01D8:  MOV     #8BA,W4
01DA:  ADD     W0,W4,W5
01DC:  MOV     DDC,W4
01DE:  MUL.UU  W4,#2,W0
01E0:  MOV     #904,W4
01E2:  ADD     W0,W4,W0
01E4:  MOV     [W0],W6
01E6:  SL      W6,#1,W0
01E8:  MOV     #8C6,W4
01EA:  ADD     W0,W4,W0
01EC:  MOV     W0,W4
01EE:  MOV     [W4],W0
01F0:  CLR     W1
01F2:  BTSC    W0.F
01F4:  SETM    W1
01F6:  MOV     #0,W4
01F8:  MOV     [W4++],[W5++]
01FA:  MOV     [W4++],[W5++]
....................       reference[i] = reference[i] * peak_voltage; 
01FC:  MOV     DDC,W4
01FE:  MUL.UU  W4,#4,W0
0200:  MOV     #8BA,W4
0202:  ADD     W0,W4,W5
0204:  MOV     DDC,W4
0206:  MUL.UU  W4,#4,W0
0208:  MOV     #8BA,W4
020A:  ADD     W0,W4,W0
020C:  MOV     #C,W4
020E:  MOV     [W0++],[W4++]
0210:  MOV     [W0++],[W4++]
0212:  MOV     8B8,W0
0214:  CLR     W1
0216:  BTSC    W0.F
0218:  SETM    W1
021A:  MOV     W0,W2
021C:  MOV     W1,W3
021E:  MOV     W6,W0
0220:  MOV     W7,W1
0222:  CALL    150
0226:  MOV     #0,W4
0228:  MOV     [W4++],[W5++]
022A:  MOV     [W4++],[W5++]
....................       if( reference[i] > 0)
022C:  MOV     DDC,W4
022E:  MUL.UU  W4,#4,W0
0230:  MOV     #8BA,W4
0232:  ADD     W0,W4,W0
0234:  MOV     #A,W4
0236:  MOV     [W0++],[W4++]
0238:  MOV     [W0++],[W4++]
023A:  CP      W6,#0
023C:  BRA     LT,26A
023E:  BRA     GT,244
0240:  CP      W5,#0
0242:  BRA     LEU,26A
....................       {
....................          reference[i] = reference[i] >> 8; 
0244:  MOV     DDC,W4
0246:  MUL.UU  W4,#4,W0
0248:  MOV     #8BA,W4
024A:  ADD     W0,W4,W5
024C:  MOV     DDC,W4
024E:  MUL.UU  W4,#4,W0
0250:  MOV     #8BA,W4
0252:  ADD     W0,W4,W0
0254:  MOV     #C,W4
0256:  MOV     [W0++],[W4++]
0258:  MOV     [W0++],[W4++]
025A:  MOV.B   D,W0L
025C:  MOV.B   W0L,[W5]
025E:  MOV.B   W7L,[W5+#1]
0260:  MOV.B   F,W0L
0262:  MOV.B   W0L,[W5+#2]
0264:  MOV.B   #0,W0L
0266:  MOV.B   W0L,[W5+#3]
....................       }
0268:  BRA     2E6
....................       else if( reference[i] < 0)
026A:  MOV     DDC,W4
026C:  MUL.UU  W4,#4,W0
026E:  MOV     #8BA,W4
0270:  ADD     W0,W4,W0
0272:  MOV     #A,W4
0274:  MOV     [W0++],[W4++]
0276:  MOV     [W0++],[W4++]
0278:  CP      W6,#0
027A:  BRA     GT,2E6
027C:  BRA     LT,282
027E:  CP      W5,#0
0280:  BRA     C,2E6
....................       {
....................          reference[i] = 0 - reference[i];
0282:  MOV     DDC,W4
0284:  MUL.UU  W4,#4,W0
0286:  MOV     #8BA,W4
0288:  ADD     W0,W4,W5
028A:  MOV     DDC,W4
028C:  MUL.UU  W4,#4,W0
028E:  MOV     #8BA,W4
0290:  ADD     W0,W4,W0
0292:  MOV     W0,W4
0294:  MOV     #0,W3
0296:  MOV     [W4++],[W3++]
0298:  MOV     [W4++],[W3++]
029A:  MOV     #0,W4
029C:  SUB     W4,W0,[W5]
029E:  MOV     #0,W4
02A0:  SUBB    W4,W1,[++W5]
....................          reference[i] = reference[i] >> 8;
02A2:  MOV     DDC,W4
02A4:  MUL.UU  W4,#4,W0
02A6:  MOV     #8BA,W4
02A8:  ADD     W0,W4,W5
02AA:  MOV     DDC,W4
02AC:  MUL.UU  W4,#4,W0
02AE:  MOV     #8BA,W4
02B0:  ADD     W0,W4,W0
02B2:  MOV     #C,W4
02B4:  MOV     [W0++],[W4++]
02B6:  MOV     [W0++],[W4++]
02B8:  MOV.B   D,W0L
02BA:  MOV.B   W0L,[W5]
02BC:  MOV.B   W7L,[W5+#1]
02BE:  MOV.B   F,W0L
02C0:  MOV.B   W0L,[W5+#2]
02C2:  MOV.B   #0,W0L
02C4:  MOV.B   W0L,[W5+#3]
....................          reference[i] = 0 - reference[i];
02C6:  MOV     DDC,W4
02C8:  MUL.UU  W4,#4,W0
02CA:  MOV     #8BA,W4
02CC:  ADD     W0,W4,W5
02CE:  MOV     DDC,W4
02D0:  MUL.UU  W4,#4,W0
02D2:  MOV     #8BA,W4
02D4:  ADD     W0,W4,W0
02D6:  MOV     W0,W4
02D8:  MOV     #0,W3
02DA:  MOV     [W4++],[W3++]
02DC:  MOV     [W4++],[W3++]
02DE:  MOV     #0,W4
02E0:  SUB     W4,W0,[W5]
02E2:  MOV     #0,W4
02E4:  SUBB    W4,W1,[++W5]
....................       }
....................       
....................       reference[i] = reference[i] + voltage_offset;
02E6:  MOV     DDC,W4
02E8:  MUL.UU  W4,#4,W0
02EA:  MOV     #8BA,W4
02EC:  ADD     W0,W4,W5
02EE:  MOV     DDC,W4
02F0:  MUL.UU  W4,#4,W0
02F2:  MOV     #8BA,W4
02F4:  ADD     W0,W4,W0
02F6:  MOV     #C,W4
02F8:  MOV     [W0++],[W4++]
02FA:  MOV     [W0++],[W4++]
02FC:  MOV     #3E8,W4
02FE:  ADD     W6,W4,[W5]
0300:  ADDC    W7,#0,[++W5]
....................       if(reference[i] > high_duty_limit )
0302:  MOV     DDC,W4
0304:  MUL.UU  W4,#4,W0
0306:  MOV     #8BA,W4
0308:  ADD     W0,W4,W0
030A:  MOV     #A,W4
030C:  MOV     [W0++],[W4++]
030E:  MOV     [W0++],[W4++]
0310:  CP      W6,#0
0312:  BRA     LT,334
0314:  BRA     GT,31C
0316:  MOV     #79E,W4
0318:  CP      W4,W5
031A:  BRA     C,334
....................       { 
....................          reference[i] = high_duty_limit;
031C:  MOV     DDC,W4
031E:  MUL.UU  W4,#4,W0
0320:  MOV     #8BA,W4
0322:  ADD     W0,W4,W5
0324:  MOV.B   #9E,W0L
0326:  MOV.B   W0L,[W5]
0328:  MOV.B   #7,W0L
032A:  MOV.B   W0L,[W5+#1]
032C:  MOV.B   #0,W0L
032E:  MOV.B   W0L,[W5+#2]
0330:  MOV.B   #0,W0L
0332:  MOV.B   W0L,[W5+#3]
....................       }
....................       if(reference[i] < low_duty_limit)
0334:  MOV     DDC,W4
0336:  MUL.UU  W4,#4,W0
0338:  MOV     #8BA,W4
033A:  ADD     W0,W4,W0
033C:  MOV     #A,W4
033E:  MOV     [W0++],[W4++]
0340:  MOV     [W0++],[W4++]
0342:  CP      W6,#0
0344:  BRA     GT,366
0346:  BRA     LT,34E
0348:  MOV     #32,W4
034A:  CP      W4,W5
034C:  BRA     LEU,366
....................       { 
....................          reference[i] = low_duty_limit;
034E:  MOV     DDC,W4
0350:  MUL.UU  W4,#4,W0
0352:  MOV     #8BA,W4
0354:  ADD     W0,W4,W5
0356:  MOV.B   #32,W0L
0358:  MOV.B   W0L,[W5]
035A:  MOV.B   #0,W0L
035C:  MOV.B   W0L,[W5+#1]
035E:  MOV.B   #0,W0L
0360:  MOV.B   W0L,[W5+#2]
0362:  MOV.B   #0,W0L
0364:  MOV.B   W0L,[W5+#3]
....................       }
0366:  INC     0DDC
0368:  BRA     1CE
....................    }
....................       
....................    *P1DC1 = reference[0];  *(P1DC1+1) = reference[0]>>8;
036A:  MOV.B   8BA,W0L
036C:  MOV.B   W0L,1D6
036E:  MOV.B   8BB,W0L
0370:  MOV.B   W0L,1D7
....................    *P1DC2 = reference[1];  *(P1DC2+1) = reference[1]>>8;
0372:  MOV.B   8BE,W0L
0374:  MOV.B   W0L,1D8
0376:  MOV.B   8BF,W0L
0378:  MOV.B   W0L,1D9
....................    *P1DC3 = reference[2];  *(P1DC3+1) = reference[2]>>8;
037A:  MOV.B   8C2,W0L
037C:  MOV.B   W0L,1DA
037E:  MOV.B   8C3,W0L
0380:  MOV.B   W0L,1DB
....................   
.................... //!   if(sample < 15)
.................... //!   {
.................... //!      output_bit(Sync_Out,1);
.................... //!   }
.................... //!   else
.................... //!   {
.................... //!      output_bit(Sync_Out,0);
.................... //!   }
....................       output_bit(TIM_tick_pin , 0);
0382:  BCLR.B  2CA.3
0384:  BCLR.B  2C6.3
0386:  BCLR.B  84.3
0388:  MOV     #1A,W0
038A:  REPEAT  #C
038C:  MOV     [--W15],[W0--]
038E:  MOV     [--W15],W0
0390:  POP     32
0392:  POP     36
0394:  POP     42
0396:  RETFIE  
.................... }
.................... 
....................    
.................... void main()
*
0F50:  MOV     #F80,W15
0F52:  MOV     #FFF,W0
0F54:  MOV     W0,20
0F56:  NOP     
0F58:  MOV     #4444,W0
0F5A:  MOV     W0,94
0F5C:  MOV     #4444,W0
0F5E:  MOV     W0,A6
0F60:  BSET.B  81.7
0F62:  CLR     8B6
0F64:  CLR     8B8
0F66:  CLR     D08
0F68:  CLR     D0A
0F6A:  MOV     #1,W4
0F6C:  MOV     W4,D0C
0F6E:  CLR     D0E
0F70:  BCLR.B  D10.0
0F72:  CLR.B   D11
0F74:  CLR     D12
0F76:  CLR     D14
0F78:  SETM    2A8
0F7A:  BRA     1018
0F7C:  DATA    C0,06,08
0F7E:  DATA    00,00,00
0F80:  DATA    4B,F0,3F
0F82:  DATA    5C,0A,58
0F84:  DATA    F6,3B,8F
0F86:  DATA    00,C0,3C
0F88:  DATA    8B,28,AC
0F8A:  DATA    3C,BE,F6
0F8C:  DATA    3F,D2,D5
0F8E:  DATA    44,16,8C
0F90:  DATA    15,D7,BF
0F92:  DATA    69,00,5A
0F94:  DATA    2E,1B,87
0F96:  DATA    99,3F,9A
0F98:  DATA    5F,AD,4B
0F9A:  DATA    91,E4,01
0F9C:  DATA    C0,5D,11
0F9E:  DATA    2F,92,E4
0FA0:  DATA    81,FB,3F
0FA2:  DATA    38,DA,91
0FA4:  DATA    80,9D,C5
0FA6:  DATA    E0,BF,6F
0FA8:  DATA    12,C0,B4
0FAA:  DATA    C3,09,AB
0FAC:  DATA    3F,6B,C1
0FAE:  DATA    03,4E,C1
0FB0:  DATA    B5,45,BF
0FB2:  DATA    F7,40,05
0FB4:  DATA    FF,00,5A
0FB6:  DATA    EF,3F,F3
0FB8:  DATA    A3,E2,F7
0FBA:  DATA    D7,FF,01
0FBC:  DATA    40,C0,B4
0FBE:  DATA    FF,05,3C
0FC0:  DATA    58,FC,3F
0FC2:  DATA    3B,D3,C0
0FC4:  DATA    B5,BA,8C
0FC6:  DATA    E2,3F,39
0FC8:  DATA    D3,C7,3D
0FCA:  DATA    41,79,B2
0FCC:  DATA    3F,87,0D
0FCE:  DATA    3C,50,D0
0FD0:  DATA    AF,62,3F
0FD2:  DATA    30,4B,8D
0FD4:  DATA    A2,82,AA
0FD6:  DATA    04,40,09
0FD8:  DATA    A0,40,4A
0FDA:  DATA    05,76,03
0FDC:  DATA    40,EC,9E
0FDE:  DATA    37,88,A6
0FE0:  DATA    44,F0,3F
0FE2:  DATA    8F,12,8D
0FE4:  DATA    29,9A,5B
0FE6:  DATA    C7,3F,0E
0FE8:  DATA    E0,80,7C
0FEA:  DATA    A1,D8,86
0FEC:  DATA    3F,29,4B
0FEE:  DATA    FB,95,C2
0FF0:  DATA    37,1A,3F
0FF2:  DATA    40,06,00
0FF4:  DATA    C0,0C,08
0FF6:  DATA    BA,00,C0
0FF8:  DATA    06,09,04
0FFA:  DATA    00,00,00
0FFC:  INC     W2,W2
0FFE:  CP      W2,#1
1000:  BRA     NZ,100A
1002:  TBLRDL  [W1],W3
1004:  TBLRDH  [W1++],W4
1006:  MOV.B   6,W0L
1008:  RETURN  
100A:  CP      W2,#2
100C:  BRA     NZ,1012
100E:  MOV.B   7,W0L
1010:  RETURN  
1012:  MOV.B   8,W0L
1014:  CLR     W2
1016:  RETURN  
1018:  MOV     #0,W6
101A:  MOV     #0,W0
101C:  MOV     W0,32
101E:  MOV     #F7C,W0
1020:  MOV     W0,W1
1022:  CLR     W2
1024:  CALL    FFC
1028:  MOV.B   W0L,B
102A:  CALL    FFC
102E:  MOV.B   W0L,A
1030:  CP0     W5
1032:  BRA     Z,1066
1034:  BTSS    W5.F
1036:  BRA     1046
1038:  CALL    FFC
103C:  MOV.B   W0L,D
103E:  CALL    FFC
1042:  MOV.B   W0L,C
1044:  BCLR    W5.F
1046:  BTSS    W5.E
1048:  BRA     105A
104A:  BCLR    W5.E
104C:  DEC     W5,W5
104E:  CALL    FFC
1052:  MOV.B   W0L,W7L
1054:  REPEAT  W5
1056:  MOV.B   W7L,[W6++]
1058:  BRA     1024
105A:  CALL    FFC
105E:  MOV.B   W0L,[W6++]
1060:  DEC     W5,W5
1062:  BRA     NZ,105A
1064:  BRA     1024
.................... { 
....................  
....................    freq = 1;
1066:  MOV     #1,W4
1068:  MOV     W4,D0C
....................    
....................    initMCPWM();
106A:  CALL    398
....................    fill_sine_table();
106E:  CALL    C86
....................    timer_reload();
1072:  CALL    DB8
....................    voltage_gain(); 
1076:  CALL    E88
....................    
....................    output_drive(LED_PIN);
107A:  BCLR.B  2C6.5
....................    output_drive(PWM_tick_pin);
107C:  BCLR.B  2C6.2
....................    output_drive(TIM_tick_pin);   
107E:  BCLR.B  2C6.3
....................    
....................    setup_adc(ADC_CLOCK_DIV_32);
1080:  MOV     #1F1F,W4
1082:  MOV     W4,2A4
1084:  MOV     #80E0,W4
1086:  MOV     W4,2A0
....................    setup_adc_ports(ADC_pin);
1088:  MOV     #FFFE,W4
108A:  MOV     W4,2A8
108C:  CLR     2A2
....................    set_adc_channel(0);
108E:  CLR     2A6
....................    delay_us(10);
1090:  REPEAT  #9E
1092:  NOP     
....................    
....................    setup_timer1(TMR_INTERNAL | TMR_DIV_BY_64, timer_table[freq]);            
1094:  MOV     D0C,W0
1096:  SL      W0,#1,W0
1098:  MOV     #912,W4
109A:  ADD     W0,W4,W0
109C:  MOV     [W0],W5
109E:  CLR     104
10A0:  MOV     W5,102
10A2:  MOV     #8020,W4
10A4:  MOV     W4,104
....................    enable_interrupts(INT_TIMER1);  
10A6:  BSET.B  8C.3
....................       
....................    enable_interrupts(INT_PWM1);  
10A8:  BSET.B  90.7
....................    enable_interrupts(INTR_GLOBAL);
10AA:  BCLR.B  81.7
10AC:  CLR     42
10AE:  BSET.B  81.7
....................    
.................... //!   duty[0] = 50;
.................... //!   duty[1] = 50;    
.................... //!   duty[2] = 50;  
.................... //!   
.................... //!   *(P1DC1+1) = duty[0]>>8;   *P1DC1 = duty[0];
....................    
....................   
....................    
....................     
....................    while(TRUE)
....................    {
....................       if (tick) {
10B0:  BTSS.B  D10.0
10B2:  BRA     1112
....................          raw_adc = read_adc();
10B4:  BCLR.B  2A0.0
10B6:  BSET.B  2A0.1
10B8:  BTSS.B  2A0.0
10BA:  BRA     10B8
10BC:  PUSH    280
10BE:  POP     D08
....................          if (raw_adc > 1023) 
10C0:  MOV     D08,W4
10C2:  MOV     #3FF,W3
10C4:  CP      W3,W4
10C6:  BRA     C,10CC
....................          {
....................             raw_adc = 1023;
10C8:  MOV     #3FF,W4
10CA:  MOV     W4,D08
....................          }
....................          raw_adc = raw_adc >> 2;
10CC:  LSR     D08
10CE:  LSR     D08
....................          throttle_level = raw_adc;  
10D0:  PUSH    D08
10D2:  POP     D0A
....................          if (throttle_level > 255)
10D4:  MOV     D0A,W4
10D6:  MOV     #FF,W3
10D8:  CP      W3,W4
10DA:  BRA     GE,10E0
....................          {
....................             throttle_level = 255;
10DC:  MOV     #FF,W4
10DE:  MOV     W4,D0A
....................          }
....................          if (throttle_level < 0)   
10E0:  MOV     D0A,W4
10E2:  CP      W4,#0
10E4:  BRA     GE,10E8
....................          {
....................             throttle_level = 0;
10E6:  CLR     D0A
....................          }
....................          freq = throttle_level - 5 ;   
10E8:  MOV     D0A,W4
10EA:  SUB     W4,#5,W0
10EC:  MOV     W0,D0C
....................          peak_voltage = gain_table[throttle_level];
10EE:  MOV     D0A,W4
10F0:  MUL.UU  W4,#2,W0
10F2:  MOV     #B08,W4
10F4:  ADD     W0,W4,W0
10F6:  MOV     [W0],[W15++]
10F8:  POP     8B8
....................          setup_timer1(TMR_INTERNAL | TMR_DIV_BY_64, timer_table[freq]); 
10FA:  MOV     D0C,W0
10FC:  SL      W0,#1,W0
10FE:  MOV     #912,W4
1100:  ADD     W0,W4,W0
1102:  MOV     [W0],W5
1104:  CLR     104
1106:  MOV     W5,102
1108:  MOV     #8020,W4
110A:  MOV     W4,104
....................            
....................         
....................          output_bit(PWM_tick_pin , 0);
110C:  BCLR.B  2CA.2
110E:  BCLR.B  2C6.2
....................          tick = 0;
1110:  BCLR.B  D10.0
....................       
....................       }
1112:  BRA     10B0
....................       
....................      
....................       
....................     } 
.................... 
.................... }
.................... 
1114:  PWRSAV  #0
.................... 
.................... void initMCPWM(void)
.................... {   
....................    *(P1TCON+1)=0x80;  *P1TCON=0x02;
*
0398:  MOV.B   #80,W0L
039A:  MOV.B   W0L,1C1
039C:  MOV.B   #2,W0L
039E:  MOV.B   W0L,1C0
....................  //  *(P1TMR+1)=0x00;  *P1TMR=0x78;
....................    *(P1TPER+1)=0x03;  *P1TPER=0xE7;  
03A0:  MOV.B   #3,W0L
03A2:  MOV.B   W0L,1C5
03A4:  MOV.B   #E7,W0L
03A6:  MOV.B   W0L,1C4
.................... //!   *(P1TPER+1)=0x00;  *P1TPER=0xFA;
....................    *(P1SECMP+1)=0x00;  *P1SECMP=0x01; //
03A8:  CLR.B   1C7
03AA:  MOV.B   #1,W0L
03AC:  MOV.B   W0L,1C6
....................    *(PWM1CON1+1)=0x00;  *PWM1CON1=0x77;
03AE:  CLR.B   1C9
03B0:  MOV.B   #77,W0L
03B2:  MOV.B   W0L,1C8
....................    *(PWM1CON2+1)=0x0F;  *PWM1CON2=0x02;
03B4:  MOV.B   #F,W0L
03B6:  MOV.B   W0L,1CB
03B8:  MOV.B   #2,W0L
03BA:  MOV.B   W0L,1CA
....................    *(P1DTCON1+1)=0x00;  *P1DTCON1=0x09; //0x09
03BC:  CLR.B   1CD
03BE:  MOV.B   #9,W0L
03C0:  MOV.B   W0L,1CC
....................    *(P1DTCON2+1)=0x00;  *P1DTCON2=0x00;
03C2:  CLR.B   1CF
03C4:  CLR.B   1CE
....................    *(P1FLTACON+1)=0x00;  *P1FLTACON=0x00; //0x0000
03C6:  CLR.B   1D1
03C8:  CLR.B   1D0
....................    *(P1OVDCON+1)=0x7F;  *P1OVDCON=0x7F;
03CA:  MOV.B   #7F,W0L
03CC:  MOV.B   W0L,1D5
03CE:  MOV.B   #7F,W0L
03D0:  MOV.B   W0L,1D4
....................    *(P1DC1+1) = duty[0]>>8;   *P1DC1 = duty[0]; 
03D2:  MOV.B   8B1,W0L
03D4:  MOV.B   W0L,1D7
03D6:  MOV.B   8B0,W0L
03D8:  MOV.B   W0L,1D6
....................    *(P1DC2+1) = duty[1]>>8;   *P1DC2 = duty[1];
03DA:  MOV.B   8B3,W0L
03DC:  MOV.B   W0L,1D9
03DE:  MOV.B   8B2,W0L
03E0:  MOV.B   W0L,1D8
....................    *(P1DC3+1) = duty[2]>>8;   *P1DC3 = duty[2];  
03E2:  MOV.B   8B5,W0L
03E4:  MOV.B   W0L,1DB
03E6:  MOV.B   8B4,W0L
03E8:  MOV.B   W0L,1DA
....................    *(IPC14+1) =0x00;*(IPC14) =0x70;
03EA:  CLR.B   C1
03EC:  MOV.B   #70,W0L
03EE:  MOV.B   W0L,C0
03F0:  RETURN  
.................... }
.................... 
.................... 
....................    
.................... void fill_sine_table(void)
*
0C86:  MOV     W5,[W15++]
0C88:  MOV     W6,[W15++]
0C8A:  MOV     W7,[W15++]
0C8C:  MOV     W8,[W15++]
.................... {
....................    for(sine_index=0;sine_index < max_samples;sine_index++)  
0C8E:  CLR     902
0C90:  MOV     902,W4
0C92:  CP      W4,#1E
0C94:  BRA     C,D44
....................    {
....................       theeta=sine_index*2.0*PI/max_samples;
0C96:  MOV     902,W0
0C98:  MOV     #0,W1
0C9A:  MOV     #0,W2
0C9C:  MOV     #0,W3
0C9E:  CALL    3F2
0CA2:  MOV     #0,W4
0CA4:  MOV     #0,W5
0CA6:  MOV     #0,W6
0CA8:  MOV     #4000,W7
0CAA:  CALL    45C
0CAE:  MOV     W0,W5
0CB0:  MOV     W1,W6
0CB2:  MOV     W2,W7
0CB4:  MOV     W3,W8
0CB6:  MOV     W5,[W15++]
0CB8:  MOV     W6,[W15++]
0CBA:  MOV     W7,[W15++]
0CBC:  MOV     W5,W0
0CBE:  MOV     W6,W1
0CC0:  MOV     W7,W2
0CC2:  MOV     W8,W3
0CC4:  MOV     #2D18,W4
0CC6:  MOV     #5444,W5
0CC8:  MOV     #21FB,W6
0CCA:  MOV     #4009,W7
0CCC:  CALL    45C
0CD0:  MOV     [--W15],W7
0CD2:  MOV     [--W15],W6
0CD4:  MOV     [--W15],W5
0CD6:  MOV     W0,W5
0CD8:  MOV     W1,W6
0CDA:  MOV     W2,W7
0CDC:  MOV     W3,W8
0CDE:  MOV     W5,[W15++]
0CE0:  MOV     W6,[W15++]
0CE2:  MOV     W7,[W15++]
0CE4:  MOV     W5,W0
0CE6:  MOV     W6,W1
0CE8:  MOV     W7,W2
0CEA:  MOV     W8,W3
0CEC:  MOV     #0,W4
0CEE:  MOV     #0,W5
0CF0:  MOV     #0,W6
0CF2:  MOV     #403E,W7
0CF4:  CALL    56C
0CF8:  MOV     [--W15],W7
0CFA:  MOV     [--W15],W6
0CFC:  MOV     [--W15],W5
0CFE:  MOV     W0,90A
0D00:  MOV     W1,90C
0D02:  MOV     W2,90E
0D04:  MOV     W3,910
....................       sine_table[sine_index]=255*sin(theeta);
0D06:  MOV     902,W0
0D08:  SL      W0,#1,W0
0D0A:  MOV     #8C6,W4
0D0C:  ADD     W0,W4,W5
0D0E:  PUSH    90A
0D10:  POP     D1A
0D12:  PUSH    90C
0D14:  POP     D1C
0D16:  PUSH    90E
0D18:  POP     D1E
0D1A:  PUSH    910
0D1C:  POP     D20
0D1E:  CALL    BEC
0D22:  MOV     W5,[W15++]
0D24:  MOV     W0,W4
0D26:  MOV     W1,W5
0D28:  MOV     W2,W6
0D2A:  MOV     W3,W7
0D2C:  MOV     #0,W0
0D2E:  MOV     #0,W1
0D30:  MOV     #E000,W2
0D32:  MOV     #406F,W3
0D34:  CALL    45C
0D38:  MOV     [--W15],W5
0D3A:  CALL    C28
0D3E:  MOV     W0,[W5]
0D40:  INC     0902
0D42:  BRA     C90
....................    }
0D44:  MOV     [--W15],W8
0D46:  MOV     [--W15],W7
0D48:  MOV     [--W15],W6
0D4A:  MOV     [--W15],W5
0D4C:  RETURN  
.................... }
.................... 
.................... 
.................... void timer_reload(void) 
*
0DB8:  MOV     W5,[W15++]
0DBA:  MOV     W6,[W15++]
0DBC:  MOV     W7,[W15++]
0DBE:  MOV     W8,[W15++]
0DC0:  CLR     D16
0DC2:  CLR     D18
0DC4:  CLR     D1A
0DC6:  CLR     D1C
.................... {
....................    double intr_per_sample = 0.0;
....................    
....................    for (int sample = 1 ; sample <= max_freq ; sample++) 
0DC8:  MOV     #1,W4
0DCA:  MOV     W4,D1E
0DCC:  MOV     D1E,W4
0DCE:  MOV     #FA,W3
0DD0:  CP      W3,W4
0DD2:  BRA     LT,E7A
....................    {
....................       intr_per_sample = ((1.0/sample)*1000)/max_samples;
0DD4:  MOV     D1E,W0
0DD6:  CLR     W3
0DD8:  BTSC    W0.F
0DDA:  SETM    W3
0DDC:  MOV     W3,W1
0DDE:  MOV     W3,W2
0DE0:  CALL    D4E
0DE4:  MOV     W0,W4
0DE6:  MOV     W1,W5
0DE8:  MOV     W2,W6
0DEA:  MOV     W3,W7
0DEC:  MOV     #0,W0
0DEE:  MOV     #0,W1
0DF0:  MOV     #0,W2
0DF2:  MOV     #3FF0,W3
0DF4:  CALL    56C
0DF8:  MOV     W0,W5
0DFA:  MOV     W1,W6
0DFC:  MOV     W2,W7
0DFE:  MOV     W3,W8
0E00:  MOV     W5,[W15++]
0E02:  MOV     W6,[W15++]
0E04:  MOV     W7,[W15++]
0E06:  MOV     W5,W0
0E08:  MOV     W6,W1
0E0A:  MOV     W7,W2
0E0C:  MOV     W8,W3
0E0E:  MOV     #0,W4
0E10:  MOV     #0,W5
0E12:  MOV     #4000,W6
0E14:  MOV     #408F,W7
0E16:  CALL    45C
0E1A:  MOV     [--W15],W7
0E1C:  MOV     [--W15],W6
0E1E:  MOV     [--W15],W5
0E20:  MOV     W0,W5
0E22:  MOV     W1,W6
0E24:  MOV     W2,W7
0E26:  MOV     W3,W8
0E28:  MOV     W5,[W15++]
0E2A:  MOV     W6,[W15++]
0E2C:  MOV     W7,[W15++]
0E2E:  MOV     W5,W0
0E30:  MOV     W6,W1
0E32:  MOV     W7,W2
0E34:  MOV     W8,W3
0E36:  MOV     #0,W4
0E38:  MOV     #0,W5
0E3A:  MOV     #0,W6
0E3C:  MOV     #403E,W7
0E3E:  CALL    56C
0E42:  MOV     [--W15],W7
0E44:  MOV     [--W15],W6
0E46:  MOV     [--W15],W5
0E48:  MOV     W0,D16
0E4A:  MOV     W1,D18
0E4C:  MOV     W2,D1A
0E4E:  MOV     W3,D1C
....................       timer_table[sample] = intr_per_sample/per_clock_tick;     
0E50:  MOV     D1E,W4
0E52:  MUL.UU  W4,#2,W0
0E54:  MOV     #912,W4
0E56:  ADD     W0,W4,W5
0E58:  MOV     W5,[W15++]
0E5A:  MOV     D16,W0
0E5C:  MOV     D18,W1
0E5E:  MOV     D1A,W2
0E60:  MOV     D1C,W3
0E62:  MOV     #933F,W4
0E64:  MOV     #F3FD,W5
0E66:  MOV     #6034,W6
0E68:  MOV     #3F80,W7
0E6A:  CALL    56C
0E6E:  MOV     [--W15],W5
0E70:  CALL    8E6
0E74:  MOV     W0,[W5]
0E76:  INC     0D1E
0E78:  BRA     DCC
....................    }
....................    timer_table[0] = timer_table[1];
0E7A:  PUSH    914
0E7C:  POP     912
0E7E:  MOV     [--W15],W8
0E80:  MOV     [--W15],W7
0E82:  MOV     [--W15],W6
0E84:  MOV     [--W15],W5
0E86:  RETURN  
.................... }
.................... 
.................... void voltage_gain(void) 
0E88:  MOV     W5,[W15++]
0E8A:  MOV     W6,[W15++]
0E8C:  MOV     W7,[W15++]
0E8E:  MOV     W8,[W15++]
.................... {
....................    for (int i = 0 ; i <= break_level ; i++) {
0E90:  CLR     D16
0E92:  MOV     D16,W4
0E94:  CP      W4,#5
0E96:  BRA     GT,EAA
....................             gain_table[i] = 0; 
0E98:  MOV     D16,W4
0E9A:  MUL.UU  W4,#2,W0
0E9C:  MOV     #B08,W4
0E9E:  ADD     W0,W4,W5
0EA0:  CLR.B   [W5]
0EA2:  MOV.B   #0,W0L
0EA4:  MOV.B   W0L,[W5+#1]
0EA6:  INC     0D16
0EA8:  BRA     E92
....................    }
....................    
....................    for (int i = break_level+1 ; i <= sustain_level; i++) {     
0EAA:  MOV     #6,W4
0EAC:  MOV     W4,D18
0EAE:  MOV     D18,W4
0EB0:  MOV     #C8,W3
0EB2:  CP      W3,W4
0EB4:  BRA     LT,F26
....................         temp = SLOPE * i + pedestal_amplitude;
0EB6:  MOV     D18,W0
0EB8:  CLR     W3
0EBA:  BTSC    W0.F
0EBC:  SETM    W3
0EBE:  MOV     W3,W1
0EC0:  MOV     W3,W2
0EC2:  CALL    D4E
0EC6:  MOV     W0,W4
0EC8:  MOV     W1,W5
0ECA:  MOV     W2,W6
0ECC:  MOV     W3,W7
0ECE:  MOV     #999A,W0
0ED0:  MOV     #9999,W1
0ED2:  MOV     #9999,W2
0ED4:  MOV     #4005,W3
0ED6:  CALL    45C
0EDA:  MOV     W0,W5
0EDC:  MOV     W1,W6
0EDE:  MOV     W2,W7
0EE0:  MOV     W3,W8
0EE2:  BCLR.B  43.0
0EE4:  MOV     W5,[W15++]
0EE6:  MOV     W6,[W15++]
0EE8:  MOV     W7,[W15++]
0EEA:  MOV     W5,W0
0EEC:  MOV     W6,W1
0EEE:  MOV     W7,W2
0EF0:  MOV     W8,W3
0EF2:  MOV     #0,W4
0EF4:  MOV     #0,W5
0EF6:  MOV     #0,W6
0EF8:  MOV     #4024,W7
0EFA:  CALL    674
0EFE:  MOV     [--W15],W7
0F00:  MOV     [--W15],W6
0F02:  MOV     [--W15],W5
0F04:  CALL    8E6
0F08:  MOV     W0,D0E
....................         if(temp > peak_amplitude ) 
0F0A:  MOV     D0E,W4
0F0C:  MOV     #3B6,W3
0F0E:  CP      W3,W4
0F10:  BRA     C,F16
....................         {
....................          temp = peak_amplitude;
0F12:  MOV     #3B6,W4
0F14:  MOV     W4,D0E
....................         }
....................         gain_table[i] = temp;
0F16:  MOV     D18,W4
0F18:  MUL.UU  W4,#2,W0
0F1A:  MOV     #B08,W4
0F1C:  ADD     W0,W4,W5
0F1E:  MOV     D0E,W4
0F20:  MOV     W4,[W5+#0]
0F22:  INC     0D18
0F24:  BRA     EAE
....................    }
....................    for (int i = sustain_level+1 ; i <= 255; i++) {     
0F26:  MOV     #C9,W4
0F28:  MOV     W4,D1A
0F2A:  MOV     D1A,W4
0F2C:  MOV     #FF,W3
0F2E:  CP      W3,W4
0F30:  BRA     LT,F46
....................       gain_table[i] = peak_amplitude;
0F32:  MOV     D1A,W4
0F34:  MUL.UU  W4,#2,W0
0F36:  MOV     #B08,W4
0F38:  ADD     W0,W4,W5
0F3A:  MOV.B   #B6,W0L
0F3C:  MOV.B   W0L,[W5]
0F3E:  MOV.B   #3,W0L
0F40:  MOV.B   W0L,[W5+#1]
0F42:  INC     0D1A
0F44:  BRA     F2A
....................    }
0F46:  MOV     [--W15],W8
0F48:  MOV     [--W15],W7
0F4A:  MOV     [--W15],W6
0F4C:  MOV     [--W15],W5
0F4E:  RETURN  
.................... 
.................... }
.................... 
.................... 

Configuration Fuses:
   Word  1L: 0306   XT_PLL8 PR CKSFSM
          H: 0000  
   Word  2L: 003F   WPSB16 WPSA512 NOWDT
          H: 0000  
   Word  3L: 82B3   PUT64 BORRES BROWNOUT LPOL_LOW HPOL_HIGH PWMPIN MCLR
          H: 0000  
   Word  4L: 310F  
          H: 0000  
   Word  5L: 330F  
          H: 0000  
   Word  6L: 0007   NOWRT NOPROTECT
          H: 0000  
   Word  7L: C003   ICSP1 NODEBUG
          H: 0000  
